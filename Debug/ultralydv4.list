
ultralydv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a77c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800a94c  0800a94c  0001a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aab0  0800aab0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aab0  0800aab0  0001aab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aab8  0800aab8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aab8  0800aab8  0001aab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aabc  0800aabc  0001aabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008558  20000078  0800ab38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085d0  0800ab38  000285d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2dd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000444d  00000000  00000000  0003e385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  000427d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00043ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258bb  00000000  00000000  000453b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d52d  00000000  00000000  0006ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc2b3  00000000  00000000  00088198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016444b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006398  00000000  00000000  0016449c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a934 	.word	0x0800a934

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800a934 	.word	0x0800a934

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	2011      	movs	r0, #17
 8000dd8:	f001 f943 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ddc:	2011      	movs	r0, #17
 8000dde:	f001 f95c 	bl	800209a <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	//PrintServerPrintfInit();
	//deftask_init();
	//buzzer_init();
	PrintServerPrintfInit();
 8000df4:	f000 ffba 	bl	8001d6c <PrintServerPrintfInit>
	deftask_init();
 8000df8:	f000 ff1c 	bl	8001c34 <deftask_init>
	buzzer_init();
 8000dfc:	f000 fec4 	bl	8001b88 <buzzer_init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a30      	ldr	r2, [pc, #192]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	481d      	ldr	r0, [pc, #116]	; (8000ee8 <MX_GPIO_Init+0xe4>)
 8000e74:	f001 fe30 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <MX_GPIO_Init+0xe8>)
 8000e80:	f001 fe2a 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_GPIO_Init+0xe8>)
 8000e9c:	f001 fc88 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_GPIO_Init+0xe4>)
 8000eb8:	f001 fc7a 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_GPIO_Init+0xe8>)
 8000ed6:	f001 fc6b 	bl	80027b0 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020800 	.word	0x40020800

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 ff68 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f816 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff ff82 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f00:	f7ff ff56 	bl	8000db0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f04:	f000 fc6e 	bl	80017e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f08:	f000 f996 	bl	8001238 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f0c:	f000 fa34 	bl	8001378 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f10:	f000 fa88 	bl	8001424 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f14:	f000 faf6 	bl	8001504 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f18:	f004 ff82 	bl	8005e20 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f1c:	f7ff ff68 	bl	8000df0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f20:	f004 ffa2 	bl	8005e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <main+0x34>
	...

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2234      	movs	r2, #52	; 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 f812 	bl	8009f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <SystemClock_Config+0xdc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <SystemClock_Config+0xdc>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <SystemClock_Config+0xdc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <SystemClock_Config+0xe0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <SystemClock_Config+0xe0>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <SystemClock_Config+0xe0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f9c:	23b4      	movs	r3, #180	; 0xb4
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 f95f 	bl	8003274 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fbc:	f000 f880 	bl	80010c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc0:	f001 fdbe 	bl	8002b40 <HAL_PWREx_EnableOverDrive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fca:	f000 f879 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	2105      	movs	r1, #5
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fdf7 	bl	8002be0 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ff8:	f000 f862 	bl	80010c0 <Error_Handler>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3750      	adds	r7, #80	; 0x50
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d110      	bne.n	8001040 <HAL_TIM_IC_CaptureCallback+0x34>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
		printf("CCR1 is %i \n", TIM4->CCR1);
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001022:	4619      	mov	r1, r3
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_TIM_IC_CaptureCallback+0x40>)
 8001026:	f000 fe17 	bl	8001c58 <PrintServerPrintf>
		if (TIM4->CCR1 >= 5000){
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001032:	4293      	cmp	r3, r2
 8001034:	d904      	bls.n	8001040 <HAL_TIM_IC_CaptureCallback+0x34>
			captured_value1 = TIM4->CCR1;
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	461a      	mov	r2, r3
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <HAL_TIM_IC_CaptureCallback+0x44>)
 800103e:	601a      	str	r2, [r3, #0]

		}

	}
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40000800 	.word	0x40000800
 800104c:	0800a94c 	.word	0x0800a94c
 8001050:	20000094 	.word	0x20000094

08001054 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d11e      	bne.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x50>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
		if(hardwareDelayFlag == 1)
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d117      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001072:	f002 fd7f 	bl	8003b74 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800107a:	f004 f8b5 	bl	80051e8 <HAL_TIMEx_PWMN_Stop>
			TIM1->CNT = 0;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = 54000;
 8001084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001088:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
			//__HAL_TIM_ENABLE(&htim2);
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001092:	f002 ff61 	bl	8003f58 <HAL_TIM_IC_Stop_IT>
						hardwareDelayFlag = 0;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
				TIM4->CNT = 0;
					//TIM4->DIER
		}

	}
}
 800109c:	e002      	b.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x50>
				TIM4->CNT = 0;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000098 	.word	0x20000098
 80010b0:	200000a0 	.word	0x200000a0
 80010b4:	40010000 	.word	0x40010000
 80010b8:	20000130 	.word	0x20000130
 80010bc:	40000800 	.word	0x40000800

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x54>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_MspInit+0x54>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x54>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_MspInit+0x54>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_MspInit+0x54>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_MspInit+0x54>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	210f      	movs	r1, #15
 800110e:	f06f 0001 	mvn.w	r0, #1
 8001112:	f000 ffa6 	bl	8002062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 fe8a 	bl	8001e6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001158:	f007 fd2a 	bl	8008bb0 <xTaskGetSchedulerState>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001162:	f008 fc49 	bl	80099f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Stream6_IRQHandler+0x10>)
 8001172:	f001 f8b3 	bl	80022dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000204 	.word	0x20000204

08001180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM2_IRQHandler+0x10>)
 8001186:	f002 ffef 	bl	8004168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000e8 	.word	0x200000e8

08001194 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM4_IRQHandler+0x10>)
 800119a:	f002 ffe5 	bl	8004168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000130 	.word	0x20000130

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f008 fe88 	bl	8009eec <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20020000 	.word	0x20020000
 8001208:	00000400 	.word	0x00000400
 800120c:	2000009c 	.word	0x2000009c
 8001210:	200085d0 	.word	0x200085d0

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b096      	sub	sp, #88	; 0x58
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2220      	movs	r2, #32
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fe75 	bl	8009f60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <MX_TIM1_Init+0x138>)
 8001278:	4a3e      	ldr	r2, [pc, #248]	; (8001374 <MX_TIM1_Init+0x13c>)
 800127a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <MX_TIM1_Init+0x138>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <MX_TIM1_Init+0x138>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <MX_TIM1_Init+0x138>)
 800128a:	f241 1294 	movw	r2, #4500	; 0x1194
 800128e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <MX_TIM1_Init+0x138>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <MX_TIM1_Init+0x138>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <MX_TIM1_Init+0x138>)
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a2:	4833      	ldr	r0, [pc, #204]	; (8001370 <MX_TIM1_Init+0x138>)
 80012a4:	f002 fa84 	bl	80037b0 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012ae:	f7ff ff07 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012bc:	4619      	mov	r1, r3
 80012be:	482c      	ldr	r0, [pc, #176]	; (8001370 <MX_TIM1_Init+0x138>)
 80012c0:	f003 f9b8 	bl	8004634 <HAL_TIM_ConfigClockSource>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ca:	f7ff fef9 	bl	80010c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ce:	4828      	ldr	r0, [pc, #160]	; (8001370 <MX_TIM1_Init+0x138>)
 80012d0:	f002 fb2e 	bl	8003930 <HAL_TIM_PWM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012da:	f7ff fef1 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ea:	4619      	mov	r1, r3
 80012ec:	4820      	ldr	r0, [pc, #128]	; (8001370 <MX_TIM1_Init+0x138>)
 80012ee:	f003 ffd9 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012f8:	f7ff fee2 	bl	80010c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 8001300:	2328      	movs	r3, #40	; 0x28
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <MX_TIM1_Init+0x138>)
 8001322:	f003 f8c5 	bl	80044b0 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800132c:	f7ff fec8 	bl	80010c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 800133c:	2396      	movs	r3, #150	; 0x96
 800133e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <MX_TIM1_Init+0x138>)
 8001354:	f004 f822 	bl	800539c <HAL_TIMEx_ConfigBreakDeadTime>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800135e:	f7ff feaf 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <MX_TIM1_Init+0x138>)
 8001364:	f000 f9de 	bl	8001724 <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3758      	adds	r7, #88	; 0x58
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000a0 	.word	0x200000a0
 8001374:	40010000 	.word	0x40010000

08001378 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_TIM2_Init+0xa8>)
 8001396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_TIM2_Init+0xa8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22500;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013aa:	f245 72e4 	movw	r2, #22500	; 0x57e4
 80013ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013bc:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013be:	f002 f9f7 	bl	80037b0 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013c8:	f7ff fe7a 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013da:	f003 f92b 	bl	8004634 <HAL_TIM_ConfigClockSource>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013e4:	f7ff fe6c 	bl	80010c0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80013e8:	2108      	movs	r1, #8
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_TIM2_Init+0xa8>)
 80013ec:	f002 fe62 	bl	80040b4 <HAL_TIM_OnePulse_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013f6:	f7ff fe63 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_TIM2_Init+0xa8>)
 8001408:	f003 ff4c 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001412:	f7ff fe55 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200000e8 	.word	0x200000e8

08001424 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <MX_TIM4_Init+0xd8>)
 8001450:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <MX_TIM4_Init+0xdc>)
 8001452:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_TIM4_Init+0xd8>)
 8001456:	220e      	movs	r2, #14
 8001458:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <MX_TIM4_Init+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_TIM4_Init+0xd8>)
 8001462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001466:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_TIM4_Init+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MX_TIM4_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001474:	4821      	ldr	r0, [pc, #132]	; (80014fc <MX_TIM4_Init+0xd8>)
 8001476:	f002 f99b 	bl	80037b0 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001480:	f7ff fe1e 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4619      	mov	r1, r3
 8001490:	481a      	ldr	r0, [pc, #104]	; (80014fc <MX_TIM4_Init+0xd8>)
 8001492:	f003 f8cf 	bl	8004634 <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800149c:	f7ff fe10 	bl	80010c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014a0:	4816      	ldr	r0, [pc, #88]	; (80014fc <MX_TIM4_Init+0xd8>)
 80014a2:	f002 fbd7 	bl	8003c54 <HAL_TIM_IC_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80014ac:	f7ff fe08 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480f      	ldr	r0, [pc, #60]	; (80014fc <MX_TIM4_Init+0xd8>)
 80014c0:	f003 fef0 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80014ca:	f7ff fdf9 	bl	80010c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM4_Init+0xd8>)
 80014e6:	f002 ff47 	bl	8004378 <HAL_TIM_IC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80014f0:	f7ff fde6 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000130 	.word	0x20000130
 8001500:	40000800 	.word	0x40000800

08001504 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001536:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <MX_TIM5_Init+0xec>)
 8001538:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45;
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_TIM5_Init+0xe8>)
 800153c:	222d      	movs	r2, #45	; 0x2d
 800153e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001548:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800154c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800155a:	4824      	ldr	r0, [pc, #144]	; (80015ec <MX_TIM5_Init+0xe8>)
 800155c:	f002 f928 	bl	80037b0 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001566:	f7ff fdab 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001574:	4619      	mov	r1, r3
 8001576:	481d      	ldr	r0, [pc, #116]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001578:	f003 f85c 	bl	8004634 <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001582:	f7ff fd9d 	bl	80010c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001586:	4819      	ldr	r0, [pc, #100]	; (80015ec <MX_TIM5_Init+0xe8>)
 8001588:	f002 f9d2 	bl	8003930 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001592:	f7ff fd95 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	4619      	mov	r1, r3
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <MX_TIM5_Init+0xe8>)
 80015a6:	f003 fe7d 	bl	80052a4 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80015b0:	f7ff fd86 	bl	80010c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM5_Init+0xe8>)
 80015ce:	f002 ff6f 	bl	80044b0 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80015d8:	f7ff fd72 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM5_Init+0xe8>)
 80015de:	f000 f8a1 	bl	8001724 <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3738      	adds	r7, #56	; 0x38
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000178 	.word	0x20000178
 80015f0:	40000c00 	.word	0x40000c00

080015f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_TIM_Base_MspInit+0x11c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10e      	bne.n	8001634 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001632:	e068      	b.n	8001706 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d116      	bne.n	800166c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a33      	ldr	r2, [pc, #204]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	201c      	movs	r0, #28
 8001660:	f000 fcff 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001664:	201c      	movs	r0, #28
 8001666:	f000 fd18 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 800166a:	e04c      	b.n	8001706 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM4)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_TIM_Base_MspInit+0x124>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d134      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016be:	2302      	movs	r3, #2
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <HAL_TIM_Base_MspInit+0x128>)
 80016ca:	f001 f871 	bl	80027b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2105      	movs	r1, #5
 80016d2:	201e      	movs	r0, #30
 80016d4:	f000 fcc5 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016d8:	201e      	movs	r0, #30
 80016da:	f000 fcde 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 80016de:	e012      	b.n	8001706 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM5)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_TIM_Base_MspInit+0x12c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10d      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_TIM_Base_MspInit+0x120>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
}
 8001706:	bf00      	nop
 8001708:	3730      	adds	r7, #48	; 0x30
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40010000 	.word	0x40010000
 8001714:	40023800 	.word	0x40023800
 8001718:	40000800 	.word	0x40000800
 800171c:	40020400 	.word	0x40020400
 8001720:	40000c00 	.word	0x40000c00

08001724 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_TIM_MspPostInit+0xb0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d11f      	bne.n	8001786 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001762:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001774:	2301      	movs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4817      	ldr	r0, [pc, #92]	; (80017dc <HAL_TIM_MspPostInit+0xb8>)
 8001780:	f001 f816 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001784:	e022      	b.n	80017cc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d11d      	bne.n	80017cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6313      	str	r3, [r2, #48]	; 0x30
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ac:	2301      	movs	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017bc:	2302      	movs	r3, #2
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_TIM_MspPostInit+0xb8>)
 80017c8:	f000 fff2 	bl	80027b0 <HAL_GPIO_Init>
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40000c00 	.word	0x40000c00

080017e4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART2_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 800181c:	f003 fe49 	bl	80054b2 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f7ff fc4b 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200001c0 	.word	0x200001c0
 8001834:	40004400 	.word	0x40004400

08001838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a30      	ldr	r2, [pc, #192]	; (8001918 <HAL_UART_MspInit+0xe0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d159      	bne.n	800190e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_UART_MspInit+0xe4>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a2e      	ldr	r2, [pc, #184]	; (800191c <HAL_UART_MspInit+0xe4>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_UART_MspInit+0xe4>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_UART_MspInit+0xe4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_UART_MspInit+0xe4>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_UART_MspInit+0xe4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <HAL_UART_MspInit+0xe8>)
 80018ae:	f000 ff7f 	bl	80027b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_UART_MspInit+0xf0>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <HAL_UART_MspInit+0xec>)
 80018f4:	f000 fbec 	bl	80020d0 <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80018fe:	f7ff fbdf 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_UART_MspInit+0xec>)
 8001906:	635a      	str	r2, [r3, #52]	; 0x34
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_UART_MspInit+0xec>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	20000204 	.word	0x20000204
 8001928:	400260a0 	.word	0x400260a0

0800192c <Reset_Handler>:
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0x12>
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <LoopFillZerobss+0x16>)
 8001932:	490e      	ldr	r1, [pc, #56]	; (800196c <LoopFillZerobss+0x1a>)
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <LoopFillZerobss+0x1e>)
 8001936:	2300      	movs	r3, #0
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:
 800193a:	58d4      	ldr	r4, [r2, r3]
 800193c:	50c4      	str	r4, [r0, r3]
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:
 8001940:	18c4      	adds	r4, r0, r3
 8001942:	428c      	cmp	r4, r1
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopFillZerobss+0x22>)
 8001948:	4c0b      	ldr	r4, [pc, #44]	; (8001978 <LoopFillZerobss+0x26>)
 800194a:	2300      	movs	r3, #0
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:
 8001952:	42a2      	cmp	r2, r4
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>
 8001956:	f7ff fc5d 	bl	8001214 <SystemInit>
 800195a:	f008 facd 	bl	8009ef8 <__libc_init_array>
 800195e:	f7ff fac7 	bl	8000ef0 <main>
 8001962:	4770      	bx	lr
 8001964:	20020000 	.word	0x20020000
 8001968:	20000000 	.word	0x20000000
 800196c:	20000078 	.word	0x20000078
 8001970:	0800aac0 	.word	0x0800aac0
 8001974:	20000078 	.word	0x20000078
 8001978:	200085d0 	.word	0x200085d0

0800197c <ADC_IRQHandler>:
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <Start_BuzzerTask>:



char txbuff1[50];
void Start_BuzzerTask(void *argument)
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer */
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001988:	2100      	movs	r1, #0
 800198a:	4879      	ldr	r0, [pc, #484]	; (8001b70 <Start_BuzzerTask+0x1f0>)
 800198c:	f002 f82a 	bl	80039e4 <HAL_TIM_PWM_Start>
	  TIM5->CCR1 = 1000;
 8001990:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <Start_BuzzerTask+0x1f4>)
 8001992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001996:	635a      	str	r2, [r3, #52]	; 0x34
	  int buzzer_toggle = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
	  int buzzer_toggle_cont = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
	  int buzzer_toggle_delay = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
	  int distance = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
	  int constant = 29;
 80019a8:	231d      	movs	r3, #29
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  distance = (captured_value1); //0.034cm->0.000001s
 80019ac:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <Start_BuzzerTask+0x1f8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	613b      	str	r3, [r7, #16]

	  distance = (distance/6.15)*0.0342+constant;
 80019b2:	6938      	ldr	r0, [r7, #16]
 80019b4:	f7fe fdd6 	bl	8000564 <__aeabi_i2d>
 80019b8:	a369      	add	r3, pc, #420	; (adr r3, 8001b60 <Start_BuzzerTask+0x1e0>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe ff65 	bl	800088c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	a367      	add	r3, pc, #412	; (adr r3, 8001b68 <Start_BuzzerTask+0x1e8>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fe32 	bl	8000638 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4614      	mov	r4, r2
 80019da:	461d      	mov	r5, r3
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7fe fdc1 	bl	8000564 <__aeabi_i2d>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fc6f 	bl	80002cc <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f831 	bl	8000a5c <__aeabi_d2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]
	  printf("CCR1-2 is %i \n", captured_value1);
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <Start_BuzzerTask+0x1f8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	485d      	ldr	r0, [pc, #372]	; (8001b7c <Start_BuzzerTask+0x1fc>)
 8001a06:	f000 f927 	bl	8001c58 <PrintServerPrintf>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	485c      	ldr	r0, [pc, #368]	; (8001b80 <Start_BuzzerTask+0x200>)
 8001a0e:	f001 f87c 	bl	8002b0a <HAL_GPIO_TogglePin>
	  if((distance > 0)&&(distance <30))
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dd08      	ble.n	8001a2a <Start_BuzzerTask+0xaa>
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b1d      	cmp	r3, #29
 8001a1c:	dc05      	bgt.n	8001a2a <Start_BuzzerTask+0xaa>
		  {
			  buzzer_toggle_delay = 1000;
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	e05c      	b.n	8001ae4 <Start_BuzzerTask+0x164>
		  }
	  else if((distance >= 30)&&(distance <60))
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b1d      	cmp	r3, #29
 8001a2e:	dd07      	ble.n	8001a40 <Start_BuzzerTask+0xc0>
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b3b      	cmp	r3, #59	; 0x3b
 8001a34:	dc04      	bgt.n	8001a40 <Start_BuzzerTask+0xc0>
		  {
			  buzzer_toggle_delay = 125;
 8001a36:	237d      	movs	r3, #125	; 0x7d
 8001a38:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e051      	b.n	8001ae4 <Start_BuzzerTask+0x164>
		  }
	  else if((distance >= 60)&&(distance <90))
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b3b      	cmp	r3, #59	; 0x3b
 8001a44:	dd07      	ble.n	8001a56 <Start_BuzzerTask+0xd6>
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b59      	cmp	r3, #89	; 0x59
 8001a4a:	dc04      	bgt.n	8001a56 <Start_BuzzerTask+0xd6>
	  	  {
			  buzzer_toggle_delay = 142;
 8001a4c:	238e      	movs	r3, #142	; 0x8e
 8001a4e:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	e046      	b.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  }
	  else if((distance >= 90)&&(distance <120))
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b59      	cmp	r3, #89	; 0x59
 8001a5a:	dd07      	ble.n	8001a6c <Start_BuzzerTask+0xec>
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b77      	cmp	r3, #119	; 0x77
 8001a60:	dc04      	bgt.n	8001a6c <Start_BuzzerTask+0xec>
	  	  {
			  buzzer_toggle_delay = 167;
 8001a62:	23a7      	movs	r3, #167	; 0xa7
 8001a64:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e03b      	b.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  }
	  else if((distance >= 120)&&(distance <150))
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b77      	cmp	r3, #119	; 0x77
 8001a70:	dd07      	ble.n	8001a82 <Start_BuzzerTask+0x102>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b95      	cmp	r3, #149	; 0x95
 8001a76:	dc04      	bgt.n	8001a82 <Start_BuzzerTask+0x102>
	  	  {
			  buzzer_toggle_delay = 200;
 8001a78:	23c8      	movs	r3, #200	; 0xc8
 8001a7a:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	e030      	b.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  }
	  else if((distance >= 150)&&(distance <180))
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b95      	cmp	r3, #149	; 0x95
 8001a86:	dd07      	ble.n	8001a98 <Start_BuzzerTask+0x118>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2bb3      	cmp	r3, #179	; 0xb3
 8001a8c:	dc04      	bgt.n	8001a98 <Start_BuzzerTask+0x118>
	  	  {
			  buzzer_toggle_delay = 250;
 8001a8e:	23fa      	movs	r3, #250	; 0xfa
 8001a90:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e025      	b.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  }
	  else if((distance >= 180)&&(distance <210))
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2bb3      	cmp	r3, #179	; 0xb3
 8001a9c:	dd08      	ble.n	8001ab0 <Start_BuzzerTask+0x130>
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2bd1      	cmp	r3, #209	; 0xd1
 8001aa2:	dc05      	bgt.n	8001ab0 <Start_BuzzerTask+0x130>
	  	  {
			  buzzer_toggle_delay = 333;
 8001aa4:	f240 134d 	movw	r3, #333	; 0x14d
 8001aa8:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	e019      	b.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  }
	  else if((distance >= 210)&&(distance <270))
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2bd1      	cmp	r3, #209	; 0xd1
 8001ab4:	dd09      	ble.n	8001aca <Start_BuzzerTask+0x14a>
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001abc:	da05      	bge.n	8001aca <Start_BuzzerTask+0x14a>
	  	  {
			  buzzer_toggle_delay = 500;
 8001abe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ac2:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	e00c      	b.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  }

	  else if((distance >= 270)&&(distance <=300))
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001ad0:	db08      	blt.n	8001ae4 <Start_BuzzerTask+0x164>
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ad8:	dc04      	bgt.n	8001ae4 <Start_BuzzerTask+0x164>
	  	  {
			  buzzer_toggle_delay = 1000;
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
	  	  }
	  printf("distance is: %i cm \n \r", argument);
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4827      	ldr	r0, [pc, #156]	; (8001b84 <Start_BuzzerTask+0x204>)
 8001ae8:	f000 f8b6 	bl	8001c58 <PrintServerPrintf>
	  //sprintf(txbuff1,"distance: %d\n\r",distance);
	  //HAL_UART_Transmit(&huart2, &txbuff1, 20, 100);
	  if(buzzer_toggle == 1)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d106      	bne.n	8001b00 <Start_BuzzerTask+0x180>
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001af2:	2100      	movs	r1, #0
 8001af4:	481e      	ldr	r0, [pc, #120]	; (8001b70 <Start_BuzzerTask+0x1f0>)
 8001af6:	f001 ff75 	bl	80039e4 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e012      	b.n	8001b26 <Start_BuzzerTask+0x1a6>

	  }
	  else if((buzzer_toggle == 0)&&(buzzer_toggle_cont == 0))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <Start_BuzzerTask+0x19a>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d106      	bne.n	8001b1a <Start_BuzzerTask+0x19a>
	  {
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4818      	ldr	r0, [pc, #96]	; (8001b70 <Start_BuzzerTask+0x1f0>)
 8001b10:	f002 f830 	bl	8003b74 <HAL_TIM_PWM_Stop>
		  buzzer_toggle = 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	e005      	b.n	8001b26 <Start_BuzzerTask+0x1a6>
	  }
	  else
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4814      	ldr	r0, [pc, #80]	; (8001b70 <Start_BuzzerTask+0x1f0>)
 8001b1e:	f001 ff61 	bl	80039e4 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
	  }
	  if(distance < 1)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dc06      	bgt.n	8001b3a <Start_BuzzerTask+0x1ba>
	  {
		  buzzer_toggle_delay = 2000;
 8001b2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b30:	617b      	str	r3, [r7, #20]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001b32:	2100      	movs	r1, #0
 8001b34:	480e      	ldr	r0, [pc, #56]	; (8001b70 <Start_BuzzerTask+0x1f0>)
 8001b36:	f002 f81d 	bl	8003b74 <HAL_TIM_PWM_Stop>
	  }
	  if(distance >300)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b40:	dd06      	ble.n	8001b50 <Start_BuzzerTask+0x1d0>
	  {
		  buzzer_toggle_delay = 2000;
 8001b42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b46:	617b      	str	r3, [r7, #20]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <Start_BuzzerTask+0x1f0>)
 8001b4c:	f002 f812 	bl	8003b74 <HAL_TIM_PWM_Stop>
	  }

    osDelay(buzzer_toggle_delay);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 fa40 	bl	8005fd8 <osDelay>
	  distance = (captured_value1); //0.034cm->0.000001s
 8001b58:	e728      	b.n	80019ac <Start_BuzzerTask+0x2c>
 8001b5a:	bf00      	nop
 8001b5c:	f3af 8000 	nop.w
 8001b60:	9999999a 	.word	0x9999999a
 8001b64:	40189999 	.word	0x40189999
 8001b68:	930be0df 	.word	0x930be0df
 8001b6c:	3fa182a9 	.word	0x3fa182a9
 8001b70:	20000178 	.word	0x20000178
 8001b74:	40000c00 	.word	0x40000c00
 8001b78:	20000094 	.word	0x20000094
 8001b7c:	0800a968 	.word	0x0800a968
 8001b80:	40020000 	.word	0x40020000
 8001b84:	0800a978 	.word	0x0800a978

08001b88 <buzzer_init>:
  }

}
void buzzer_init(){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
/* creation of Buzzer_Task */
Buzzer_TaskHandle = osThreadNew(Start_BuzzerTask, &captured_value1, &Buzzer_Task_attributes);
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <buzzer_init+0x18>)
 8001b8e:	4905      	ldr	r1, [pc, #20]	; (8001ba4 <buzzer_init+0x1c>)
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <buzzer_init+0x20>)
 8001b92:	f004 f98f 	bl	8005eb4 <osThreadNew>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <buzzer_init+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800a9cc 	.word	0x0800a9cc
 8001ba4:	20000094 	.word	0x20000094
 8001ba8:	08001981 	.word	0x08001981
 8001bac:	20000264 	.word	0x20000264

08001bb0 <StartDefaultTask>:
  .priority = (osPriority_t) osPriorityNormal,
};
void StartDefaultTask(void *argument);

void StartDefaultTask(void *argument)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	HAL_TIM_Base_Start_IT(&htim2);
 8001bb8:	4819      	ldr	r0, [pc, #100]	; (8001c20 <StartDefaultTask+0x70>)
 8001bba:	f001 fe49 	bl	8003850 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  /* Infinite loop */
  for(;;)
  {
if (hardwareDelayFlag == 0){
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <StartDefaultTask+0x74>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d127      	bne.n	8001c16 <StartDefaultTask+0x66>
	  		TIM2->ARR = 22500;
 8001bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bca:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
	  		__HAL_TIM_ENABLE(&htim2);
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <StartDefaultTask+0x70>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <StartDefaultTask+0x70>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
	  		TIM1->CCR1 = 2250;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <StartDefaultTask+0x78>)
 8001be2:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
	  		HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001be8:	2100      	movs	r1, #0
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <StartDefaultTask+0x7c>)
 8001bec:	f002 f88c 	bl	8003d08 <HAL_TIM_IC_Start_IT>
	  		__HAL_TIM_ENABLE(&htim4);
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <StartDefaultTask+0x7c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <StartDefaultTask+0x7c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c00:	2100      	movs	r1, #0
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <StartDefaultTask+0x80>)
 8001c04:	f003 fa36 	bl	8005074 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <StartDefaultTask+0x80>)
 8001c0c:	f001 feea 	bl	80039e4 <HAL_TIM_PWM_Start>
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
	  		hardwareDelayFlag = 1;
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <StartDefaultTask+0x74>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
	  		//TIM4->CCR1;
}

//	  	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
    osDelay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1a:	f004 f9dd 	bl	8005fd8 <osDelay>
if (hardwareDelayFlag == 0){
 8001c1e:	e7ce      	b.n	8001bbe <StartDefaultTask+0xe>
 8001c20:	200000e8 	.word	0x200000e8
 8001c24:	20000098 	.word	0x20000098
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	20000130 	.word	0x20000130
 8001c30:	200000a0 	.word	0x200000a0

08001c34 <deftask_init>:
  }
  /* USER CODE END StartDefaultTask */
}

void deftask_init(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <deftask_init+0x18>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <deftask_init+0x1c>)
 8001c3e:	f004 f939 	bl	8005eb4 <osThreadNew>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <deftask_init+0x20>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0800a9f0 	.word	0x0800a9f0
 8001c50:	08001bb1 	.word	0x08001bb1
 8001c54:	20000268 	.word	0x20000268

08001c58 <PrintServerPrintf>:
	uint8_t buffer[PRINT_BUFFER_SIZE];
} PrintStruct;

//oppgave e
void PrintServerPrintf(const char *fmt, ...)
{
 8001c58:	b40f      	push	{r0, r1, r2, r3}
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0

	PrintStruct *PrintMem;

	PrintMem = (PrintStruct *) osMemoryPoolAlloc(PrintPool, 0U);
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <PrintServerPrintf+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fcc2 	bl	80065f0 <osMemoryPoolAlloc>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	607b      	str	r3, [r7, #4]
	if(PrintMem == NULL){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01b      	beq.n	8001cae <PrintServerPrintf+0x56>
		return;
	}

	va_list args;

	va_start(args, fmt);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	603b      	str	r3, [r7, #0]

	vsnprintf((char *)PrintMem -> buffer, PRINT_BUFFER_SIZE, fmt, args);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	2140      	movs	r1, #64	; 0x40
 8001c86:	f008 faad 	bl	800a1e4 <vsniprintf>

	va_end(args);

	if(osMessageQueuePut(PrintMsgQ, &PrintMem, 0U, 0U) != osOK){
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <PrintServerPrintf+0x68>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	1d39      	adds	r1, r7, #4
 8001c90:	2300      	movs	r3, #0
 8001c92:	2200      	movs	r2, #0
 8001c94:	f004 fb18 	bl	80062c8 <osMessageQueuePut>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <PrintServerPrintf+0x58>
		osMemoryPoolFree(PrintPool, PrintMem);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <PrintServerPrintf+0x64>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fd18 	bl	80066dc <osMemoryPoolFree>
 8001cac:	e000      	b.n	8001cb0 <PrintServerPrintf+0x58>
		return;
 8001cae:	bf00      	nop
	}
}
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb8:	b004      	add	sp, #16
 8001cba:	4770      	bx	lr
 8001cbc:	20000274 	.word	0x20000274
 8001cc0:	2000026c 	.word	0x2000026c

08001cc4 <HAL_UART_TxCpltCallback>:

void callbacks (UART_HandleTypeDef *huart){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	if(huart == uart_handle_p){
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_UART_TxCpltCallback+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d105      	bne.n	8001ce2 <HAL_UART_TxCpltCallback+0x1e>
		osEventFlagsSet(Printflag, 0x1U);
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_UART_TxCpltCallback+0x2c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 f9d5 	bl	800608c <osEventFlagsSet>
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	20000278 	.word	0x20000278

08001cf4 <PrintServer>:


//oppgave f

void PrintServer(void *arg){
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	PrintStruct *PrintMem;
	osStatus_t status;
	while(1){
		status = osMessageQueueGet(PrintMsgQ, (PrintStruct*)&PrintMem, NULL, osWaitForever);
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <PrintServer+0x68>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f107 0108 	add.w	r1, r7, #8
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f004 fb3d 	bl	8006388 <osMessageQueueGet>
 8001d0e:	60f8      	str	r0, [r7, #12]
		if(status  == osOK){
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d119      	bne.n	8001d4a <PrintServer+0x56>
			if(HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t*)PrintMem->buffer, strlen((char*)PrintMem->buffer)) == HAL_OK)
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <PrintServer+0x6c>)
 8001d18:	681c      	ldr	r4, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa75 	bl	8000210 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f003 fc0c 	bl	800554c <HAL_UART_Transmit_DMA>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <PrintServer+0x56>
			{
				osEventFlagsWait(Printflag, 0x1U, osFlagsWaitAny, osWaitForever);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <PrintServer+0x70>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	2200      	movs	r2, #0
 8001d44:	2101      	movs	r1, #1
 8001d46:	f004 f9e5 	bl	8006114 <osEventFlagsWait>

			}
		}

		osMemoryPoolFree(PrintPool, PrintMem);
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <PrintServer+0x74>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 fcc2 	bl	80066dc <osMemoryPoolFree>
		status = osMessageQueueGet(PrintMsgQ, (PrintStruct*)&PrintMem, NULL, osWaitForever);
 8001d58:	e7d0      	b.n	8001cfc <PrintServer+0x8>
 8001d5a:	bf00      	nop
 8001d5c:	2000026c 	.word	0x2000026c
 8001d60:	20000004 	.word	0x20000004
 8001d64:	20000278 	.word	0x20000278
 8001d68:	20000274 	.word	0x20000274

08001d6c <PrintServerPrintfInit>:
}


// oppgave c og d

_Bool PrintServerPrintfInit(void){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	PrintMsgQ = osMessageQueueNew(print_Pool, 4, NULL);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2104      	movs	r1, #4
 8001d74:	2020      	movs	r0, #32
 8001d76:	f004 fa33 	bl	80061e0 <osMessageQueueNew>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <PrintServerPrintfInit+0x48>)
 8001d7e:	6013      	str	r3, [r2, #0]
	PrintThread = osThreadNew(PrintServer, NULL, NULL);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <PrintServerPrintfInit+0x4c>)
 8001d86:	f004 f895 	bl	8005eb4 <osThreadNew>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <PrintServerPrintfInit+0x50>)
 8001d8e:	6013      	str	r3, [r2, #0]
	PrintPool = osMemoryPoolNew(print_Pool, sizeof(PrintStruct), NULL);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	2020      	movs	r0, #32
 8001d96:	f004 fb55 	bl	8006444 <osMemoryPoolNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <PrintServerPrintfInit+0x54>)
 8001d9e:	6013      	str	r3, [r2, #0]
	Printflag = osEventFlagsNew(NULL);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f004 f934 	bl	800600e <osEventFlagsNew>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <PrintServerPrintfInit+0x58>)
 8001daa:	6013      	str	r3, [r2, #0]

	return true;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000026c 	.word	0x2000026c
 8001db8:	08001cf5 	.word	0x08001cf5
 8001dbc:	20000270 	.word	0x20000270
 8001dc0:	20000274 	.word	0x20000274
 8001dc4:	20000278 	.word	0x20000278

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_Init+0x40>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_Init+0x40>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_Init+0x40>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f92b 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 f808 	bl	8001e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff f966 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x54>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x58>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f943 	bl	80020b6 <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f90b 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <HAL_InitTick+0x5c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000000 	.word	0x20000000
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000008 	.word	0x20000008

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	2000027c 	.word	0x2000027c

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000027c 	.word	0x2000027c

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff feda 	bl	8001e94 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e099      	b.n	8002220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210c:	e00f      	b.n	800212e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800210e:	f7ff fec1 	bl	8001e94 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b05      	cmp	r3, #5
 800211a:	d908      	bls.n	800212e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e078      	b.n	8002220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e8      	bne.n	800210e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4b38      	ldr	r3, [pc, #224]	; (8002228 <HAL_DMA_Init+0x158>)
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4313      	orrs	r3, r2
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f023 0307 	bic.w	r3, r3, #7
 80021ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d117      	bne.n	80021f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa6f 	bl	80026b8 <DMA_CheckFifoParam>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ee:	2301      	movs	r3, #1
 80021f0:	e016      	b.n	8002220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa26 	bl	800264c <DMA_CalcBaseAndBitshift>
 8002200:	4603      	mov	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	223f      	movs	r2, #63	; 0x3f
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	f010803f 	.word	0xf010803f

0800222c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Start_IT+0x26>
 800224e:	2302      	movs	r3, #2
 8002250:	e040      	b.n	80022d4 <HAL_DMA_Start_IT+0xa8>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d12f      	bne.n	80022c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2202      	movs	r2, #2
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f9b8 	bl	80025f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	223f      	movs	r2, #63	; 0x3f
 8002286:	409a      	lsls	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0216 	orr.w	r2, r2, #22
 800229a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0208 	orr.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e005      	b.n	80022d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
 80022d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e8:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <HAL_DMA_IRQHandler+0x248>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a8e      	ldr	r2, [pc, #568]	; (8002528 <HAL_DMA_IRQHandler+0x24c>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0a9b      	lsrs	r3, r3, #10
 80022f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	2208      	movs	r2, #8
 8002308:	409a      	lsls	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01a      	beq.n	8002348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2208      	movs	r2, #8
 8002336:	409a      	lsls	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	2201      	movs	r2, #1
 800234e:	409a      	lsls	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2201      	movs	r2, #1
 800236c:	409a      	lsls	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	2204      	movs	r2, #4
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	2204      	movs	r2, #4
 80023a2:	409a      	lsls	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0204 	orr.w	r2, r3, #4
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	2210      	movs	r2, #16
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d043      	beq.n	800244c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03c      	beq.n	800244c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	2210      	movs	r2, #16
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d018      	beq.n	800241e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d108      	bne.n	800240c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d024      	beq.n	800244c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
 800240a:	e01f      	b.n	800244c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
 800241c:	e016      	b.n	800244c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0208 	bic.w	r2, r2, #8
 800243a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2220      	movs	r2, #32
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 808f 	beq.w	800257c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8087 	beq.w	800257c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	2220      	movs	r2, #32
 8002474:	409a      	lsls	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b05      	cmp	r3, #5
 8002484:	d136      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0216 	bic.w	r2, r2, #22
 8002494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_DMA_IRQHandler+0x1da>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0208 	bic.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	223f      	movs	r2, #63	; 0x3f
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d07e      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
        }
        return;
 80024f2:	e079      	b.n	80025e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01d      	beq.n	800253e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10d      	bne.n	800252c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	2b00      	cmp	r3, #0
 8002516:	d031      	beq.n	800257c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
 8002520:	e02c      	b.n	800257c <HAL_DMA_IRQHandler+0x2a0>
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000
 8002528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d023      	beq.n	800257c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
 800253c:	e01e      	b.n	800257c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10f      	bne.n	800256c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0210 	bic.w	r2, r2, #16
 800255a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	2b00      	cmp	r3, #0
 8002582:	d032      	beq.n	80025ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d022      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2205      	movs	r2, #5
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d307      	bcc.n	80025c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x2cc>
 80025c2:	e000      	b.n	80025c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e000      	b.n	80025ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80025e8:	bf00      	nop
    }
  }
}
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800260c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d108      	bne.n	8002630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800262e:	e007      	b.n	8002640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3b10      	subs	r3, #16
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <DMA_CalcBaseAndBitshift+0x64>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d909      	bls.n	800268e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	; 0x58
 800268c:	e007      	b.n	800269e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	aaaaaaab 	.word	0xaaaaaaab
 80026b4:	0800aa14 	.word	0x0800aa14

080026b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11f      	bne.n	8002712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d856      	bhi.n	8002786 <DMA_CheckFifoParam+0xce>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <DMA_CheckFifoParam+0x28>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	08002703 	.word	0x08002703
 80026e8:	080026f1 	.word	0x080026f1
 80026ec:	08002787 	.word	0x08002787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d046      	beq.n	800278a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e043      	b.n	800278a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800270a:	d140      	bne.n	800278e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002710:	e03d      	b.n	800278e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271a:	d121      	bne.n	8002760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d837      	bhi.n	8002792 <DMA_CheckFifoParam+0xda>
 8002722:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <DMA_CheckFifoParam+0x70>)
 8002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002728:	08002739 	.word	0x08002739
 800272c:	0800273f 	.word	0x0800273f
 8002730:	08002739 	.word	0x08002739
 8002734:	08002751 	.word	0x08002751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e030      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d025      	beq.n	8002796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274e:	e022      	b.n	8002796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002758:	d11f      	bne.n	800279a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800275e:	e01c      	b.n	800279a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d903      	bls.n	800276e <DMA_CheckFifoParam+0xb6>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d003      	beq.n	8002774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800276c:	e018      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
      break;
 8002772:	e015      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00e      	beq.n	800279e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      break;
 8002784:	e00b      	b.n	800279e <DMA_CheckFifoParam+0xe6>
      break;
 8002786:	bf00      	nop
 8002788:	e00a      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e008      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e006      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e004      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
    }
  } 
  
  return status; 
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e165      	b.n	8002a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f040 8154 	bne.w	8002a92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d005      	beq.n	8002802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d130      	bne.n	8002864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 0201 	and.w	r2, r3, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b03      	cmp	r3, #3
 800286e:	d017      	beq.n	80028a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d123      	bne.n	80028f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	69b9      	ldr	r1, [r7, #24]
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80ae 	beq.w	8002a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <HAL_GPIO_Init+0x300>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_GPIO_Init+0x300>)
 8002940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_GPIO_Init+0x300>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_GPIO_Init+0x308>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d025      	beq.n	80029ca <HAL_GPIO_Init+0x21a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4e      	ldr	r2, [pc, #312]	; (8002abc <HAL_GPIO_Init+0x30c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <HAL_GPIO_Init+0x216>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4d      	ldr	r2, [pc, #308]	; (8002ac0 <HAL_GPIO_Init+0x310>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_GPIO_Init+0x212>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <HAL_GPIO_Init+0x314>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4b      	ldr	r2, [pc, #300]	; (8002ac8 <HAL_GPIO_Init+0x318>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x20a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <HAL_GPIO_Init+0x31c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x206>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a49      	ldr	r2, [pc, #292]	; (8002ad0 <HAL_GPIO_Init+0x320>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x202>
 80029ae:	2306      	movs	r3, #6
 80029b0:	e00c      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00a      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x21c>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a62:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f ae96 	bls.w	80027cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40021400 	.word	0x40021400
 8002ad0:	40021800 	.word	0x40021800
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b1c:	887a      	ldrh	r2, [r7, #2]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	041a      	lsls	r2, r3, #16
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6c:	f7ff f992 	bl	8001e94 <HAL_GetTick>
 8002b70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b72:	e009      	b.n	8002b88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b74:	f7ff f98e 	bl	8001e94 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b82:	d901      	bls.n	8002b88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e01f      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d1ee      	bne.n	8002b74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff f97a 	bl	8001e94 <HAL_GetTick>
 8002ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba2:	e009      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba4:	f7ff f976 	bl	8001e94 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e007      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	420e0040 	.word	0x420e0040
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	420e0044 	.word	0x420e0044

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0cc      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b68      	ldr	r3, [pc, #416]	; (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d90c      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	494d      	ldr	r1, [pc, #308]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d044      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d119      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e067      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4934      	ldr	r1, [pc, #208]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7ff f8e0 	bl	8001e94 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7ff f8dc 	bl	8001e94 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e04f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20c      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e032      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4916      	ldr	r1, [pc, #88]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	490e      	ldr	r1, [pc, #56]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f855 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490a      	ldr	r1, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f840 	bl	8001e0c <HAL_InitTick>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	0800a9b4 	.word	0x0800a9b4
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000008 	.word	0x20000008

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	0800a9c4 	.word	0x0800a9c4

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002df0:	f7ff ffdc 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0b5b      	lsrs	r3, r3, #13
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	0800a9c4 	.word	0x0800a9c4

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b0ae      	sub	sp, #184	; 0xb8
 8002e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3a:	4bcb      	ldr	r3, [pc, #812]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	f200 8206 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x440>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08003255 	.word	0x08003255
 8002e58:	08003255 	.word	0x08003255
 8002e5c:	08003255 	.word	0x08003255
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08003255 	.word	0x08003255
 8002e68:	08003255 	.word	0x08003255
 8002e6c:	08003255 	.word	0x08003255
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08003255 	.word	0x08003255
 8002e78:	08003255 	.word	0x08003255
 8002e7c:	08003255 	.word	0x08003255
 8002e80:	08003085 	.word	0x08003085
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4bb9      	ldr	r3, [pc, #740]	; (800316c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e8a:	e1e7      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8c:	4bb8      	ldr	r3, [pc, #736]	; (8003170 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e92:	e1e3      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4bb4      	ldr	r3, [pc, #720]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea0:	4bb1      	ldr	r3, [pc, #708]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d071      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eac:	4bae      	ldr	r3, [pc, #696]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	6439      	str	r1, [r7, #64]	; 0x40
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f04:	4649      	mov	r1, r9
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4641      	mov	r1, r8
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4641      	mov	r1, r8
 8002f14:	1a51      	subs	r1, r2, r1
 8002f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f18:	4649      	mov	r1, r9
 8002f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4641      	mov	r1, r8
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4641      	mov	r1, r8
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4622      	mov	r2, r4
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
 8002f46:	462b      	mov	r3, r5
 8002f48:	460a      	mov	r2, r1
 8002f4a:	eb42 0303 	adc.w	r3, r2, r3
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	024b      	lsls	r3, r1, #9
 8002f60:	4621      	mov	r1, r4
 8002f62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f66:	4621      	mov	r1, r4
 8002f68:	024a      	lsls	r2, r1, #9
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f80:	f7fd fd94 	bl	8000aac <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f8e:	e067      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f90:	4b75      	ldr	r3, [pc, #468]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002faa:	2300      	movs	r3, #0
 8002fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	0159      	lsls	r1, r3, #5
 8002fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc4:	0150      	lsls	r0, r2, #5
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4621      	mov	r1, r4
 8002fcc:	1a51      	subs	r1, r2, r1
 8002fce:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	018b      	lsls	r3, r1, #6
 8002fe8:	4641      	mov	r1, r8
 8002fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fee:	4641      	mov	r1, r8
 8002ff0:	018a      	lsls	r2, r1, #6
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800300a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800300e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003012:	4692      	mov	sl, r2
 8003014:	469b      	mov	fp, r3
 8003016:	4623      	mov	r3, r4
 8003018:	eb1a 0303 	adds.w	r3, sl, r3
 800301c:	623b      	str	r3, [r7, #32]
 800301e:	462b      	mov	r3, r5
 8003020:	eb4b 0303 	adc.w	r3, fp, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003048:	2200      	movs	r2, #0
 800304a:	673b      	str	r3, [r7, #112]	; 0x70
 800304c:	677a      	str	r2, [r7, #116]	; 0x74
 800304e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003052:	f7fd fd2b 	bl	8000aac <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003060:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003082:	e0eb      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003084:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800308c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d06b      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCC_GetSysClockFreq+0x354>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	2200      	movs	r2, #0
 80030a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ae:	663b      	str	r3, [r7, #96]	; 0x60
 80030b0:	2300      	movs	r3, #0
 80030b2:	667b      	str	r3, [r7, #100]	; 0x64
 80030b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030b8:	4622      	mov	r2, r4
 80030ba:	462b      	mov	r3, r5
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0159      	lsls	r1, r3, #5
 80030c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ca:	0150      	lsls	r0, r2, #5
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4621      	mov	r1, r4
 80030d2:	1a51      	subs	r1, r2, r1
 80030d4:	61b9      	str	r1, [r7, #24]
 80030d6:	4629      	mov	r1, r5
 80030d8:	eb63 0301 	sbc.w	r3, r3, r1
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030ea:	4659      	mov	r1, fp
 80030ec:	018b      	lsls	r3, r1, #6
 80030ee:	4651      	mov	r1, sl
 80030f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f4:	4651      	mov	r1, sl
 80030f6:	018a      	lsls	r2, r1, #6
 80030f8:	4651      	mov	r1, sl
 80030fa:	ebb2 0801 	subs.w	r8, r2, r1
 80030fe:	4659      	mov	r1, fp
 8003100:	eb63 0901 	sbc.w	r9, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003118:	4690      	mov	r8, r2
 800311a:	4699      	mov	r9, r3
 800311c:	4623      	mov	r3, r4
 800311e:	eb18 0303 	adds.w	r3, r8, r3
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	462b      	mov	r3, r5
 8003126:	eb49 0303 	adc.w	r3, r9, r3
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003138:	4629      	mov	r1, r5
 800313a:	024b      	lsls	r3, r1, #9
 800313c:	4621      	mov	r1, r4
 800313e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003142:	4621      	mov	r1, r4
 8003144:	024a      	lsls	r2, r1, #9
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800314e:	2200      	movs	r2, #0
 8003150:	65bb      	str	r3, [r7, #88]	; 0x58
 8003152:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003154:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003158:	f7fd fca8 	bl	8000aac <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003166:	e065      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x420>
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_GetSysClockFreq+0x458>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	2200      	movs	r2, #0
 800317c:	4618      	mov	r0, r3
 800317e:	4611      	mov	r1, r2
 8003180:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
 8003186:	2300      	movs	r3, #0
 8003188:	657b      	str	r3, [r7, #84]	; 0x54
 800318a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800318e:	4642      	mov	r2, r8
 8003190:	464b      	mov	r3, r9
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a0:	0150      	lsls	r0, r2, #5
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4641      	mov	r1, r8
 80031a8:	1a51      	subs	r1, r2, r1
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	4649      	mov	r1, r9
 80031ae:	eb63 0301 	sbc.w	r3, r3, r1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031c0:	4659      	mov	r1, fp
 80031c2:	018b      	lsls	r3, r1, #6
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ca:	4651      	mov	r1, sl
 80031cc:	018a      	lsls	r2, r1, #6
 80031ce:	4651      	mov	r1, sl
 80031d0:	1a54      	subs	r4, r2, r1
 80031d2:	4659      	mov	r1, fp
 80031d4:	eb63 0501 	sbc.w	r5, r3, r1
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	00eb      	lsls	r3, r5, #3
 80031e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e6:	00e2      	lsls	r2, r4, #3
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	18e3      	adds	r3, r4, r3
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003206:	4629      	mov	r1, r5
 8003208:	028b      	lsls	r3, r1, #10
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003210:	4621      	mov	r1, r4
 8003212:	028a      	lsls	r2, r1, #10
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800321c:	2200      	movs	r2, #0
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003220:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003222:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003226:	f7fd fc41 	bl	8000aac <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4613      	mov	r3, r2
 8003230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RCC_GetSysClockFreq+0x458>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0f1b      	lsrs	r3, r3, #28
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003252:	e003      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800325a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003260:	4618      	mov	r0, r3
 8003262:	37b8      	adds	r7, #184	; 0xb8
 8003264:	46bd      	mov	sp, r7
 8003266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	00f42400 	.word	0x00f42400

08003274 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e28d      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8083 	beq.w	800339a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003294:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b04      	cmp	r3, #4
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032a0:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032ac:	4b8e      	ldr	r3, [pc, #568]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d00c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d112      	bne.n	80032ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <HAL_RCC_OscConfig+0x124>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d157      	bne.n	8003398 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e25a      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x90>
 80032f6:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7b      	ldr	r2, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xcc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0xb4>
 800330e:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a75      	ldr	r2, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b73      	ldr	r3, [pc, #460]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xcc>
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a6b      	ldr	r2, [pc, #428]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fda4 	bl	8001e94 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fda0 	bl	8001e94 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e21f      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xdc>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fd90 	bl	8001e94 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fd8c 	bl	8001e94 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e20b      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x104>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06f      	beq.n	8003486 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033a6:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033b2:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033be:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x186>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1d3      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4937      	ldr	r1, [pc, #220]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_OscConfig+0x278>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe fd39 	bl	8001e94 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003426:	f7fe fd35 	bl	8001e94 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1b4      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4925      	ldr	r1, [pc, #148]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x278>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fd18 	bl	8001e94 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fd14 	bl	8001e94 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e193      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d036      	beq.n	8003500 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x27c>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe fcf8 	bl	8001e94 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe fcf4 	bl	8001e94 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e173      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x274>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x234>
 80034c6:	e01b      	b.n	8003500 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fce1 	bl	8001e94 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	e00e      	b.n	80034f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d6:	f7fe fcdd 	bl	8001e94 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d907      	bls.n	80034f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e15c      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470000 	.word	0x42470000
 80034f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b8a      	ldr	r3, [pc, #552]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ea      	bne.n	80034d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8097 	beq.w	800363c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b83      	ldr	r3, [pc, #524]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a7e      	ldr	r2, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b79      	ldr	r3, [pc, #484]	; (8003724 <HAL_RCC_OscConfig+0x4b0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x4b0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x4b0>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fe fc9d 	bl	8001e94 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fe fc99 	bl	8001e94 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e118      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x4b0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x31e>
 8003584:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a65      	ldr	r2, [pc, #404]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x358>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x340>
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x358>
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a59      	ldr	r2, [pc, #356]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
 80035c0:	4b57      	ldr	r3, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a56      	ldr	r2, [pc, #344]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fe fc5e 	bl	8001e94 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fc5a 	bl	8001e94 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0d7      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCC_OscConfig+0x368>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe fc48 	bl	8001e94 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe fc44 	bl	8001e94 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0c1      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ee      	bne.n	8003608 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80ad 	beq.w	80037a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b08      	cmp	r3, #8
 8003650:	d060      	beq.n	8003714 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d145      	bne.n	80036e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x4b4>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fc18 	bl	8001e94 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe fc14 	bl	8001e94 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e093      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	071b      	lsls	r3, r3, #28
 80036b2:	491b      	ldr	r1, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x4b4>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe fbe9 	bl	8001e94 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe fbe5 	bl	8001e94 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e064      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x452>
 80036e4:	e05c      	b.n	80037a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x4b4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fbd2 	bl	8001e94 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe fbce 	bl	8001e94 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e04d      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x480>
 8003712:	e045      	b.n	80037a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e040      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000
 8003728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <HAL_RCC_OscConfig+0x538>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d030      	beq.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d129      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d122      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	4293      	cmp	r3, r2
 8003766:	d119      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d10f      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd ff0c 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f001 f806 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04e      	b.n	8003906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_TIM_Base_Start_IT+0xc4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d01d      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_TIM_Base_Start_IT+0xc8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_TIM_Base_Start_IT+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_TIM_Base_Start_IT+0xd4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_TIM_Base_Start_IT+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_Base_Start_IT+0xdc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d111      	bne.n	80038f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d010      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	e007      	b.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800

08003930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e041      	b.n	80039c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f839 	bl	80039ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 ff46 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_TIM_PWM_Start+0x24>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	bf14      	ite	ne
 8003a00:	2301      	movne	r3, #1
 8003a02:	2300      	moveq	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e022      	b.n	8003a4e <HAL_TIM_PWM_Start+0x6a>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d109      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x3e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e015      	b.n	8003a4e <HAL_TIM_PWM_Start+0x6a>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d109      	bne.n	8003a3c <HAL_TIM_PWM_Start+0x58>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e008      	b.n	8003a4e <HAL_TIM_PWM_Start+0x6a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07c      	b.n	8003b50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_PWM_Start+0x82>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	e013      	b.n	8003a8e <HAL_TIM_PWM_Start+0xaa>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x92>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	e00b      	b.n	8003a8e <HAL_TIM_PWM_Start+0xaa>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start+0xa2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a84:	e003      	b.n	8003a8e <HAL_TIM_PWM_Start+0xaa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fac6 	bl	8005028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <HAL_TIM_PWM_Start+0x174>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_PWM_Start+0xcc>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <HAL_TIM_PWM_Start+0x178>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_PWM_Start+0xd0>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xd2>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <HAL_TIM_PWM_Start+0x174>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d01d      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_TIM_PWM_Start+0x17c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_TIM_PWM_Start+0x180>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_TIM_PWM_Start+0x184>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_TIM_PWM_Start+0x178>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <HAL_TIM_PWM_Start+0x188>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x136>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <HAL_TIM_PWM_Start+0x18c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d111      	bne.n	8003b3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b06      	cmp	r3, #6
 8003b2a:	d010      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	e007      	b.n	8003b4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40010400 	.word	0x40010400
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40001800 	.word	0x40001800

08003b74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa4e 	bl	8005028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <HAL_TIM_PWM_Stop+0xd8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIM_PWM_Stop+0x2c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <HAL_TIM_PWM_Stop+0xdc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIM_PWM_Stop+0x30>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_TIM_PWM_Stop+0x32>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1a      	ldr	r2, [r3, #32]
 8003bb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_TIM_PWM_Stop+0x66>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	f240 4344 	movw	r3, #1092	; 0x444
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_PWM_Stop+0x66>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_TIM_PWM_Stop+0x96>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	f240 4344 	movw	r3, #1092	; 0x444
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_PWM_Stop+0x96>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Stop+0xa6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Stop+0xce>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Stop+0xb6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Stop+0xce>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Stop+0xc6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Stop+0xce>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e041      	b.n	8003cea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f839 	bl	8003cf2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 fdb4 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_IC_Start_IT+0x1e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e013      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x46>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_IC_Start_IT+0x2e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e00b      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x46>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_IC_Start_IT+0x3e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e003      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x46>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_TIM_IC_Start_IT+0x58>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e013      	b.n	8003d88 <HAL_TIM_IC_Start_IT+0x80>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d104      	bne.n	8003d70 <HAL_TIM_IC_Start_IT+0x68>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e00b      	b.n	8003d88 <HAL_TIM_IC_Start_IT+0x80>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d104      	bne.n	8003d80 <HAL_TIM_IC_Start_IT+0x78>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e003      	b.n	8003d88 <HAL_TIM_IC_Start_IT+0x80>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d8a:	7bbb      	ldrb	r3, [r7, #14]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d90:	7b7b      	ldrb	r3, [r7, #13]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0cc      	b.n	8003f34 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_IC_Start_IT+0xa2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	e013      	b.n	8003dd2 <HAL_TIM_IC_Start_IT+0xca>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_IC_Start_IT+0xb2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db8:	e00b      	b.n	8003dd2 <HAL_TIM_IC_Start_IT+0xca>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Start_IT+0xc2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc8:	e003      	b.n	8003dd2 <HAL_TIM_IC_Start_IT+0xca>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_IC_Start_IT+0xda>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de0:	e013      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x102>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_IC_Start_IT+0xea>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x102>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0xfa>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e00:	e003      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x102>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d841      	bhi.n	8003e94 <HAL_TIM_IC_Start_IT+0x18c>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_TIM_IC_Start_IT+0x110>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e95 	.word	0x08003e95
 8003e20:	08003e95 	.word	0x08003e95
 8003e24:	08003e95 	.word	0x08003e95
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e95 	.word	0x08003e95
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	08003e95 	.word	0x08003e95
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e95 	.word	0x08003e95
 8003e40:	08003e95 	.word	0x08003e95
 8003e44:	08003e95 	.word	0x08003e95
 8003e48:	08003e83 	.word	0x08003e83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	60da      	str	r2, [r3, #12]
      break;
 8003e5c:	e01d      	b.n	8003e9a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0204 	orr.w	r2, r2, #4
 8003e6c:	60da      	str	r2, [r3, #12]
      break;
 8003e6e:	e014      	b.n	8003e9a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	60da      	str	r2, [r3, #12]
      break;
 8003e80:	e00b      	b.n	8003e9a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0210 	orr.w	r2, r2, #16
 8003e90:	60da      	str	r2, [r3, #12]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d148      	bne.n	8003f32 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f8bd 	bl	8005028 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_TIM_IC_Start_IT+0x234>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d01d      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_TIM_IC_Start_IT+0x238>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d018      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <HAL_TIM_IC_Start_IT+0x23c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_TIM_IC_Start_IT+0x240>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00e      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_TIM_IC_Start_IT+0x244>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIM_IC_Start_IT+0x248>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIM_IC_Start_IT+0x24c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d111      	bne.n	8003f22 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	d010      	beq.n	8003f32 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	e007      	b.n	8003f32 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40001800 	.word	0x40001800

08003f58 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d841      	bhi.n	8003ff0 <HAL_TIM_IC_Stop_IT+0x98>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <HAL_TIM_IC_Stop_IT+0x1c>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003ff1 	.word	0x08003ff1
 8003f7c:	08003ff1 	.word	0x08003ff1
 8003f80:	08003ff1 	.word	0x08003ff1
 8003f84:	08003fbb 	.word	0x08003fbb
 8003f88:	08003ff1 	.word	0x08003ff1
 8003f8c:	08003ff1 	.word	0x08003ff1
 8003f90:	08003ff1 	.word	0x08003ff1
 8003f94:	08003fcd 	.word	0x08003fcd
 8003f98:	08003ff1 	.word	0x08003ff1
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003fdf 	.word	0x08003fdf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0202 	bic.w	r2, r2, #2
 8003fb6:	60da      	str	r2, [r3, #12]
      break;
 8003fb8:	e01d      	b.n	8003ff6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0204 	bic.w	r2, r2, #4
 8003fc8:	60da      	str	r2, [r3, #12]
      break;
 8003fca:	e014      	b.n	8003ff6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0208 	bic.w	r2, r2, #8
 8003fda:	60da      	str	r2, [r3, #12]
      break;
 8003fdc:	e00b      	b.n	8003ff6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0210 	bic.w	r2, r2, #16
 8003fec:	60da      	str	r2, [r3, #12]
      break;
 8003fee:	e002      	b.n	8003ff6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d156      	bne.n	80040aa <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f001 f80f 	bl	8005028 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	f241 1311 	movw	r3, #4369	; 0x1111
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_TIM_IC_Stop_IT+0xe2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	f240 4344 	movw	r3, #1092	; 0x444
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <HAL_TIM_IC_Stop_IT+0xe2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_TIM_IC_Stop_IT+0xf2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	e013      	b.n	8004072 <HAL_TIM_IC_Stop_IT+0x11a>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d104      	bne.n	800405a <HAL_TIM_IC_Stop_IT+0x102>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004058:	e00b      	b.n	8004072 <HAL_TIM_IC_Stop_IT+0x11a>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d104      	bne.n	800406a <HAL_TIM_IC_Stop_IT+0x112>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004068:	e003      	b.n	8004072 <HAL_TIM_IC_Stop_IT+0x11a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_TIM_IC_Stop_IT+0x12a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	e013      	b.n	80040aa <HAL_TIM_IC_Stop_IT+0x152>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d104      	bne.n	8004092 <HAL_TIM_IC_Stop_IT+0x13a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004090:	e00b      	b.n	80040aa <HAL_TIM_IC_Stop_IT+0x152>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_IC_Stop_IT+0x14a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	e003      	b.n	80040aa <HAL_TIM_IC_Stop_IT+0x152>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e041      	b.n	800414c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f839 	bl	8004154 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fb83 	bl	8004800 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d122      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b02      	cmp	r3, #2
 800418a:	d11b      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0202 	mvn.w	r2, #2
 8004194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc ff2e 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fb05 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fb0c 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d122      	bne.n	8004218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d11b      	bne.n	8004218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0204 	mvn.w	r2, #4
 80041e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc ff04 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fadb 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fae2 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b08      	cmp	r3, #8
 8004224:	d122      	bne.n	800426c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b08      	cmp	r3, #8
 8004232:	d11b      	bne.n	800426c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0208 	mvn.w	r2, #8
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2204      	movs	r2, #4
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc feda 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fab1 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fab8 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b10      	cmp	r3, #16
 8004278:	d122      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b10      	cmp	r3, #16
 8004286:	d11b      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0210 	mvn.w	r2, #16
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2208      	movs	r2, #8
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc feb0 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa87 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fa8e 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0201 	mvn.w	r2, #1
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc feb4 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 f89e 	bl	8005454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa53 	bl	80047ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	d10e      	bne.n	8004370 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b20      	cmp	r3, #32
 800435e:	d107      	bne.n	8004370 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0220 	mvn.w	r2, #32
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f868 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004392:	2302      	movs	r3, #2
 8004394:	e088      	b.n	80044a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f000 fc74 	bl	8004ca0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 020c 	bic.w	r2, r2, #12
 80043c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	619a      	str	r2, [r3, #24]
 80043da:	e060      	b.n	800449e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d11c      	bne.n	800441c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f000 fcf8 	bl	8004de6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004404:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6999      	ldr	r1, [r3, #24]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	021a      	lsls	r2, r3, #8
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	619a      	str	r2, [r3, #24]
 800441a:	e040      	b.n	800449e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d11b      	bne.n	800445a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f000 fd45 	bl	8004ec0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 020c 	bic.w	r2, r2, #12
 8004444:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]
 8004458:	e021      	b.n	800449e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d11c      	bne.n	800449a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f000 fd62 	bl	8004f38 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004482:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69d9      	ldr	r1, [r3, #28]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
 8004498:	e001      	b.n	800449e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e0ae      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	f200 809f 	bhi.w	800461c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004519 	.word	0x08004519
 80044e8:	0800461d 	.word	0x0800461d
 80044ec:	0800461d 	.word	0x0800461d
 80044f0:	0800461d 	.word	0x0800461d
 80044f4:	08004559 	.word	0x08004559
 80044f8:	0800461d 	.word	0x0800461d
 80044fc:	0800461d 	.word	0x0800461d
 8004500:	0800461d 	.word	0x0800461d
 8004504:	0800459b 	.word	0x0800459b
 8004508:	0800461d 	.word	0x0800461d
 800450c:	0800461d 	.word	0x0800461d
 8004510:	0800461d 	.word	0x0800461d
 8004514:	080045db 	.word	0x080045db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa0e 	bl	8004940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	619a      	str	r2, [r3, #24]
      break;
 8004556:	e064      	b.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa5e 	bl	8004a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6999      	ldr	r1, [r3, #24]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	619a      	str	r2, [r3, #24]
      break;
 8004598:	e043      	b.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fab3 	bl	8004b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0208 	orr.w	r2, r2, #8
 80045b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0204 	bic.w	r2, r2, #4
 80045c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	61da      	str	r2, [r3, #28]
      break;
 80045d8:	e023      	b.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb07 	bl	8004bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69d9      	ldr	r1, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	61da      	str	r2, [r3, #28]
      break;
 800461a:	e002      	b.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
      break;
 8004620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800462a:	7dfb      	ldrb	r3, [r7, #23]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIM_ConfigClockSource+0x1c>
 800464c:	2302      	movs	r3, #2
 800464e:	e0b4      	b.n	80047ba <HAL_TIM_ConfigClockSource+0x186>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800466e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d03e      	beq.n	8004708 <HAL_TIM_ConfigClockSource+0xd4>
 800468a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468e:	f200 8087 	bhi.w	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	f000 8086 	beq.w	80047a6 <HAL_TIM_ConfigClockSource+0x172>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	d87f      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b70      	cmp	r3, #112	; 0x70
 80046a2:	d01a      	beq.n	80046da <HAL_TIM_ConfigClockSource+0xa6>
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d87b      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b60      	cmp	r3, #96	; 0x60
 80046aa:	d050      	beq.n	800474e <HAL_TIM_ConfigClockSource+0x11a>
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d877      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b50      	cmp	r3, #80	; 0x50
 80046b2:	d03c      	beq.n	800472e <HAL_TIM_ConfigClockSource+0xfa>
 80046b4:	2b50      	cmp	r3, #80	; 0x50
 80046b6:	d873      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d058      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x13a>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d86f      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b30      	cmp	r3, #48	; 0x30
 80046c2:	d064      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b30      	cmp	r3, #48	; 0x30
 80046c6:	d86b      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d060      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d867      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d05c      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d05a      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046d8:	e062      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6899      	ldr	r1, [r3, #8]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f000 fc7d 	bl	8004fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	609a      	str	r2, [r3, #8]
      break;
 8004706:	e04f      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6899      	ldr	r1, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f000 fc66 	bl	8004fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472a:	609a      	str	r2, [r3, #8]
      break;
 800472c:	e03c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	461a      	mov	r2, r3
 800473c:	f000 fb24 	bl	8004d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2150      	movs	r1, #80	; 0x50
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fc33 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 800474c:	e02c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	461a      	mov	r2, r3
 800475c:	f000 fb80 	bl	8004e60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2160      	movs	r1, #96	; 0x60
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc23 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 800476c:	e01c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	f000 fb04 	bl	8004d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fc13 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 800478c:	e00c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f000 fc0a 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 800479e:	e003      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	e000      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3a      	ldr	r2, [pc, #232]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d02b      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d027      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d023      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01b      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d017      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <TIM_Base_SetConfig+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <TIM_Base_SetConfig+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <TIM_Base_SetConfig+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <TIM_Base_SetConfig+0x134>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <TIM_Base_SetConfig+0x138>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <TIM_Base_SetConfig+0x13c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <TIM_Base_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40010400 	.word	0x40010400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800
 8004934:	40001800 	.word	0x40001800
 8004938:	40001c00 	.word	0x40001c00
 800493c:	40002000 	.word	0x40002000

08004940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 0302 	bic.w	r3, r3, #2
 8004988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <TIM_OC1_SetConfig+0xd8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC1_SetConfig+0x64>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <TIM_OC1_SetConfig+0xdc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10c      	bne.n	80049be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0308 	bic.w	r3, r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <TIM_OC1_SetConfig+0xd8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_OC1_SetConfig+0x8e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <TIM_OC1_SetConfig+0xdc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d111      	bne.n	80049f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40010400 	.word	0x40010400

08004a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0210 	bic.w	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0320 	bic.w	r3, r3, #32
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a22      	ldr	r2, [pc, #136]	; (8004b04 <TIM_OC2_SetConfig+0xe4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_OC2_SetConfig+0x68>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <TIM_OC2_SetConfig+0xe8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10d      	bne.n	8004aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC2_SetConfig+0xe4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_OC2_SetConfig+0x94>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_OC2_SetConfig+0xe8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d113      	bne.n	8004adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400

08004b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <TIM_OC3_SetConfig+0xe0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC3_SetConfig+0x66>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <TIM_OC3_SetConfig+0xe4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10d      	bne.n	8004b8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <TIM_OC3_SetConfig+0xe0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_OC3_SetConfig+0x92>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <TIM_OC3_SetConfig+0xe4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d113      	bne.n	8004bc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	621a      	str	r2, [r3, #32]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40010400 	.word	0x40010400

08004bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	031b      	lsls	r3, r3, #12
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <TIM_OC4_SetConfig+0xa4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC4_SetConfig+0x68>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <TIM_OC4_SetConfig+0xa8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d109      	bne.n	8004c70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40010400 	.word	0x40010400

08004ca0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <TIM_TI1_SetConfig+0xcc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01b      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d017      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <TIM_TI1_SetConfig+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4a24      	ldr	r2, [pc, #144]	; (8004d74 <TIM_TI1_SetConfig+0xd4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00f      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <TIM_TI1_SetConfig+0xd8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <TIM_TI1_SetConfig+0xdc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <TIM_TI1_SetConfig+0xe0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_TI1_SetConfig+0x66>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <TIM_TI1_SetConfig+0xe4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <TIM_TI1_SetConfig+0x6a>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <TIM_TI1_SetConfig+0x6c>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e003      	b.n	8004d2a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f023 030a 	bic.w	r3, r3, #10
 8004d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f003 030a 	and.w	r3, r3, #10
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40001800 	.word	0x40001800

08004d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 030a 	bic.w	r3, r3, #10
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f023 0210 	bic.w	r2, r3, #16
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	031b      	lsls	r3, r3, #12
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	031b      	lsls	r3, r3, #12
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	031b      	lsls	r3, r3, #12
 8004f90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f043 0307 	orr.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	431a      	orrs	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4313      	orrs	r3, r2
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	609a      	str	r2, [r3, #8]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2201      	movs	r2, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1a      	ldr	r2, [r3, #32]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	43db      	mvns	r3, r3
 800504a:	401a      	ands	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	431a      	orrs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <HAL_TIMEx_PWMN_Start+0x24>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e022      	b.n	80050de <HAL_TIMEx_PWMN_Start+0x6a>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d109      	bne.n	80050b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e015      	b.n	80050de <HAL_TIMEx_PWMN_Start+0x6a>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d109      	bne.n	80050cc <HAL_TIMEx_PWMN_Start+0x58>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e008      	b.n	80050de <HAL_TIMEx_PWMN_Start+0x6a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e06d      	b.n	80051c2 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_TIMEx_PWMN_Start+0x82>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	e013      	b.n	800511e <HAL_TIMEx_PWMN_Start+0xaa>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d104      	bne.n	8005106 <HAL_TIMEx_PWMN_Start+0x92>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005104:	e00b      	b.n	800511e <HAL_TIMEx_PWMN_Start+0xaa>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d104      	bne.n	8005116 <HAL_TIMEx_PWMN_Start+0xa2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	e003      	b.n	800511e <HAL_TIMEx_PWMN_Start+0xaa>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2204      	movs	r2, #4
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f99e 	bl	8005468 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800513a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_TIMEx_PWMN_Start+0x158>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d01d      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HAL_TIMEx_PWMN_Start+0x160>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIMEx_PWMN_Start+0x164>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_TIMEx_PWMN_Start+0x168>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIMEx_PWMN_Start+0x16c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIMEx_PWMN_Start+0x118>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIMEx_PWMN_Start+0x170>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d111      	bne.n	80051b0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d010      	beq.n	80051c0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	e007      	b.n	80051c0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40001800 	.word	0x40001800

080051e8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f934 	bl	8005468 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	f241 1311 	movw	r3, #4369	; 0x1111
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10f      	bne.n	8005230 <HAL_TIMEx_PWMN_Stop+0x48>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6a1a      	ldr	r2, [r3, #32]
 8005216:	f240 4344 	movw	r3, #1092	; 0x444
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d107      	bne.n	8005230 <HAL_TIMEx_PWMN_Stop+0x48>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800522e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	f241 1311 	movw	r3, #4369	; 0x1111
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10f      	bne.n	8005260 <HAL_TIMEx_PWMN_Stop+0x78>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	f240 4344 	movw	r3, #1092	; 0x444
 800524a:	4013      	ands	r3, r2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d107      	bne.n	8005260 <HAL_TIMEx_PWMN_Stop+0x78>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <HAL_TIMEx_PWMN_Stop+0x88>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526e:	e013      	b.n	8005298 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d104      	bne.n	8005280 <HAL_TIMEx_PWMN_Stop+0x98>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800527e:	e00b      	b.n	8005298 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d104      	bne.n	8005290 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528e:	e003      	b.n	8005298 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e05a      	b.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a21      	ldr	r2, [pc, #132]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005308:	d01d      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a18      	ldr	r2, [pc, #96]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a17      	ldr	r2, [pc, #92]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a15      	ldr	r2, [pc, #84]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10c      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4313      	orrs	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e03d      	b.n	8005434 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2204      	movs	r2, #4
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1a      	ldr	r2, [r3, #32]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	43db      	mvns	r3, r3
 800548a:	401a      	ands	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	431a      	orrs	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e03f      	b.n	8005544 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d106      	bne.n	80054de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fc f9ad 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	; 0x24
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f9ea 	bl	80058d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800550a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800551a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800552a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b20      	cmp	r3, #32
 8005564:	d165      	bne.n	8005632 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_UART_Transmit_DMA+0x26>
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e05e      	b.n	8005634 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_UART_Transmit_DMA+0x38>
 8005580:	2302      	movs	r3, #2
 8005582:	e057      	b.n	8005634 <HAL_UART_Transmit_DMA+0xe8>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88fa      	ldrh	r2, [r7, #6]
 8005596:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2221      	movs	r2, #33	; 0x21
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	4a22      	ldr	r2, [pc, #136]	; (800563c <HAL_UART_Transmit_DMA+0xf0>)
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b8:	4a21      	ldr	r2, [pc, #132]	; (8005640 <HAL_UART_Transmit_DMA+0xf4>)
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	4a20      	ldr	r2, [pc, #128]	; (8005644 <HAL_UART_Transmit_DMA+0xf8>)
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	2200      	movs	r2, #0
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3304      	adds	r3, #4
 80055e0:	461a      	mov	r2, r3
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	f7fc fe22 	bl	800222c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3314      	adds	r3, #20
 8005600:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	627a      	str	r2, [r7, #36]	; 0x24
 800561c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6a39      	ldr	r1, [r7, #32]
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	61fb      	str	r3, [r7, #28]
   return(result);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	e000      	b.n	8005634 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005632:	2302      	movs	r3, #2
  }
}
 8005634:	4618      	mov	r0, r3
 8005636:	3730      	adds	r7, #48	; 0x30
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	08005671 	.word	0x08005671
 8005640:	0800570b 	.word	0x0800570b
 8005644:	08005727 	.word	0x08005727

08005648 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b090      	sub	sp, #64	; 0x40
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d137      	bne.n	80056fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568e:	2200      	movs	r2, #0
 8005690:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	623b      	str	r3, [r7, #32]
   return(result);
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b2:	633a      	str	r2, [r7, #48]	; 0x30
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e6:	61fa      	str	r2, [r7, #28]
 80056e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	69b9      	ldr	r1, [r7, #24]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	617b      	str	r3, [r7, #20]
   return(result);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e5      	bne.n	80056c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056fa:	e002      	b.n	8005702 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80056fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056fe:	f7fc fae1 	bl	8001cc4 <HAL_UART_TxCpltCallback>
}
 8005702:	bf00      	nop
 8005704:	3740      	adds	r7, #64	; 0x40
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff ff95 	bl	8005648 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b21      	cmp	r3, #33	; 0x21
 8005758:	d108      	bne.n	800576c <UART_DMAError+0x46>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005766:	68b8      	ldr	r0, [r7, #8]
 8005768:	f000 f827 	bl	80057ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b22      	cmp	r3, #34	; 0x22
 800578c:	d108      	bne.n	80057a0 <UART_DMAError+0x7a>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800579a:	68b8      	ldr	r0, [r7, #8]
 800579c:	f000 f835 	bl	800580a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f043 0210 	orr.w	r2, r3, #16
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ac:	68b8      	ldr	r0, [r7, #8]
 80057ae:	f7ff ff55 	bl	800565c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b089      	sub	sp, #36	; 0x24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	61ba      	str	r2, [r7, #24]
 80057e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80057fe:	bf00      	nop
 8005800:	3724      	adds	r7, #36	; 0x24
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b095      	sub	sp, #84	; 0x54
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005832:	643a      	str	r2, [r7, #64]	; 0x40
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	61fb      	str	r3, [r7, #28]
   return(result);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	64bb      	str	r3, [r7, #72]	; 0x48
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	2b01      	cmp	r3, #1
 8005880:	d119      	bne.n	80058b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	60bb      	str	r3, [r7, #8]
   return(result);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	647b      	str	r3, [r7, #68]	; 0x44
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a2:	61ba      	str	r2, [r7, #24]
 80058a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	613b      	str	r3, [r7, #16]
   return(result);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058c4:	bf00      	nop
 80058c6:	3754      	adds	r7, #84	; 0x54
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d4:	b0c0      	sub	sp, #256	; 0x100
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	ea40 0301 	orr.w	r3, r0, r1
 80058f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	431a      	orrs	r2, r3
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005928:	f021 010c 	bic.w	r1, r1, #12
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005936:	430b      	orrs	r3, r1
 8005938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	6999      	ldr	r1, [r3, #24]
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	ea40 0301 	orr.w	r3, r0, r1
 8005956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b8f      	ldr	r3, [pc, #572]	; (8005b9c <UART_SetConfig+0x2cc>)
 8005960:	429a      	cmp	r2, r3
 8005962:	d005      	beq.n	8005970 <UART_SetConfig+0xa0>
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b8d      	ldr	r3, [pc, #564]	; (8005ba0 <UART_SetConfig+0x2d0>)
 800596c:	429a      	cmp	r2, r3
 800596e:	d104      	bne.n	800597a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fd fa3c 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 8005974:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005978:	e003      	b.n	8005982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800597a:	f7fd fa23 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 800597e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	f040 810c 	bne.w	8005ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800599a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800599e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	1891      	adds	r1, r2, r2
 80059a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80059aa:	415b      	adcs	r3, r3
 80059ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059b2:	4621      	mov	r1, r4
 80059b4:	eb12 0801 	adds.w	r8, r2, r1
 80059b8:	4629      	mov	r1, r5
 80059ba:	eb43 0901 	adc.w	r9, r3, r1
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059d2:	4690      	mov	r8, r2
 80059d4:	4699      	mov	r9, r3
 80059d6:	4623      	mov	r3, r4
 80059d8:	eb18 0303 	adds.w	r3, r8, r3
 80059dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059e0:	462b      	mov	r3, r5
 80059e2:	eb49 0303 	adc.w	r3, r9, r3
 80059e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059fe:	460b      	mov	r3, r1
 8005a00:	18db      	adds	r3, r3, r3
 8005a02:	653b      	str	r3, [r7, #80]	; 0x50
 8005a04:	4613      	mov	r3, r2
 8005a06:	eb42 0303 	adc.w	r3, r2, r3
 8005a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a14:	f7fb f84a 	bl	8000aac <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4b61      	ldr	r3, [pc, #388]	; (8005ba4 <UART_SetConfig+0x2d4>)
 8005a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	011c      	lsls	r4, r3, #4
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	1891      	adds	r1, r2, r2
 8005a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a40:	415b      	adcs	r3, r3
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a48:	4641      	mov	r1, r8
 8005a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a4e:	4649      	mov	r1, r9
 8005a50:	eb43 0b01 	adc.w	fp, r3, r1
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a68:	4692      	mov	sl, r2
 8005a6a:	469b      	mov	fp, r3
 8005a6c:	4643      	mov	r3, r8
 8005a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a76:	464b      	mov	r3, r9
 8005a78:	eb4b 0303 	adc.w	r3, fp, r3
 8005a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a94:	460b      	mov	r3, r1
 8005a96:	18db      	adds	r3, r3, r3
 8005a98:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005aaa:	f7fa ffff 	bl	8000aac <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4b3b      	ldr	r3, [pc, #236]	; (8005ba4 <UART_SetConfig+0x2d4>)
 8005ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2264      	movs	r2, #100	; 0x64
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	1acb      	subs	r3, r1, r3
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aca:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <UART_SetConfig+0x2d4>)
 8005acc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad8:	441c      	add	r4, r3
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005af4:	415b      	adcs	r3, r3
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005afc:	4641      	mov	r1, r8
 8005afe:	1851      	adds	r1, r2, r1
 8005b00:	6339      	str	r1, [r7, #48]	; 0x30
 8005b02:	4649      	mov	r1, r9
 8005b04:	414b      	adcs	r3, r1
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b14:	4659      	mov	r1, fp
 8005b16:	00cb      	lsls	r3, r1, #3
 8005b18:	4651      	mov	r1, sl
 8005b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1e:	4651      	mov	r1, sl
 8005b20:	00ca      	lsls	r2, r1, #3
 8005b22:	4610      	mov	r0, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	4642      	mov	r2, r8
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b30:	464b      	mov	r3, r9
 8005b32:	460a      	mov	r2, r1
 8005b34:	eb42 0303 	adc.w	r3, r2, r3
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b50:	460b      	mov	r3, r1
 8005b52:	18db      	adds	r3, r3, r3
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b56:	4613      	mov	r3, r2
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b66:	f7fa ffa1 	bl	8000aac <__aeabi_uldivmod>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <UART_SetConfig+0x2d4>)
 8005b70:	fba3 1302 	umull	r1, r3, r3, r2
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	2164      	movs	r1, #100	; 0x64
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	3332      	adds	r3, #50	; 0x32
 8005b82:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <UART_SetConfig+0x2d4>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	f003 0207 	and.w	r2, r3, #7
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4422      	add	r2, r4
 8005b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b98:	e105      	b.n	8005da6 <UART_SetConfig+0x4d6>
 8005b9a:	bf00      	nop
 8005b9c:	40011000 	.word	0x40011000
 8005ba0:	40011400 	.word	0x40011400
 8005ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bba:	4642      	mov	r2, r8
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	6239      	str	r1, [r7, #32]
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bca:	4641      	mov	r1, r8
 8005bcc:	1854      	adds	r4, r2, r1
 8005bce:	4649      	mov	r1, r9
 8005bd0:	eb43 0501 	adc.w	r5, r3, r1
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	00eb      	lsls	r3, r5, #3
 8005bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be2:	00e2      	lsls	r2, r4, #3
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	4643      	mov	r3, r8
 8005bea:	18e3      	adds	r3, r4, r3
 8005bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	eb45 0303 	adc.w	r3, r5, r3
 8005bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c16:	4629      	mov	r1, r5
 8005c18:	008b      	lsls	r3, r1, #2
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c20:	4621      	mov	r1, r4
 8005c22:	008a      	lsls	r2, r1, #2
 8005c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c28:	f7fa ff40 	bl	8000aac <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4b60      	ldr	r3, [pc, #384]	; (8005db4 <UART_SetConfig+0x4e4>)
 8005c32:	fba3 2302 	umull	r2, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	011c      	lsls	r4, r3, #4
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	61b9      	str	r1, [r7, #24]
 8005c54:	415b      	adcs	r3, r3
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	1851      	adds	r1, r2, r1
 8005c60:	6139      	str	r1, [r7, #16]
 8005c62:	4649      	mov	r1, r9
 8005c64:	414b      	adcs	r3, r1
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c74:	4659      	mov	r1, fp
 8005c76:	00cb      	lsls	r3, r1, #3
 8005c78:	4651      	mov	r1, sl
 8005c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7e:	4651      	mov	r1, sl
 8005c80:	00ca      	lsls	r2, r1, #3
 8005c82:	4610      	mov	r0, r2
 8005c84:	4619      	mov	r1, r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	4642      	mov	r2, r8
 8005c8a:	189b      	adds	r3, r3, r2
 8005c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c90:	464b      	mov	r3, r9
 8005c92:	460a      	mov	r2, r1
 8005c94:	eb42 0303 	adc.w	r3, r2, r3
 8005c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	008b      	lsls	r3, r1, #2
 8005cb8:	4641      	mov	r1, r8
 8005cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	008a      	lsls	r2, r1, #2
 8005cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cc6:	f7fa fef1 	bl	8000aac <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <UART_SetConfig+0x4e4>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	; 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	3332      	adds	r3, #50	; 0x32
 8005ce2:	4a34      	ldr	r2, [pc, #208]	; (8005db4 <UART_SetConfig+0x4e4>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cee:	441c      	add	r4, r3
 8005cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8005cf8:	677a      	str	r2, [r7, #116]	; 0x74
 8005cfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cfe:	4642      	mov	r2, r8
 8005d00:	464b      	mov	r3, r9
 8005d02:	1891      	adds	r1, r2, r2
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	415b      	adcs	r3, r3
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0e:	4641      	mov	r1, r8
 8005d10:	1851      	adds	r1, r2, r1
 8005d12:	6039      	str	r1, [r7, #0]
 8005d14:	4649      	mov	r1, r9
 8005d16:	414b      	adcs	r3, r1
 8005d18:	607b      	str	r3, [r7, #4]
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d26:	4659      	mov	r1, fp
 8005d28:	00cb      	lsls	r3, r1, #3
 8005d2a:	4651      	mov	r1, sl
 8005d2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d30:	4651      	mov	r1, sl
 8005d32:	00ca      	lsls	r2, r1, #3
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	189b      	adds	r3, r3, r2
 8005d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d40:	464b      	mov	r3, r9
 8005d42:	460a      	mov	r2, r1
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	663b      	str	r3, [r7, #96]	; 0x60
 8005d54:	667a      	str	r2, [r7, #100]	; 0x64
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d62:	4649      	mov	r1, r9
 8005d64:	008b      	lsls	r3, r1, #2
 8005d66:	4641      	mov	r1, r8
 8005d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	008a      	lsls	r2, r1, #2
 8005d70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d74:	f7fa fe9a 	bl	8000aac <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <UART_SetConfig+0x4e4>)
 8005d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	2164      	movs	r1, #100	; 0x64
 8005d86:	fb01 f303 	mul.w	r3, r1, r3
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	3332      	adds	r3, #50	; 0x32
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <UART_SetConfig+0x4e4>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4422      	add	r2, r4
 8005da4:	609a      	str	r2, [r3, #8]
}
 8005da6:	bf00      	nop
 8005da8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db2:	bf00      	nop
 8005db4:	51eb851f 	.word	0x51eb851f

08005db8 <__NVIC_SetPriority>:
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	6039      	str	r1, [r7, #0]
 8005dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	db0a      	blt.n	8005de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	490c      	ldr	r1, [pc, #48]	; (8005e04 <__NVIC_SetPriority+0x4c>)
 8005dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	440b      	add	r3, r1
 8005ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005de0:	e00a      	b.n	8005df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	4908      	ldr	r1, [pc, #32]	; (8005e08 <__NVIC_SetPriority+0x50>)
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	3b04      	subs	r3, #4
 8005df0:	0112      	lsls	r2, r2, #4
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	440b      	add	r3, r1
 8005df6:	761a      	strb	r2, [r3, #24]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	e000e100 	.word	0xe000e100
 8005e08:	e000ed00 	.word	0xe000ed00

08005e0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e10:	2100      	movs	r1, #0
 8005e12:	f06f 0004 	mvn.w	r0, #4
 8005e16:	f7ff ffcf 	bl	8005db8 <__NVIC_SetPriority>
#endif
}
 8005e1a:	bf00      	nop
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e26:	f3ef 8305 	mrs	r3, IPSR
 8005e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e32:	f06f 0305 	mvn.w	r3, #5
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	e00c      	b.n	8005e54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <osKernelInitialize+0x44>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <osKernelInitialize+0x44>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	e002      	b.n	8005e54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e54:	687b      	ldr	r3, [r7, #4]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000280 	.word	0x20000280

08005e68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e6e:	f3ef 8305 	mrs	r3, IPSR
 8005e72:	603b      	str	r3, [r7, #0]
  return(result);
 8005e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e7a:	f06f 0305 	mvn.w	r3, #5
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	e010      	b.n	8005ea4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <osKernelStart+0x48>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d109      	bne.n	8005e9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e8a:	f7ff ffbf 	bl	8005e0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <osKernelStart+0x48>)
 8005e90:	2202      	movs	r2, #2
 8005e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e94:	f002 f992 	bl	80081bc <vTaskStartScheduler>
      stat = osOK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	e002      	b.n	8005ea4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ea4:	687b      	ldr	r3, [r7, #4]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000280 	.word	0x20000280

08005eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08e      	sub	sp, #56	; 0x38
 8005eb8:	af04      	add	r7, sp, #16
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec4:	f3ef 8305 	mrs	r3, IPSR
 8005ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d17e      	bne.n	8005fce <osThreadNew+0x11a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d07b      	beq.n	8005fce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005eda:	2318      	movs	r3, #24
 8005edc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d045      	beq.n	8005f7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <osThreadNew+0x48>
        name = attr->name;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <osThreadNew+0x6e>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b38      	cmp	r3, #56	; 0x38
 8005f14:	d805      	bhi.n	8005f22 <osThreadNew+0x6e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <osThreadNew+0x72>
        return (NULL);
 8005f22:	2300      	movs	r3, #0
 8005f24:	e054      	b.n	8005fd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00e      	beq.n	8005f5c <osThreadNew+0xa8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2bbb      	cmp	r3, #187	; 0xbb
 8005f44:	d90a      	bls.n	8005f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <osThreadNew+0xa8>
        mem = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	e010      	b.n	8005f7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <osThreadNew+0xca>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <osThreadNew+0xca>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <osThreadNew+0xca>
          mem = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e001      	b.n	8005f7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d110      	bne.n	8005fa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f8c:	9202      	str	r2, [sp, #8]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 ff22 	bl	8007de4 <xTaskCreateStatic>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	e013      	b.n	8005fce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d110      	bne.n	8005fce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f107 0310 	add.w	r3, r7, #16
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f001 ff6d 	bl	8007e9e <xTaskCreate>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <osThreadNew+0x11a>
            hTask = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fce:	693b      	ldr	r3, [r7, #16]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3728      	adds	r7, #40	; 0x28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe0:	f3ef 8305 	mrs	r3, IPSR
 8005fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <osDelay+0x1c>
    stat = osErrorISR;
 8005fec:	f06f 0305 	mvn.w	r3, #5
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e007      	b.n	8006004 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f002 f8a8 	bl	8008154 <vTaskDelay>
    }
  }

  return (stat);
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800601a:	f3ef 8305 	mrs	r3, IPSR
 800601e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006020:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006022:	2b00      	cmp	r3, #0
 8006024:	d12d      	bne.n	8006082 <osEventFlagsNew+0x74>
    mem = -1;
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d015      	beq.n	800605e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d006      	beq.n	8006048 <osEventFlagsNew+0x3a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b1f      	cmp	r3, #31
 8006040:	d902      	bls.n	8006048 <osEventFlagsNew+0x3a>
        mem = 1;
 8006042:	2301      	movs	r3, #1
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	e00c      	b.n	8006062 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d108      	bne.n	8006062 <osEventFlagsNew+0x54>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <osEventFlagsNew+0x54>
          mem = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	e001      	b.n	8006062 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d106      	bne.n	8006076 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fc4f 	bl	8006910 <xEventGroupCreateStatic>
 8006072:	6178      	str	r0, [r7, #20]
 8006074:	e005      	b.n	8006082 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800607c:	f000 fc7f 	bl	800697e <xEventGroupCreate>
 8006080:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006082:	697b      	ldr	r3, [r7, #20]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <osEventFlagsSet+0x1e>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80060aa:	f06f 0303 	mvn.w	r3, #3
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e028      	b.n	8006104 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b2:	f3ef 8305 	mrs	r3, IPSR
 80060b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01d      	beq.n	80060fa <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	461a      	mov	r2, r3
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f000 fdfa 	bl	8006cc4 <xEventGroupSetBitsFromISR>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80060d6:	f06f 0302 	mvn.w	r3, #2
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e012      	b.n	8006104 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <osEventFlagsSet+0x78>
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <osEventFlagsSet+0x84>)
 80060ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	e004      	b.n	8006104 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6938      	ldr	r0, [r7, #16]
 80060fe:	f000 fd27 	bl	8006b50 <xEventGroupSetBits>
 8006102:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006104:	697b      	ldr	r3, [r7, #20]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b08c      	sub	sp, #48	; 0x30
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <osEventFlagsWait+0x22>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006136:	f06f 0303 	mvn.w	r3, #3
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e04b      	b.n	80061d6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800613e:	f3ef 8305 	mrs	r3, IPSR
 8006142:	617b      	str	r3, [r7, #20]
  return(result);
 8006144:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800614a:	f06f 0305 	mvn.w	r3, #5
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	e041      	b.n	80061d6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
 8006160:	e001      	b.n	8006166 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006162:	2300      	movs	r3, #0
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006170:	2300      	movs	r3, #0
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	e001      	b.n	800617a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	69b8      	ldr	r0, [r7, #24]
 8006186:	f000 fc15 	bl	80069b4 <xEventGroupWaitBits>
 800618a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d010      	beq.n	80061b8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4013      	ands	r3, r2
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d019      	beq.n	80061d6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80061a8:	f06f 0301 	mvn.w	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	e012      	b.n	80061d6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80061b0:	f06f 0302 	mvn.w	r3, #2
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	e00e      	b.n	80061d6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4013      	ands	r3, r2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80061c8:	f06f 0301 	mvn.w	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	e002      	b.n	80061d6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80061d0:	f06f 0302 	mvn.w	r3, #2
 80061d4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80061d6:	69fb      	ldr	r3, [r7, #28]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f0:	f3ef 8305 	mrs	r3, IPSR
 80061f4:	613b      	str	r3, [r7, #16]
  return(result);
 80061f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d15f      	bne.n	80062bc <osMessageQueueNew+0xdc>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d05c      	beq.n	80062bc <osMessageQueueNew+0xdc>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d059      	beq.n	80062bc <osMessageQueueNew+0xdc>
    mem = -1;
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
 800620c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d029      	beq.n	8006268 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <osMessageQueueNew+0x62>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b4f      	cmp	r3, #79	; 0x4f
 8006222:	d90e      	bls.n	8006242 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695a      	ldr	r2, [r3, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <osMessageQueueNew+0x62>
        mem = 1;
 800623c:	2301      	movs	r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	e014      	b.n	800626c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d110      	bne.n	800626c <osMessageQueueNew+0x8c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10c      	bne.n	800626c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006256:	2b00      	cmp	r3, #0
 8006258:	d108      	bne.n	800626c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <osMessageQueueNew+0x8c>
          mem = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e001      	b.n	800626c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10b      	bne.n	800628a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2100      	movs	r1, #0
 800627c:	9100      	str	r1, [sp, #0]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fe4f 	bl	8006f24 <xQueueGenericCreateStatic>
 8006286:	61f8      	str	r0, [r7, #28]
 8006288:	e008      	b.n	800629c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006290:	2200      	movs	r2, #0
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 febd 	bl	8007014 <xQueueGenericCreate>
 800629a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e001      	b.n	80062b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80062b4:	6979      	ldr	r1, [r7, #20]
 80062b6:	69f8      	ldr	r0, [r7, #28]
 80062b8:	f001 fd36 	bl	8007d28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80062bc:	69fb      	ldr	r3, [r7, #28]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e0:	f3ef 8305 	mrs	r3, IPSR
 80062e4:	617b      	str	r3, [r7, #20]
  return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d028      	beq.n	800633e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <osMessageQueuePut+0x36>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <osMessageQueuePut+0x36>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80062fe:	f06f 0303 	mvn.w	r3, #3
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	e038      	b.n	8006378 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800630a:	f107 0210 	add.w	r2, r7, #16
 800630e:	2300      	movs	r3, #0
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	69b8      	ldr	r0, [r7, #24]
 8006314:	f001 f810 	bl	8007338 <xQueueGenericSendFromISR>
 8006318:	4603      	mov	r3, r0
 800631a:	2b01      	cmp	r3, #1
 800631c:	d003      	beq.n	8006326 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800631e:	f06f 0302 	mvn.w	r3, #2
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e028      	b.n	8006378 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d025      	beq.n	8006378 <osMessageQueuePut+0xb0>
 800632c:	4b15      	ldr	r3, [pc, #84]	; (8006384 <osMessageQueuePut+0xbc>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	e01c      	b.n	8006378 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <osMessageQueuePut+0x82>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800634a:	f06f 0303 	mvn.w	r3, #3
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e012      	b.n	8006378 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006352:	2300      	movs	r3, #0
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	69b8      	ldr	r0, [r7, #24]
 800635a:	f000 feef 	bl	800713c <xQueueGenericSend>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d009      	beq.n	8006378 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800636a:	f06f 0301 	mvn.w	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e002      	b.n	8006378 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006372:	f06f 0302 	mvn.w	r3, #2
 8006376:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006378:	69fb      	ldr	r3, [r7, #28]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800639e:	f3ef 8305 	mrs	r3, IPSR
 80063a2:	617b      	str	r3, [r7, #20]
  return(result);
 80063a4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d028      	beq.n	80063fc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <osMessageQueueGet+0x34>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <osMessageQueueGet+0x34>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80063bc:	f06f 0303 	mvn.w	r3, #3
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	e037      	b.n	8006434 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80063c8:	f107 0310 	add.w	r3, r7, #16
 80063cc:	461a      	mov	r2, r3
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	69b8      	ldr	r0, [r7, #24]
 80063d2:	f001 fac5 	bl	8007960 <xQueueReceiveFromISR>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d003      	beq.n	80063e4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80063dc:	f06f 0302 	mvn.w	r3, #2
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e027      	b.n	8006434 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d024      	beq.n	8006434 <osMessageQueueGet+0xac>
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <osMessageQueueGet+0xb8>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	e01b      	b.n	8006434 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <osMessageQueueGet+0x80>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006408:	f06f 0303 	mvn.w	r3, #3
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	e011      	b.n	8006434 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	69b8      	ldr	r0, [r7, #24]
 8006416:	f001 f8b7 	bl	8007588 <xQueueReceive>
 800641a:	4603      	mov	r3, r0
 800641c:	2b01      	cmp	r3, #1
 800641e:	d009      	beq.n	8006434 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006426:	f06f 0301 	mvn.w	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	e002      	b.n	8006434 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800642e:	f06f 0302 	mvn.w	r3, #2
 8006432:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006434:	69fb      	ldr	r3, [r7, #28]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006450:	f3ef 8305 	mrs	r3, IPSR
 8006454:	613b      	str	r3, [r7, #16]
  return(result);
 8006456:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <osMemoryPoolNew+0x1e>
    mp = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
 8006460:	e0be      	b.n	80065e0 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <osMemoryPoolNew+0x2a>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <osMemoryPoolNew+0x30>
    mp = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	e0b5      	b.n	80065e0 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3303      	adds	r3, #3
 800647c:	f023 0203 	bic.w	r2, r3, #3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	617b      	str	r3, [r7, #20]

    name = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800648c:	f04f 33ff 	mov.w	r3, #4294967295
 8006490:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d038      	beq.n	8006510 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <osMemoryPoolNew+0x68>
        name = attr->name;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <osMemoryPoolNew+0x7e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b73      	cmp	r3, #115	; 0x73
 80064ba:	d902      	bls.n	80064c2 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 80064bc:	2301      	movs	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e009      	b.n	80064d6 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d105      	bne.n	80064d6 <osMemoryPoolNew+0x92>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <osMemoryPoolNew+0xa8>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e015      	b.n	8006518 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d011      	beq.n	8006518 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	429a      	cmp	r2, r3
 8006508:	d806      	bhi.n	8006518 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 800650a:	2301      	movs	r3, #1
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e003      	b.n	8006518 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 800651e:	2074      	movs	r0, #116	; 0x74
 8006520:	f003 fafa 	bl	8009b18 <pvPortMalloc>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24
 8006526:	e002      	b.n	800652e <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	461a      	mov	r2, r3
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fdc6 	bl	80070ce <xQueueCreateCountingSemaphoreStatic>
 8006542:	4602      	mov	r2, r0
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 8006556:	6978      	ldr	r0, [r7, #20]
 8006558:	f003 fade 	bl	8009b18 <pvPortMalloc>
 800655c:	4602      	mov	r2, r0
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	609a      	str	r2, [r3, #8]
 8006562:	e003      	b.n	800656c <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d02b      	beq.n	80065ca <osMemoryPoolNew+0x186>
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d027      	beq.n	80065ca <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	6a3a      	ldr	r2, [r7, #32]
 800658a:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	4a12      	ldr	r2, [pc, #72]	; (80065ec <osMemoryPoolNew+0x1a8>)
 80065a2:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f043 0201 	orr.w	r2, r3, #1
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d111      	bne.n	80065e0 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f043 0202 	orr.w	r2, r3, #2
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 80065c8:	e00a      	b.n	80065e0 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <osMemoryPoolNew+0x198>
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 80065d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d8:	f003 fb6a 	bl	8009cb0 <vPortFree>
      }
      mp = NULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3728      	adds	r7, #40	; 0x28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	5eed0000 	.word	0x5eed0000

080065f0 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	e062      	b.n	80066cc <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	6a1a      	ldr	r2, [r3, #32]
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <osMemoryPoolAlloc+0xe8>)
 8006614:	4013      	ands	r3, r2
 8006616:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <osMemoryPoolAlloc+0xe8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d157      	bne.n	80066cc <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800661c:	f3ef 8305 	mrs	r3, IPSR
 8006620:	61bb      	str	r3, [r7, #24]
  return(result);
 8006622:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 8006624:	2b00      	cmp	r3, #0
 8006626:	d032      	beq.n	800668e <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d14e      	bne.n	80066cc <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f992 	bl	8007960 <xQueueReceiveFromISR>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d144      	bne.n	80066cc <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <osMemoryPoolAlloc+0xe8>)
 8006648:	4013      	ands	r3, r2
 800664a:	4a23      	ldr	r2, [pc, #140]	; (80066d8 <osMemoryPoolAlloc+0xe8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d13d      	bne.n	80066cc <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006650:	f3ef 8211 	mrs	r2, BASEPRI
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	617a      	str	r2, [r7, #20]
 8006666:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006668:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 800666a:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 800666c:	6a38      	ldr	r0, [r7, #32]
 800666e:	f000 f8ef 	bl	8006850 <AllocBlock>
 8006672:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 800667a:	6a38      	ldr	r0, [r7, #32]
 800667c:	f000 f8c6 	bl	800680c <CreateBlock>
 8006680:	6278      	str	r0, [r7, #36]	; 0x24
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800668c:	e01e      	b.n	80066cc <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f001 f857 	bl	8007748 <xQueueSemaphoreTake>
 800669a:	4603      	mov	r3, r0
 800669c:	2b01      	cmp	r3, #1
 800669e:	d115      	bne.n	80066cc <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	6a1a      	ldr	r2, [r3, #32]
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <osMemoryPoolAlloc+0xe8>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	4a0b      	ldr	r2, [pc, #44]	; (80066d8 <osMemoryPoolAlloc+0xe8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10e      	bne.n	80066cc <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 80066ae:	f003 f911 	bl	80098d4 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 80066b2:	6a38      	ldr	r0, [r7, #32]
 80066b4:	f000 f8cc 	bl	8006850 <AllocBlock>
 80066b8:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d103      	bne.n	80066c8 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 80066c0:	6a38      	ldr	r0, [r7, #32]
 80066c2:	f000 f8a3 	bl	800680c <CreateBlock>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 80066c8:	f003 f934 	bl	8009934 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	5eed0000 	.word	0x5eed0000

080066dc <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <osMemoryPoolFree+0x16>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d103      	bne.n	80066fa <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 80066f2:	f06f 0303 	mvn.w	r3, #3
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
 80066f8:	e07f      	b.n	80067fa <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	4b40      	ldr	r3, [pc, #256]	; (8006804 <osMemoryPoolFree+0x128>)
 8006704:	4013      	ands	r3, r2
 8006706:	4a3f      	ldr	r2, [pc, #252]	; (8006804 <osMemoryPoolFree+0x128>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 800670c:	f06f 0302 	mvn.w	r3, #2
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
 8006712:	e072      	b.n	80067fa <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d308      	bcc.n	8006730 <osMemoryPoolFree+0x54>
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	3b01      	subs	r3, #1
 8006728:	4413      	add	r3, r2
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d903      	bls.n	8006738 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 8006730:	f06f 0303 	mvn.w	r3, #3
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
 8006736:	e060      	b.n	80067fa <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 8006738:	2300      	movs	r3, #0
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800673c:	f3ef 8305 	mrs	r3, IPSR
 8006740:	61bb      	str	r3, [r7, #24]
  return(result);
 8006742:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03b      	beq.n	80067c0 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	f001 f9a5 	bl	8007a9c <uxQueueMessagesWaitingFromISR>
 8006752:	4602      	mov	r2, r0
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	d103      	bne.n	8006764 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 800675c:	f06f 0302 	mvn.w	r3, #2
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
 8006762:	e04a      	b.n	80067fa <osMemoryPoolFree+0x11e>
	__asm volatile
 8006764:	f3ef 8211 	mrs	r2, BASEPRI
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	613a      	str	r2, [r7, #16]
 800677a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800677c:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800677e:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6a38      	ldr	r0, [r7, #32]
 8006784:	f000 f87c 	bl	8006880 <FreeBlock>
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f383 8811 	msr	BASEPRI, r3
}
 8006792:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8006794:	2300      	movs	r3, #0
 8006796:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f107 0208 	add.w	r2, r7, #8
 80067a0:	4611      	mov	r1, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fe63 	bl	800746e <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d025      	beq.n	80067fa <osMemoryPoolFree+0x11e>
 80067ae:	4b16      	ldr	r3, [pc, #88]	; (8006808 <osMemoryPoolFree+0x12c>)
 80067b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	e01c      	b.n	80067fa <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 f94b 	bl	8007a60 <uxQueueMessagesWaiting>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d103      	bne.n	80067dc <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 80067d4:	f06f 0302 	mvn.w	r3, #2
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
 80067da:	e00e      	b.n	80067fa <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 80067dc:	f003 f87a 	bl	80098d4 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6a38      	ldr	r0, [r7, #32]
 80067e4:	f000 f84c 	bl	8006880 <FreeBlock>

          taskEXIT_CRITICAL();
 80067e8:	f003 f8a4 	bl	8009934 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	6858      	ldr	r0, [r3, #4]
 80067f0:	2300      	movs	r3, #0
 80067f2:	2200      	movs	r2, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	f000 fca1 	bl	800713c <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3728      	adds	r7, #40	; 0x28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	5eed0000 	.word	0x5eed0000
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	429a      	cmp	r2, r3
 8006822:	d20e      	bcs.n	8006842 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	69c9      	ldr	r1, [r1, #28]
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	4413      	add	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	61da      	str	r2, [r3, #28]
  }

  return (p);
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d006      	beq.n	8006872 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a07      	ldr	r2, [pc, #28]	; (80068d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80068b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <vApplicationGetIdleTaskMemory+0x30>)
 80068be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	601a      	str	r2, [r3, #0]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000284 	.word	0x20000284
 80068d8:	20000340 	.word	0x20000340

080068dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a07      	ldr	r2, [pc, #28]	; (8006908 <vApplicationGetTimerTaskMemory+0x2c>)
 80068ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a06      	ldr	r2, [pc, #24]	; (800690c <vApplicationGetTimerTaskMemory+0x30>)
 80068f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068fa:	601a      	str	r2, [r3, #0]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	20000540 	.word	0x20000540
 800690c:	200005fc 	.word	0x200005fc

08006910 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	613b      	str	r3, [r7, #16]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006934:	2320      	movs	r3, #32
 8006936:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b20      	cmp	r3, #32
 800693c:	d00a      	beq.n	8006954 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3304      	adds	r3, #4
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f9bf 	bl	8006cec <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2201      	movs	r2, #1
 8006972:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006974:	697b      	ldr	r3, [r7, #20]
	}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006984:	2020      	movs	r0, #32
 8006986:	f003 f8c7 	bl	8009b18 <pvPortMalloc>
 800698a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f9a5 	bl	8006cec <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80069a8:	687b      	ldr	r3, [r7, #4]
	}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b090      	sub	sp, #64	; 0x40
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xEventGroupWaitBits+0x36>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	623b      	str	r3, [r7, #32]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <xEventGroupWaitBits+0x56>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	61fb      	str	r3, [r7, #28]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xEventGroupWaitBits+0x72>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	61bb      	str	r3, [r7, #24]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a26:	f002 f8c3 	bl	8008bb0 <xTaskGetSchedulerState>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <xEventGroupWaitBits+0x82>
 8006a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <xEventGroupWaitBits+0x86>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xEventGroupWaitBits+0x88>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	617b      	str	r3, [r7, #20]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006a56:	f001 fc21 	bl	800829c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a66:	f000 f90b 	bl	8006c80 <prvTestWaitCondition>
 8006a6a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00e      	beq.n	8006a90 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d028      	beq.n	8006ad2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	43db      	mvns	r3, r3
 8006a88:	401a      	ands	r2, r3
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e020      	b.n	8006ad2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9e:	e018      	b.n	8006ad2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abe:	1d18      	adds	r0, r3, #4
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f001 fde5 	bl	8008698 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006ad2:	f001 fbf1 	bl	80082b8 <xTaskResumeAll>
 8006ad6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d031      	beq.n	8006b42 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d107      	bne.n	8006af4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006ae4:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <xEventGroupWaitBits+0x198>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006af4:	f002 f9d2 	bl	8008e9c <uxTaskResetEventItemValue>
 8006af8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d11a      	bne.n	8006b3a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006b04:	f002 fee6 	bl	80098d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b14:	f000 f8b4 	bl	8006c80 <prvTestWaitCondition>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	401a      	ands	r2, r3
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006b32:	2301      	movs	r3, #1
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006b36:	f002 fefd 	bl	8009934 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3740      	adds	r7, #64	; 0x40
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	e000ed04 	.word	0xe000ed04

08006b50 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <xEventGroupSetBits+0x32>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	613b      	str	r3, [r7, #16]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <xEventGroupSetBits+0x52>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	3308      	adds	r3, #8
 8006bac:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006bae:	f001 fb75 	bl	800829c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006bc4:	e03c      	b.n	8006c40 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c00:	e008      	b.n	8006c14 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d101      	bne.n	8006c14 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c34:	4619      	mov	r1, r3
 8006c36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c38:	f001 fdfa 	bl	8008830 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d1be      	bne.n	8006bc6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	401a      	ands	r2, r3
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006c56:	f001 fb2f 	bl	80082b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	681b      	ldr	r3, [r3, #0]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3738      	adds	r7, #56	; 0x38
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff ff6c 	bl	8006b50 <xEventGroupSetBits>
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e007      	b.n	8006cb6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d101      	bne.n	8006cb6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006cb6:	697b      	ldr	r3, [r7, #20]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	68f9      	ldr	r1, [r7, #12]
 8006cd6:	4804      	ldr	r0, [pc, #16]	; (8006ce8 <xEventGroupSetBitsFromISR+0x24>)
 8006cd8:	f002 fcae 	bl	8009638 <xTimerPendFunctionCallFromISR>
 8006cdc:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006cde:	697b      	ldr	r3, [r7, #20]
	}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	08006c67 	.word	0x08006c67

08006cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f103 0208 	add.w	r2, r3, #8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f103 0208 	add.w	r2, r3, #8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f103 0208 	add.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d103      	bne.n	8006dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e00c      	b.n	8006dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3308      	adds	r3, #8
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e002      	b.n	8006dbc <vListInsert+0x2e>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d2f6      	bcs.n	8006db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6892      	ldr	r2, [r2, #8]
 8006e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6852      	ldr	r2, [r2, #4]
 8006e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d103      	bne.n	8006e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1e5a      	subs	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <xQueueGenericReset+0x2a>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60bb      	str	r3, [r7, #8]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e7e:	f002 fd29 	bl	80098d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e8e:	fb01 f303 	mul.w	r3, r1, r3
 8006e92:	441a      	add	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	441a      	add	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22ff      	movs	r2, #255	; 0xff
 8006ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d114      	bne.n	8006efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01a      	beq.n	8006f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3310      	adds	r3, #16
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fc41 	bl	8008768 <xTaskRemoveFromEventList>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d012      	beq.n	8006f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <xQueueGenericReset+0xcc>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	e009      	b.n	8006f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3310      	adds	r3, #16
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff fef2 	bl	8006cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3324      	adds	r3, #36	; 0x24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff feed 	bl	8006cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f12:	f002 fd0f 	bl	8009934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f16:	2301      	movs	r3, #1
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08e      	sub	sp, #56	; 0x38
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <xQueueGenericCreateStatic+0x52>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <xQueueGenericCreateStatic+0x56>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <xQueueGenericCreateStatic+0x58>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	623b      	str	r3, [r7, #32]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <xQueueGenericCreateStatic+0x7e>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <xQueueGenericCreateStatic+0x82>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <xQueueGenericCreateStatic+0x84>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61fb      	str	r3, [r7, #28]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fc2:	2350      	movs	r3, #80	; 0x50
 8006fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b50      	cmp	r3, #80	; 0x50
 8006fca:	d00a      	beq.n	8006fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	61bb      	str	r3, [r7, #24]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f83f 	bl	8007088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800700c:	4618      	mov	r0, r3
 800700e:	3730      	adds	r7, #48	; 0x30
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	613b      	str	r3, [r7, #16]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3350      	adds	r3, #80	; 0x50
 800704c:	4618      	mov	r0, r3
 800704e:	f002 fd63 	bl	8009b18 <pvPortMalloc>
 8007052:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d011      	beq.n	800707e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	3350      	adds	r3, #80	; 0x50
 8007062:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800706c:	79fa      	ldrb	r2, [r7, #7]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f805 	bl	8007088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800707e:	69bb      	ldr	r3, [r7, #24]
	}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e002      	b.n	80070aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070b6:	2101      	movs	r1, #1
 80070b8:	69b8      	ldr	r0, [r7, #24]
 80070ba:	f7ff fecb 	bl	8006e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b08a      	sub	sp, #40	; 0x28
 80070d2:	af02      	add	r7, sp, #8
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	61bb      	str	r3, [r7, #24]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d90a      	bls.n	8007114 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007114:	2302      	movs	r3, #2
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff ff00 	bl	8006f24 <xQueueGenericCreateStatic>
 8007124:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007132:	69fb      	ldr	r3, [r7, #28]
	}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800714a:	2300      	movs	r3, #0
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xQueueGenericSend+0x32>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <xQueueGenericSend+0x40>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <xQueueGenericSend+0x44>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <xQueueGenericSend+0x46>
 8007180:	2300      	movs	r3, #0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <xQueueGenericSend+0x60>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d103      	bne.n	80071aa <xQueueGenericSend+0x6e>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <xQueueGenericSend+0x72>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <xQueueGenericSend+0x74>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xQueueGenericSend+0x8e>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	623b      	str	r3, [r7, #32]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ca:	f001 fcf1 	bl	8008bb0 <xTaskGetSchedulerState>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <xQueueGenericSend+0x9e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <xQueueGenericSend+0xa2>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <xQueueGenericSend+0xa4>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xQueueGenericSend+0xbe>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	61fb      	str	r3, [r7, #28]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071fa:	f002 fb6b 	bl	80098d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <xQueueGenericSend+0xd4>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d129      	bne.n	8007264 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007216:	f000 fc77 	bl	8007b08 <prvCopyDataToQueue>
 800721a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fa9d 	bl	8008768 <xTaskRemoveFromEventList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d013      	beq.n	800725c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007234:	4b3f      	ldr	r3, [pc, #252]	; (8007334 <xQueueGenericSend+0x1f8>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	e00a      	b.n	800725c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800724c:	4b39      	ldr	r3, [pc, #228]	; (8007334 <xQueueGenericSend+0x1f8>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800725c:	f002 fb6a 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 8007260:	2301      	movs	r3, #1
 8007262:	e063      	b.n	800732c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800726a:	f002 fb63 	bl	8009934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800726e:	2300      	movs	r3, #0
 8007270:	e05c      	b.n	800732c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007278:	f107 0314 	add.w	r3, r7, #20
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fb39 	bl	80088f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007286:	f002 fb55 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800728a:	f001 f807 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800728e:	f002 fb21 	bl	80098d4 <vPortEnterCritical>
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007298:	b25b      	sxtb	r3, r3
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	d103      	bne.n	80072a8 <xQueueGenericSend+0x16c>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ae:	b25b      	sxtb	r3, r3
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d103      	bne.n	80072be <xQueueGenericSend+0x182>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072be:	f002 fb39 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072c2:	1d3a      	adds	r2, r7, #4
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fb28 	bl	8008920 <xTaskCheckForTimeOut>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d124      	bne.n	8007320 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d8:	f000 fd0e 	bl	8007cf8 <prvIsQueueFull>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d018      	beq.n	8007314 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	3310      	adds	r3, #16
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 f9b0 	bl	8008650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072f2:	f000 fc99 	bl	8007c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072f6:	f000 ffdf 	bl	80082b8 <xTaskResumeAll>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f af7c 	bne.w	80071fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <xQueueGenericSend+0x1f8>)
 8007304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	e772      	b.n	80071fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007316:	f000 fc87 	bl	8007c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800731a:	f000 ffcd 	bl	80082b8 <xTaskResumeAll>
 800731e:	e76c      	b.n	80071fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007322:	f000 fc81 	bl	8007c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007326:	f000 ffc7 	bl	80082b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800732a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800732c:	4618      	mov	r0, r3
 800732e:	3738      	adds	r7, #56	; 0x38
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b090      	sub	sp, #64	; 0x40
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <xQueueGenericSendFromISR+0x3c>
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <xQueueGenericSendFromISR+0x40>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <xQueueGenericSendFromISR+0x42>
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d103      	bne.n	80073a2 <xQueueGenericSendFromISR+0x6a>
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <xQueueGenericSendFromISR+0x6e>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <xQueueGenericSendFromISR+0x70>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	623b      	str	r3, [r7, #32]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073c2:	f002 fb69 	bl	8009a98 <vPortValidateInterruptPriority>
	__asm volatile
 80073c6:	f3ef 8211 	mrs	r2, BASEPRI
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	61fa      	str	r2, [r7, #28]
 80073dc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80073de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d302      	bcc.n	80073f4 <xQueueGenericSendFromISR+0xbc>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d12f      	bne.n	8007454 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800740a:	f000 fb7d 	bl	8007b08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800740e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d112      	bne.n	800743e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	3324      	adds	r3, #36	; 0x24
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f99f 	bl	8008768 <xTaskRemoveFromEventList>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00e      	beq.n	800744e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	e007      	b.n	800744e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800743e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007442:	3301      	adds	r3, #1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	b25a      	sxtb	r2, r3
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800744e:	2301      	movs	r3, #1
 8007450:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007452:	e001      	b.n	8007458 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007454:	2300      	movs	r3, #0
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f383 8811 	msr	BASEPRI, r3
}
 8007462:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007466:	4618      	mov	r0, r3
 8007468:	3740      	adds	r7, #64	; 0x40
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b08e      	sub	sp, #56	; 0x38
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	623b      	str	r3, [r7, #32]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61fb      	str	r3, [r7, #28]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <xQueueGiveFromISR+0x58>
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueGiveFromISR+0x5c>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGiveFromISR+0x5e>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074e6:	f002 fad7 	bl	8009a98 <vPortValidateInterruptPriority>
	__asm volatile
 80074ea:	f3ef 8211 	mrs	r2, BASEPRI
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	617a      	str	r2, [r7, #20]
 8007500:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007502:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007512:	429a      	cmp	r2, r3
 8007514:	d22b      	bcs.n	800756e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800751c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007528:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d112      	bne.n	8007558 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	d016      	beq.n	8007568 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	4618      	mov	r0, r3
 8007540:	f001 f912 	bl	8008768 <xTaskRemoveFromEventList>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00e      	beq.n	8007568 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e007      	b.n	8007568 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755c:	3301      	adds	r3, #1
 800755e:	b2db      	uxtb	r3, r3
 8007560:	b25a      	sxtb	r2, r3
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007568:	2301      	movs	r3, #1
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
 800756c:	e001      	b.n	8007572 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800756e:	2300      	movs	r3, #0
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f383 8811 	msr	BASEPRI, r3
}
 800757c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007580:	4618      	mov	r0, r3
 8007582:	3738      	adds	r7, #56	; 0x38
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	; 0x30
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007594:	2300      	movs	r3, #0
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <xQueueReceive+0x30>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	623b      	str	r3, [r7, #32]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <xQueueReceive+0x3e>
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <xQueueReceive+0x42>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <xQueueReceive+0x44>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <xQueueReceive+0x5e>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	61fb      	str	r3, [r7, #28]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075e6:	f001 fae3 	bl	8008bb0 <xTaskGetSchedulerState>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <xQueueReceive+0x6e>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <xQueueReceive+0x72>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <xQueueReceive+0x74>
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <xQueueReceive+0x8e>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	61bb      	str	r3, [r7, #24]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007616:	f002 f95d 	bl	80098d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01f      	beq.n	8007666 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762a:	f000 fad7 	bl	8007bdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	1e5a      	subs	r2, r3, #1
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00f      	beq.n	800765e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	3310      	adds	r3, #16
 8007642:	4618      	mov	r0, r3
 8007644:	f001 f890 	bl	8008768 <xTaskRemoveFromEventList>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800764e:	4b3d      	ldr	r3, [pc, #244]	; (8007744 <xQueueReceive+0x1bc>)
 8007650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800765e:	f002 f969 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 8007662:	2301      	movs	r3, #1
 8007664:	e069      	b.n	800773a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d103      	bne.n	8007674 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800766c:	f002 f962 	bl	8009934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007670:	2300      	movs	r3, #0
 8007672:	e062      	b.n	800773a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800767a:	f107 0310 	add.w	r3, r7, #16
 800767e:	4618      	mov	r0, r3
 8007680:	f001 f938 	bl	80088f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007688:	f002 f954 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800768c:	f000 fe06 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007690:	f002 f920 	bl	80098d4 <vPortEnterCritical>
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800769a:	b25b      	sxtb	r3, r3
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d103      	bne.n	80076aa <xQueueReceive+0x122>
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d103      	bne.n	80076c0 <xQueueReceive+0x138>
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076c0:	f002 f938 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076c4:	1d3a      	adds	r2, r7, #4
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 f927 	bl	8008920 <xTaskCheckForTimeOut>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d123      	bne.n	8007720 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076da:	f000 faf7 	bl	8007ccc <prvIsQueueEmpty>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d017      	beq.n	8007714 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	3324      	adds	r3, #36	; 0x24
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 ffaf 	bl	8008650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f4:	f000 fa98 	bl	8007c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076f8:	f000 fdde 	bl	80082b8 <xTaskResumeAll>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d189      	bne.n	8007616 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <xQueueReceive+0x1bc>)
 8007704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	e780      	b.n	8007616 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007716:	f000 fa87 	bl	8007c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800771a:	f000 fdcd 	bl	80082b8 <xTaskResumeAll>
 800771e:	e77a      	b.n	8007616 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007722:	f000 fa81 	bl	8007c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007726:	f000 fdc7 	bl	80082b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800772a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772c:	f000 face 	bl	8007ccc <prvIsQueueEmpty>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	f43f af6f 	beq.w	8007616 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007738:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800773a:	4618      	mov	r0, r3
 800773c:	3730      	adds	r7, #48	; 0x30
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08e      	sub	sp, #56	; 0x38
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800775a:	2300      	movs	r3, #0
 800775c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	61fb      	str	r3, [r7, #28]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007798:	f001 fa0a 	bl	8008bb0 <xTaskGetSchedulerState>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <xQueueSemaphoreTake+0x60>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <xQueueSemaphoreTake+0x64>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <xQueueSemaphoreTake+0x66>
 80077ac:	2300      	movs	r3, #0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	61bb      	str	r3, [r7, #24]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c8:	f002 f884 	bl	80098d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d024      	beq.n	8007822 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	1e5a      	subs	r2, r3, #1
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077e8:	f001 fb70 	bl	8008ecc <pvTaskIncrementMutexHeldCount>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00f      	beq.n	800781a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	3310      	adds	r3, #16
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 ffb2 	bl	8008768 <xTaskRemoveFromEventList>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800780a:	4b54      	ldr	r3, [pc, #336]	; (800795c <xQueueSemaphoreTake+0x214>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800781a:	f002 f88b 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 800781e:	2301      	movs	r3, #1
 8007820:	e097      	b.n	8007952 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d111      	bne.n	800784c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007844:	f002 f876 	bl	8009934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007848:	2300      	movs	r3, #0
 800784a:	e082      	b.n	8007952 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f001 f84c 	bl	80088f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007860:	f002 f868 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007864:	f000 fd1a 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007868:	f002 f834 	bl	80098d4 <vPortEnterCritical>
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007872:	b25b      	sxtb	r3, r3
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d103      	bne.n	8007882 <xQueueSemaphoreTake+0x13a>
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007888:	b25b      	sxtb	r3, r3
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d103      	bne.n	8007898 <xQueueSemaphoreTake+0x150>
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007898:	f002 f84c 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800789c:	463a      	mov	r2, r7
 800789e:	f107 030c 	add.w	r3, r7, #12
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 f83b 	bl	8008920 <xTaskCheckForTimeOut>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d132      	bne.n	8007916 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b2:	f000 fa0b 	bl	8007ccc <prvIsQueueEmpty>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d026      	beq.n	800790a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078c4:	f002 f806 	bl	80098d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 f98d 	bl	8008bec <xTaskPriorityInherit>
 80078d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078d4:	f002 f82e 	bl	8009934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	3324      	adds	r3, #36	; 0x24
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 feb5 	bl	8008650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078e8:	f000 f99e 	bl	8007c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078ec:	f000 fce4 	bl	80082b8 <xTaskResumeAll>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f af68 	bne.w	80077c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078f8:	4b18      	ldr	r3, [pc, #96]	; (800795c <xQueueSemaphoreTake+0x214>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	e75e      	b.n	80077c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800790a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800790c:	f000 f98c 	bl	8007c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007910:	f000 fcd2 	bl	80082b8 <xTaskResumeAll>
 8007914:	e758      	b.n	80077c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007918:	f000 f986 	bl	8007c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791c:	f000 fccc 	bl	80082b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007922:	f000 f9d3 	bl	8007ccc <prvIsQueueEmpty>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	f43f af4d 	beq.w	80077c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007934:	f001 ffce 	bl	80098d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800793a:	f000 f8cd 	bl	8007ad8 <prvGetDisinheritPriorityAfterTimeout>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fa26 	bl	8008d98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800794c:	f001 fff2 	bl	8009934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007952:	4618      	mov	r0, r3
 8007954:	3738      	adds	r7, #56	; 0x38
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08e      	sub	sp, #56	; 0x38
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	623b      	str	r3, [r7, #32]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d103      	bne.n	800799a <xQueueReceiveFromISR+0x3a>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <xQueueReceiveFromISR+0x3e>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <xQueueReceiveFromISR+0x40>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	61fb      	str	r3, [r7, #28]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ba:	f002 f86d 	bl	8009a98 <vPortValidateInterruptPriority>
	__asm volatile
 80079be:	f3ef 8211 	mrs	r2, BASEPRI
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	61ba      	str	r2, [r7, #24]
 80079d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02f      	beq.n	8007a46 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f4:	f000 f8f2 	bl	8007bdc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	1e5a      	subs	r2, r3, #1
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a08:	d112      	bne.n	8007a30 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d016      	beq.n	8007a40 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	3310      	adds	r3, #16
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fea6 	bl	8008768 <xTaskRemoveFromEventList>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00e      	beq.n	8007a40 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e007      	b.n	8007a40 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a34:	3301      	adds	r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	b25a      	sxtb	r2, r3
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a40:	2301      	movs	r3, #1
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
 8007a44:	e001      	b.n	8007a4a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f383 8811 	msr	BASEPRI, r3
}
 8007a54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3738      	adds	r7, #56	; 0x38
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60bb      	str	r3, [r7, #8]
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007a84:	f001 ff26 	bl	80098d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007a8e:	f001 ff51 	bl	8009934 <vPortExitCritical>

	return uxReturn;
 8007a92:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60fb      	str	r3, [r7, #12]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007aca:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007acc:	4618      	mov	r0, r3
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e001      	b.n	8007afa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007afa:	68fb      	ldr	r3, [r7, #12]
	}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10d      	bne.n	8007b42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d14d      	bne.n	8007bca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 f8c2 	bl	8008cbc <xTaskPriorityDisinherit>
 8007b38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
 8007b40:	e043      	b.n	8007bca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d119      	bne.n	8007b7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6858      	ldr	r0, [r3, #4]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	461a      	mov	r2, r3
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	f002 f9f6 	bl	8009f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	441a      	add	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d32b      	bcc.n	8007bca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	e026      	b.n	8007bca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68d8      	ldr	r0, [r3, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	461a      	mov	r2, r3
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	f002 f9dc 	bl	8009f44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	425b      	negs	r3, r3
 8007b96:	441a      	add	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d207      	bcs.n	8007bb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	425b      	negs	r3, r3
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d105      	bne.n	8007bca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bd2:	697b      	ldr	r3, [r7, #20]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	441a      	add	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d303      	bcc.n	8007c10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68d9      	ldr	r1, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6838      	ldr	r0, [r7, #0]
 8007c1c:	f002 f992 	bl	8009f44 <memcpy>
	}
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c30:	f001 fe50 	bl	80098d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c3c:	e011      	b.n	8007c62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d012      	beq.n	8007c6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3324      	adds	r3, #36	; 0x24
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fd8c 	bl	8008768 <xTaskRemoveFromEventList>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c56:	f000 fec5 	bl	80089e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dce9      	bgt.n	8007c3e <prvUnlockQueue+0x16>
 8007c6a:	e000      	b.n	8007c6e <prvUnlockQueue+0x46>
					break;
 8007c6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	22ff      	movs	r2, #255	; 0xff
 8007c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c76:	f001 fe5d 	bl	8009934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c7a:	f001 fe2b 	bl	80098d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c86:	e011      	b.n	8007cac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d012      	beq.n	8007cb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3310      	adds	r3, #16
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fd67 	bl	8008768 <xTaskRemoveFromEventList>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ca0:	f000 fea0 	bl	80089e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dce9      	bgt.n	8007c88 <prvUnlockQueue+0x60>
 8007cb4:	e000      	b.n	8007cb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	22ff      	movs	r2, #255	; 0xff
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cc0:	f001 fe38 	bl	8009934 <vPortExitCritical>
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cd4:	f001 fdfe 	bl	80098d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d102      	bne.n	8007ce6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e001      	b.n	8007cea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cea:	f001 fe23 	bl	8009934 <vPortExitCritical>

	return xReturn;
 8007cee:	68fb      	ldr	r3, [r7, #12]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d00:	f001 fde8 	bl	80098d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d102      	bne.n	8007d16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e001      	b.n	8007d1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d1a:	f001 fe0b 	bl	8009934 <vPortExitCritical>

	return xReturn;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	e014      	b.n	8007d62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d38:	4a0f      	ldr	r2, [pc, #60]	; (8007d78 <vQueueAddToRegistry+0x50>)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d44:	490c      	ldr	r1, [pc, #48]	; (8007d78 <vQueueAddToRegistry+0x50>)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d4e:	4a0a      	ldr	r2, [pc, #40]	; (8007d78 <vQueueAddToRegistry+0x50>)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d5a:	e006      	b.n	8007d6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b07      	cmp	r3, #7
 8007d66:	d9e7      	bls.n	8007d38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	200009fc 	.word	0x200009fc

08007d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d8c:	f001 fda2 	bl	80098d4 <vPortEnterCritical>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d96:	b25b      	sxtb	r3, r3
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d103      	bne.n	8007da6 <vQueueWaitForMessageRestricted+0x2a>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dac:	b25b      	sxtb	r3, r3
 8007dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db2:	d103      	bne.n	8007dbc <vQueueWaitForMessageRestricted+0x40>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dbc:	f001 fdba 	bl	8009934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	3324      	adds	r3, #36	; 0x24
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fc9d 	bl	8008710 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dd6:	6978      	ldr	r0, [r7, #20]
 8007dd8:	f7ff ff26 	bl	8007c28 <prvUnlockQueue>
	}
 8007ddc:	bf00      	nop
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	; 0x38
 8007de8:	af04      	add	r7, sp, #16
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	623b      	str	r3, [r7, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xTaskCreateStatic+0x46>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	61fb      	str	r3, [r7, #28]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e2a:	23bc      	movs	r3, #188	; 0xbc
 8007e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2bbc      	cmp	r3, #188	; 0xbc
 8007e32:	d00a      	beq.n	8007e4a <xTaskCreateStatic+0x66>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61bb      	str	r3, [r7, #24]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01e      	beq.n	8007e90 <xTaskCreateStatic+0xac>
 8007e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01b      	beq.n	8007e90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	2202      	movs	r2, #2
 8007e66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	9302      	str	r3, [sp, #8]
 8007e72:	f107 0314 	add.w	r3, r7, #20
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f850 	bl	8007f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e8a:	f000 f8f3 	bl	8008074 <prvAddNewTaskToReadyList>
 8007e8e:	e001      	b.n	8007e94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e94:	697b      	ldr	r3, [r7, #20]
	}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3728      	adds	r7, #40	; 0x28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b08c      	sub	sp, #48	; 0x30
 8007ea2:	af04      	add	r7, sp, #16
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fe30 	bl	8009b18 <pvPortMalloc>
 8007eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00e      	beq.n	8007ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ec0:	20bc      	movs	r0, #188	; 0xbc
 8007ec2:	f001 fe29 	bl	8009b18 <pvPortMalloc>
 8007ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ed4:	e005      	b.n	8007ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ed6:	6978      	ldr	r0, [r7, #20]
 8007ed8:	f001 feea 	bl	8009cb0 <vPortFree>
 8007edc:	e001      	b.n	8007ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d017      	beq.n	8007f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9303      	str	r3, [sp, #12]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	9302      	str	r3, [sp, #8]
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f80e 	bl	8007f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f0c:	69f8      	ldr	r0, [r7, #28]
 8007f0e:	f000 f8b1 	bl	8008074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	e002      	b.n	8007f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	461a      	mov	r2, r3
 8007f40:	21a5      	movs	r1, #165	; 0xa5
 8007f42:	f002 f80d 	bl	8009f60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f50:	3b01      	subs	r3, #1
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	617b      	str	r3, [r7, #20]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01f      	beq.n	8007fc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e012      	b.n	8007fb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	7819      	ldrb	r1, [r3, #0]
 8007f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	3334      	adds	r3, #52	; 0x34
 8007f9c:	460a      	mov	r2, r1
 8007f9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d006      	beq.n	8007fba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	2b0f      	cmp	r3, #15
 8007fb6:	d9e9      	bls.n	8007f8c <prvInitialiseNewTask+0x64>
 8007fb8:	e000      	b.n	8007fbc <prvInitialiseNewTask+0x94>
			{
				break;
 8007fba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fc4:	e003      	b.n	8007fce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	2b37      	cmp	r3, #55	; 0x37
 8007fd2:	d901      	bls.n	8007fd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fd4:	2337      	movs	r3, #55	; 0x37
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fe9c 	bl	8006d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	3318      	adds	r3, #24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fe97 	bl	8006d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	3354      	adds	r3, #84	; 0x54
 8008028:	2260      	movs	r2, #96	; 0x60
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f001 ff97 	bl	8009f60 <memset>
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <prvInitialiseNewTask+0x140>)
 8008036:	659a      	str	r2, [r3, #88]	; 0x58
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	4a0c      	ldr	r2, [pc, #48]	; (800806c <prvInitialiseNewTask+0x144>)
 800803c:	65da      	str	r2, [r3, #92]	; 0x5c
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	4a0b      	ldr	r2, [pc, #44]	; (8008070 <prvInitialiseNewTask+0x148>)
 8008042:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	69b8      	ldr	r0, [r7, #24]
 800804a:	f001 fb15 	bl	8009678 <pxPortInitialiseStack>
 800804e:	4602      	mov	r2, r0
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008060:	bf00      	nop
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	0800aa3c 	.word	0x0800aa3c
 800806c:	0800aa5c 	.word	0x0800aa5c
 8008070:	0800aa1c 	.word	0x0800aa1c

08008074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800807c:	f001 fc2a 	bl	80098d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008080:	4b2d      	ldr	r3, [pc, #180]	; (8008138 <prvAddNewTaskToReadyList+0xc4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3301      	adds	r3, #1
 8008086:	4a2c      	ldr	r2, [pc, #176]	; (8008138 <prvAddNewTaskToReadyList+0xc4>)
 8008088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800808a:	4b2c      	ldr	r3, [pc, #176]	; (800813c <prvAddNewTaskToReadyList+0xc8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008092:	4a2a      	ldr	r2, [pc, #168]	; (800813c <prvAddNewTaskToReadyList+0xc8>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008098:	4b27      	ldr	r3, [pc, #156]	; (8008138 <prvAddNewTaskToReadyList+0xc4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d110      	bne.n	80080c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080a0:	f000 fcc4 	bl	8008a2c <prvInitialiseTaskLists>
 80080a4:	e00d      	b.n	80080c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080a6:	4b26      	ldr	r3, [pc, #152]	; (8008140 <prvAddNewTaskToReadyList+0xcc>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080ae:	4b23      	ldr	r3, [pc, #140]	; (800813c <prvAddNewTaskToReadyList+0xc8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d802      	bhi.n	80080c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080bc:	4a1f      	ldr	r2, [pc, #124]	; (800813c <prvAddNewTaskToReadyList+0xc8>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080c2:	4b20      	ldr	r3, [pc, #128]	; (8008144 <prvAddNewTaskToReadyList+0xd0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	4a1e      	ldr	r2, [pc, #120]	; (8008144 <prvAddNewTaskToReadyList+0xd0>)
 80080ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <prvAddNewTaskToReadyList+0xd0>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <prvAddNewTaskToReadyList+0xd4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d903      	bls.n	80080e8 <prvAddNewTaskToReadyList+0x74>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	4a18      	ldr	r2, [pc, #96]	; (8008148 <prvAddNewTaskToReadyList+0xd4>)
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4a15      	ldr	r2, [pc, #84]	; (800814c <prvAddNewTaskToReadyList+0xd8>)
 80080f6:	441a      	add	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7fe fe21 	bl	8006d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008104:	f001 fc16 	bl	8009934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <prvAddNewTaskToReadyList+0xcc>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00e      	beq.n	800812e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <prvAddNewTaskToReadyList+0xc8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	429a      	cmp	r2, r3
 800811c:	d207      	bcs.n	800812e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800811e:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <prvAddNewTaskToReadyList+0xdc>)
 8008120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000f10 	.word	0x20000f10
 800813c:	20000a3c 	.word	0x20000a3c
 8008140:	20000f1c 	.word	0x20000f1c
 8008144:	20000f2c 	.word	0x20000f2c
 8008148:	20000f18 	.word	0x20000f18
 800814c:	20000a40 	.word	0x20000a40
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d017      	beq.n	8008196 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <vTaskDelay+0x60>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <vTaskDelay+0x30>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	60bb      	str	r3, [r7, #8]
}
 8008180:	bf00      	nop
 8008182:	e7fe      	b.n	8008182 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008184:	f000 f88a 	bl	800829c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 feb2 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008190:	f000 f892 	bl	80082b8 <xTaskResumeAll>
 8008194:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d107      	bne.n	80081ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <vTaskDelay+0x64>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000f38 	.word	0x20000f38
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08a      	sub	sp, #40	; 0x28
 80081c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ca:	463a      	mov	r2, r7
 80081cc:	1d39      	adds	r1, r7, #4
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fb68 	bl	80068a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	9202      	str	r2, [sp, #8]
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	2300      	movs	r3, #0
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	460a      	mov	r2, r1
 80081ea:	4924      	ldr	r1, [pc, #144]	; (800827c <vTaskStartScheduler+0xc0>)
 80081ec:	4824      	ldr	r0, [pc, #144]	; (8008280 <vTaskStartScheduler+0xc4>)
 80081ee:	f7ff fdf9 	bl	8007de4 <xTaskCreateStatic>
 80081f2:	4603      	mov	r3, r0
 80081f4:	4a23      	ldr	r2, [pc, #140]	; (8008284 <vTaskStartScheduler+0xc8>)
 80081f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f8:	4b22      	ldr	r3, [pc, #136]	; (8008284 <vTaskStartScheduler+0xc8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e001      	b.n	800820a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d102      	bne.n	8008216 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008210:	f000 fec4 	bl	8008f9c <xTimerCreateTimerTask>
 8008214:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d11b      	bne.n	8008254 <vTaskStartScheduler+0x98>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	613b      	str	r3, [r7, #16]
}
 800822e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008230:	4b15      	ldr	r3, [pc, #84]	; (8008288 <vTaskStartScheduler+0xcc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3354      	adds	r3, #84	; 0x54
 8008236:	4a15      	ldr	r2, [pc, #84]	; (800828c <vTaskStartScheduler+0xd0>)
 8008238:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <vTaskStartScheduler+0xd4>)
 800823c:	f04f 32ff 	mov.w	r2, #4294967295
 8008240:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008242:	4b14      	ldr	r3, [pc, #80]	; (8008294 <vTaskStartScheduler+0xd8>)
 8008244:	2201      	movs	r2, #1
 8008246:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008248:	4b13      	ldr	r3, [pc, #76]	; (8008298 <vTaskStartScheduler+0xdc>)
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800824e:	f001 fa9f 	bl	8009790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008252:	e00e      	b.n	8008272 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d10a      	bne.n	8008272 <vTaskStartScheduler+0xb6>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	60fb      	str	r3, [r7, #12]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <vTaskStartScheduler+0xb4>
}
 8008272:	bf00      	nop
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	0800a99c 	.word	0x0800a99c
 8008280:	080089fd 	.word	0x080089fd
 8008284:	20000f34 	.word	0x20000f34
 8008288:	20000a3c 	.word	0x20000a3c
 800828c:	20000014 	.word	0x20000014
 8008290:	20000f30 	.word	0x20000f30
 8008294:	20000f1c 	.word	0x20000f1c
 8008298:	20000f14 	.word	0x20000f14

0800829c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <vTaskSuspendAll+0x18>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a03      	ldr	r2, [pc, #12]	; (80082b4 <vTaskSuspendAll+0x18>)
 80082a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082aa:	bf00      	nop
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	20000f38 	.word	0x20000f38

080082b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082c6:	4b42      	ldr	r3, [pc, #264]	; (80083d0 <xTaskResumeAll+0x118>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	603b      	str	r3, [r7, #0]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082e4:	f001 faf6 	bl	80098d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082e8:	4b39      	ldr	r3, [pc, #228]	; (80083d0 <xTaskResumeAll+0x118>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4a38      	ldr	r2, [pc, #224]	; (80083d0 <xTaskResumeAll+0x118>)
 80082f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f2:	4b37      	ldr	r3, [pc, #220]	; (80083d0 <xTaskResumeAll+0x118>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d162      	bne.n	80083c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082fa:	4b36      	ldr	r3, [pc, #216]	; (80083d4 <xTaskResumeAll+0x11c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d05e      	beq.n	80083c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008302:	e02f      	b.n	8008364 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008304:	4b34      	ldr	r3, [pc, #208]	; (80083d8 <xTaskResumeAll+0x120>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3318      	adds	r3, #24
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe fd75 	bl	8006e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3304      	adds	r3, #4
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fd70 	bl	8006e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	4b2d      	ldr	r3, [pc, #180]	; (80083dc <xTaskResumeAll+0x124>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d903      	bls.n	8008334 <xTaskResumeAll+0x7c>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	4a2a      	ldr	r2, [pc, #168]	; (80083dc <xTaskResumeAll+0x124>)
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4a27      	ldr	r2, [pc, #156]	; (80083e0 <xTaskResumeAll+0x128>)
 8008342:	441a      	add	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f7fe fcfb 	bl	8006d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008354:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <xTaskResumeAll+0x12c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	d302      	bcc.n	8008364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800835e:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <xTaskResumeAll+0x130>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008364:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <xTaskResumeAll+0x120>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1cb      	bne.n	8008304 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008372:	f000 fbfd 	bl	8008b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008376:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <xTaskResumeAll+0x134>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008382:	f000 f847 	bl	8008414 <xTaskIncrementTick>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800838c:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <xTaskResumeAll+0x130>)
 800838e:	2201      	movs	r2, #1
 8008390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3b01      	subs	r3, #1
 8008396:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1f1      	bne.n	8008382 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <xTaskResumeAll+0x134>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083a4:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <xTaskResumeAll+0x130>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083ac:	2301      	movs	r3, #1
 80083ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <xTaskResumeAll+0x138>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c0:	f001 fab8 	bl	8009934 <vPortExitCritical>

	return xAlreadyYielded;
 80083c4:	68bb      	ldr	r3, [r7, #8]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000f38 	.word	0x20000f38
 80083d4:	20000f10 	.word	0x20000f10
 80083d8:	20000ed0 	.word	0x20000ed0
 80083dc:	20000f18 	.word	0x20000f18
 80083e0:	20000a40 	.word	0x20000a40
 80083e4:	20000a3c 	.word	0x20000a3c
 80083e8:	20000f24 	.word	0x20000f24
 80083ec:	20000f20 	.word	0x20000f20
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <xTaskGetTickCount+0x1c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008400:	687b      	ldr	r3, [r7, #4]
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000f14 	.word	0x20000f14

08008414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841e:	4b4f      	ldr	r3, [pc, #316]	; (800855c <xTaskIncrementTick+0x148>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 808f 	bne.w	8008546 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008428:	4b4d      	ldr	r3, [pc, #308]	; (8008560 <xTaskIncrementTick+0x14c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3301      	adds	r3, #1
 800842e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008430:	4a4b      	ldr	r2, [pc, #300]	; (8008560 <xTaskIncrementTick+0x14c>)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d120      	bne.n	800847e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800843c:	4b49      	ldr	r3, [pc, #292]	; (8008564 <xTaskIncrementTick+0x150>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <xTaskIncrementTick+0x48>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	603b      	str	r3, [r7, #0]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xTaskIncrementTick+0x46>
 800845c:	4b41      	ldr	r3, [pc, #260]	; (8008564 <xTaskIncrementTick+0x150>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	4b41      	ldr	r3, [pc, #260]	; (8008568 <xTaskIncrementTick+0x154>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a3f      	ldr	r2, [pc, #252]	; (8008564 <xTaskIncrementTick+0x150>)
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4a3f      	ldr	r2, [pc, #252]	; (8008568 <xTaskIncrementTick+0x154>)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4b3e      	ldr	r3, [pc, #248]	; (800856c <xTaskIncrementTick+0x158>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	4a3d      	ldr	r2, [pc, #244]	; (800856c <xTaskIncrementTick+0x158>)
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	f000 fb79 	bl	8008b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800847e:	4b3c      	ldr	r3, [pc, #240]	; (8008570 <xTaskIncrementTick+0x15c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	429a      	cmp	r2, r3
 8008486:	d349      	bcc.n	800851c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008488:	4b36      	ldr	r3, [pc, #216]	; (8008564 <xTaskIncrementTick+0x150>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008492:	4b37      	ldr	r3, [pc, #220]	; (8008570 <xTaskIncrementTick+0x15c>)
 8008494:	f04f 32ff 	mov.w	r2, #4294967295
 8008498:	601a      	str	r2, [r3, #0]
					break;
 800849a:	e03f      	b.n	800851c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849c:	4b31      	ldr	r3, [pc, #196]	; (8008564 <xTaskIncrementTick+0x150>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d203      	bcs.n	80084bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084b4:	4a2e      	ldr	r2, [pc, #184]	; (8008570 <xTaskIncrementTick+0x15c>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084ba:	e02f      	b.n	800851c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3304      	adds	r3, #4
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe fc9d 	bl	8006e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d004      	beq.n	80084d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3318      	adds	r3, #24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fc94 	bl	8006e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084dc:	4b25      	ldr	r3, [pc, #148]	; (8008574 <xTaskIncrementTick+0x160>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d903      	bls.n	80084ec <xTaskIncrementTick+0xd8>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	4a22      	ldr	r2, [pc, #136]	; (8008574 <xTaskIncrementTick+0x160>)
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4a1f      	ldr	r2, [pc, #124]	; (8008578 <xTaskIncrementTick+0x164>)
 80084fa:	441a      	add	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3304      	adds	r3, #4
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fe fc1f 	bl	8006d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <xTaskIncrementTick+0x168>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	429a      	cmp	r2, r3
 8008514:	d3b8      	bcc.n	8008488 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008516:	2301      	movs	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800851a:	e7b5      	b.n	8008488 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800851c:	4b17      	ldr	r3, [pc, #92]	; (800857c <xTaskIncrementTick+0x168>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	4915      	ldr	r1, [pc, #84]	; (8008578 <xTaskIncrementTick+0x164>)
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d901      	bls.n	8008538 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008538:	4b11      	ldr	r3, [pc, #68]	; (8008580 <xTaskIncrementTick+0x16c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d007      	beq.n	8008550 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008540:	2301      	movs	r3, #1
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e004      	b.n	8008550 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <xTaskIncrementTick+0x170>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <xTaskIncrementTick+0x170>)
 800854e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008550:	697b      	ldr	r3, [r7, #20]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20000f38 	.word	0x20000f38
 8008560:	20000f14 	.word	0x20000f14
 8008564:	20000ec8 	.word	0x20000ec8
 8008568:	20000ecc 	.word	0x20000ecc
 800856c:	20000f28 	.word	0x20000f28
 8008570:	20000f30 	.word	0x20000f30
 8008574:	20000f18 	.word	0x20000f18
 8008578:	20000a40 	.word	0x20000a40
 800857c:	20000a3c 	.word	0x20000a3c
 8008580:	20000f24 	.word	0x20000f24
 8008584:	20000f20 	.word	0x20000f20

08008588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800858e:	4b2a      	ldr	r3, [pc, #168]	; (8008638 <vTaskSwitchContext+0xb0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008596:	4b29      	ldr	r3, [pc, #164]	; (800863c <vTaskSwitchContext+0xb4>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800859c:	e046      	b.n	800862c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800859e:	4b27      	ldr	r3, [pc, #156]	; (800863c <vTaskSwitchContext+0xb4>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a4:	4b26      	ldr	r3, [pc, #152]	; (8008640 <vTaskSwitchContext+0xb8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e010      	b.n	80085ce <vTaskSwitchContext+0x46>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vTaskSwitchContext+0x3e>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	491d      	ldr	r1, [pc, #116]	; (8008644 <vTaskSwitchContext+0xbc>)
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0e4      	beq.n	80085ac <vTaskSwitchContext+0x24>
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a15      	ldr	r2, [pc, #84]	; (8008644 <vTaskSwitchContext+0xbc>)
 80085ee:	4413      	add	r3, r2
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	605a      	str	r2, [r3, #4]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	3308      	adds	r3, #8
 8008604:	429a      	cmp	r2, r3
 8008606:	d104      	bne.n	8008612 <vTaskSwitchContext+0x8a>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	605a      	str	r2, [r3, #4]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	4a0b      	ldr	r2, [pc, #44]	; (8008648 <vTaskSwitchContext+0xc0>)
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	4a08      	ldr	r2, [pc, #32]	; (8008640 <vTaskSwitchContext+0xb8>)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <vTaskSwitchContext+0xc0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3354      	adds	r3, #84	; 0x54
 8008628:	4a08      	ldr	r2, [pc, #32]	; (800864c <vTaskSwitchContext+0xc4>)
 800862a:	6013      	str	r3, [r2, #0]
}
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	20000f38 	.word	0x20000f38
 800863c:	20000f24 	.word	0x20000f24
 8008640:	20000f18 	.word	0x20000f18
 8008644:	20000a40 	.word	0x20000a40
 8008648:	20000a3c 	.word	0x20000a3c
 800864c:	20000014 	.word	0x20000014

08008650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <vTaskPlaceOnEventList+0x44>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3318      	adds	r3, #24
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fe fb85 	bl	8006d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008684:	2101      	movs	r1, #1
 8008686:	6838      	ldr	r0, [r7, #0]
 8008688:	f000 fc34 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000a3c 	.word	0x20000a3c

08008698 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	617b      	str	r3, [r7, #20]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80086c0:	4b11      	ldr	r3, [pc, #68]	; (8008708 <vTaskPlaceOnUnorderedEventList+0x70>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	613b      	str	r3, [r7, #16]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80086de:	4b0b      	ldr	r3, [pc, #44]	; (800870c <vTaskPlaceOnUnorderedEventList+0x74>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80086e8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086ea:	4b08      	ldr	r3, [pc, #32]	; (800870c <vTaskPlaceOnUnorderedEventList+0x74>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4619      	mov	r1, r3
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7fe fb27 	bl	8006d46 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086f8:	2101      	movs	r1, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fbfa 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
}
 8008700:	bf00      	nop
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000f38 	.word	0x20000f38
 800870c:	20000a3c 	.word	0x20000a3c

08008710 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	617b      	str	r3, [r7, #20]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <vTaskPlaceOnEventListRestricted+0x54>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3318      	adds	r3, #24
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7fe fb00 	bl	8006d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
 8008750:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	68b8      	ldr	r0, [r7, #8]
 8008756:	f000 fbcd 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
	}
 800875a:	bf00      	nop
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000a3c 	.word	0x20000a3c

08008768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	60fb      	str	r3, [r7, #12]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	3318      	adds	r3, #24
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe fb31 	bl	8006e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800879e:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <xTaskRemoveFromEventList+0xb0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d11d      	bne.n	80087e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fb28 	bl	8006e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	4b19      	ldr	r3, [pc, #100]	; (800881c <xTaskRemoveFromEventList+0xb4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d903      	bls.n	80087c4 <xTaskRemoveFromEventList+0x5c>
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	4a16      	ldr	r2, [pc, #88]	; (800881c <xTaskRemoveFromEventList+0xb4>)
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4a13      	ldr	r2, [pc, #76]	; (8008820 <xTaskRemoveFromEventList+0xb8>)
 80087d2:	441a      	add	r2, r3
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f7fe fab3 	bl	8006d46 <vListInsertEnd>
 80087e0:	e005      	b.n	80087ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	3318      	adds	r3, #24
 80087e6:	4619      	mov	r1, r3
 80087e8:	480e      	ldr	r0, [pc, #56]	; (8008824 <xTaskRemoveFromEventList+0xbc>)
 80087ea:	f7fe faac 	bl	8006d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f2:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <xTaskRemoveFromEventList+0xc0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d905      	bls.n	8008808 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008800:	4b0a      	ldr	r3, [pc, #40]	; (800882c <xTaskRemoveFromEventList+0xc4>)
 8008802:	2201      	movs	r2, #1
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	e001      	b.n	800880c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800880c:	697b      	ldr	r3, [r7, #20]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000f38 	.word	0x20000f38
 800881c:	20000f18 	.word	0x20000f18
 8008820:	20000a40 	.word	0x20000a40
 8008824:	20000ed0 	.word	0x20000ed0
 8008828:	20000a3c 	.word	0x20000a3c
 800882c:	20000f24 	.word	0x20000f24

08008830 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800883a:	4b29      	ldr	r3, [pc, #164]	; (80088e0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	613b      	str	r3, [r7, #16]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	60fb      	str	r3, [r7, #12]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fe fabb 	bl	8006e00 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fab6 	bl	8006e00 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d903      	bls.n	80088a8 <vTaskRemoveFromUnorderedEventList+0x78>
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4a0c      	ldr	r2, [pc, #48]	; (80088e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80088b6:	441a      	add	r2, r3
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f7fe fa41 	bl	8006d46 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d902      	bls.n	80088d8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80088d2:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
	}
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000f38 	.word	0x20000f38
 80088e4:	20000f18 	.word	0x20000f18
 80088e8:	20000a40 	.word	0x20000a40
 80088ec:	20000a3c 	.word	0x20000a3c
 80088f0:	20000f24 	.word	0x20000f24

080088f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <vTaskInternalSetTimeOutState+0x24>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <vTaskInternalSetTimeOutState+0x28>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	605a      	str	r2, [r3, #4]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000f28 	.word	0x20000f28
 800891c:	20000f14 	.word	0x20000f14

08008920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	613b      	str	r3, [r7, #16]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10a      	bne.n	8008962 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	60fb      	str	r3, [r7, #12]
}
 800895e:	bf00      	nop
 8008960:	e7fe      	b.n	8008960 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008962:	f000 ffb7 	bl	80098d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008966:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <xTaskCheckForTimeOut+0xbc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	d102      	bne.n	8008986 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	e023      	b.n	80089ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <xTaskCheckForTimeOut+0xc0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d007      	beq.n	80089a2 <xTaskCheckForTimeOut+0x82>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	e015      	b.n	80089ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d20b      	bcs.n	80089c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	1ad2      	subs	r2, r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ff9b 	bl	80088f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e004      	b.n	80089ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ce:	f000 ffb1 	bl	8009934 <vPortExitCritical>

	return xReturn;
 80089d2:	69fb      	ldr	r3, [r7, #28]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000f14 	.word	0x20000f14
 80089e0:	20000f28 	.word	0x20000f28

080089e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089e8:	4b03      	ldr	r3, [pc, #12]	; (80089f8 <vTaskMissedYield+0x14>)
 80089ea:	2201      	movs	r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	20000f24 	.word	0x20000f24

080089fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a04:	f000 f852 	bl	8008aac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <prvIdleTask+0x28>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d9f9      	bls.n	8008a04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <prvIdleTask+0x2c>)
 8008a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a20:	e7f0      	b.n	8008a04 <prvIdleTask+0x8>
 8008a22:	bf00      	nop
 8008a24:	20000a40 	.word	0x20000a40
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a32:	2300      	movs	r3, #0
 8008a34:	607b      	str	r3, [r7, #4]
 8008a36:	e00c      	b.n	8008a52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4a12      	ldr	r2, [pc, #72]	; (8008a8c <prvInitialiseTaskLists+0x60>)
 8008a44:	4413      	add	r3, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe f950 	bl	8006cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	607b      	str	r3, [r7, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b37      	cmp	r3, #55	; 0x37
 8008a56:	d9ef      	bls.n	8008a38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a58:	480d      	ldr	r0, [pc, #52]	; (8008a90 <prvInitialiseTaskLists+0x64>)
 8008a5a:	f7fe f947 	bl	8006cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a5e:	480d      	ldr	r0, [pc, #52]	; (8008a94 <prvInitialiseTaskLists+0x68>)
 8008a60:	f7fe f944 	bl	8006cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a64:	480c      	ldr	r0, [pc, #48]	; (8008a98 <prvInitialiseTaskLists+0x6c>)
 8008a66:	f7fe f941 	bl	8006cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a6a:	480c      	ldr	r0, [pc, #48]	; (8008a9c <prvInitialiseTaskLists+0x70>)
 8008a6c:	f7fe f93e 	bl	8006cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a70:	480b      	ldr	r0, [pc, #44]	; (8008aa0 <prvInitialiseTaskLists+0x74>)
 8008a72:	f7fe f93b 	bl	8006cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <prvInitialiseTaskLists+0x78>)
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <prvInitialiseTaskLists+0x64>)
 8008a7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <prvInitialiseTaskLists+0x7c>)
 8008a7e:	4a05      	ldr	r2, [pc, #20]	; (8008a94 <prvInitialiseTaskLists+0x68>)
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000a40 	.word	0x20000a40
 8008a90:	20000ea0 	.word	0x20000ea0
 8008a94:	20000eb4 	.word	0x20000eb4
 8008a98:	20000ed0 	.word	0x20000ed0
 8008a9c:	20000ee4 	.word	0x20000ee4
 8008aa0:	20000efc 	.word	0x20000efc
 8008aa4:	20000ec8 	.word	0x20000ec8
 8008aa8:	20000ecc 	.word	0x20000ecc

08008aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ab2:	e019      	b.n	8008ae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ab4:	f000 ff0e 	bl	80098d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab8:	4b10      	ldr	r3, [pc, #64]	; (8008afc <prvCheckTasksWaitingTermination+0x50>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe f99b 	bl	8006e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aca:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <prvCheckTasksWaitingTermination+0x54>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a0b      	ldr	r2, [pc, #44]	; (8008b00 <prvCheckTasksWaitingTermination+0x54>)
 8008ad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <prvCheckTasksWaitingTermination+0x58>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <prvCheckTasksWaitingTermination+0x58>)
 8008adc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ade:	f000 ff29 	bl	8009934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f810 	bl	8008b08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <prvCheckTasksWaitingTermination+0x58>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e1      	bne.n	8008ab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20000ee4 	.word	0x20000ee4
 8008b00:	20000f10 	.word	0x20000f10
 8008b04:	20000ef8 	.word	0x20000ef8

08008b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3354      	adds	r3, #84	; 0x54
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 facd 	bl	800a0b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d108      	bne.n	8008b36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 f8c1 	bl	8009cb0 <vPortFree>
				vPortFree( pxTCB );
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 f8be 	bl	8009cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b34:	e018      	b.n	8008b68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d103      	bne.n	8008b48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f8b5 	bl	8009cb0 <vPortFree>
	}
 8008b46:	e00f      	b.n	8008b68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d00a      	beq.n	8008b68 <prvDeleteTCB+0x60>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60fb      	str	r3, [r7, #12]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <prvDeleteTCB+0x5e>
	}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <prvResetNextTaskUnblockTime+0x38>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvResetNextTaskUnblockTime+0x3c>)
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b88:	e008      	b.n	8008b9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8a:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <prvResetNextTaskUnblockTime+0x38>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a04      	ldr	r2, [pc, #16]	; (8008bac <prvResetNextTaskUnblockTime+0x3c>)
 8008b9a:	6013      	str	r3, [r2, #0]
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	20000ec8 	.word	0x20000ec8
 8008bac:	20000f30 	.word	0x20000f30

08008bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <xTaskGetSchedulerState+0x34>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	e008      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc4:	4b08      	ldr	r3, [pc, #32]	; (8008be8 <xTaskGetSchedulerState+0x38>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e001      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bd6:	687b      	ldr	r3, [r7, #4]
	}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	20000f1c 	.word	0x20000f1c
 8008be8:	20000f38 	.word	0x20000f38

08008bec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d051      	beq.n	8008ca6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c06:	4b2a      	ldr	r3, [pc, #168]	; (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d241      	bcs.n	8008c94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	db06      	blt.n	8008c26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c18:	4b25      	ldr	r3, [pc, #148]	; (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	6959      	ldr	r1, [r3, #20]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4a1f      	ldr	r2, [pc, #124]	; (8008cb4 <xTaskPriorityInherit+0xc8>)
 8008c38:	4413      	add	r3, r2
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	d122      	bne.n	8008c84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f8dc 	bl	8006e00 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c48:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4b18      	ldr	r3, [pc, #96]	; (8008cb8 <xTaskPriorityInherit+0xcc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d903      	bls.n	8008c66 <xTaskPriorityInherit+0x7a>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	4a15      	ldr	r2, [pc, #84]	; (8008cb8 <xTaskPriorityInherit+0xcc>)
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <xTaskPriorityInherit+0xc8>)
 8008c74:	441a      	add	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f7fe f862 	bl	8006d46 <vListInsertEnd>
 8008c82:	e004      	b.n	8008c8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e008      	b.n	8008ca6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d201      	bcs.n	8008ca6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20000a3c 	.word	0x20000a3c
 8008cb4:	20000a40 	.word	0x20000a40
 8008cb8:	20000f18 	.word	0x20000f18

08008cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d056      	beq.n	8008d80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cd2:	4b2e      	ldr	r3, [pc, #184]	; (8008d8c <xTaskPriorityDisinherit+0xd0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d00a      	beq.n	8008cf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60fb      	str	r3, [r7, #12]
}
 8008cee:	bf00      	nop
 8008cf0:	e7fe      	b.n	8008cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60bb      	str	r3, [r7, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d14:	1e5a      	subs	r2, r3, #1
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d02c      	beq.n	8008d80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d128      	bne.n	8008d80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe f864 	bl	8006e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <xTaskPriorityDisinherit+0xd4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d903      	bls.n	8008d60 <xTaskPriorityDisinherit+0xa4>
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4a0c      	ldr	r2, [pc, #48]	; (8008d90 <xTaskPriorityDisinherit+0xd4>)
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <xTaskPriorityDisinherit+0xd8>)
 8008d6e:	441a      	add	r2, r3
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7fd ffe5 	bl	8006d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d80:	697b      	ldr	r3, [r7, #20]
	}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000a3c 	.word	0x20000a3c
 8008d90:	20000f18 	.word	0x20000f18
 8008d94:	20000a40 	.word	0x20000a40

08008d98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06a      	beq.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60fb      	str	r3, [r7, #12]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d902      	bls.n	8008dde <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	e002      	b.n	8008de4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d04b      	beq.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d146      	bne.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008df8:	4b25      	ldr	r3, [pc, #148]	; (8008e90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d10a      	bne.n	8008e18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	60bb      	str	r3, [r7, #8]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	69fa      	ldr	r2, [r7, #28]
 8008e22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db04      	blt.n	8008e36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	6959      	ldr	r1, [r3, #20]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e46:	4413      	add	r3, r2
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d11c      	bne.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fd ffd5 	bl	8006e00 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d903      	bls.n	8008e6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	4a0c      	ldr	r2, [pc, #48]	; (8008e98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6e:	4613      	mov	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4a07      	ldr	r2, [pc, #28]	; (8008e94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e78:	441a      	add	r2, r3
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4610      	mov	r0, r2
 8008e82:	f7fd ff60 	bl	8006d46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e86:	bf00      	nop
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000a3c 	.word	0x20000a3c
 8008e94:	20000a40 	.word	0x20000a40
 8008e98:	20000f18 	.word	0x20000f18

08008e9c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <uxTaskResetEventItemValue+0x2c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <uxTaskResetEventItemValue+0x2c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <uxTaskResetEventItemValue+0x2c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008eb8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008eba:	687b      	ldr	r3, [r7, #4]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	20000a3c 	.word	0x20000a3c

08008ecc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ede:	3201      	adds	r2, #1
 8008ee0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ee2:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
	}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	20000a3c 	.word	0x20000a3c

08008ef4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f04:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fd ff78 	bl	8006e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d10a      	bne.n	8008f2e <prvAddCurrentTaskToDelayedList+0x3a>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4819      	ldr	r0, [pc, #100]	; (8008f8c <prvAddCurrentTaskToDelayedList+0x98>)
 8008f28:	f7fd ff0d 	bl	8006d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f2c:	e026      	b.n	8008f7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d209      	bcs.n	8008f5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fd ff1b 	bl	8006d8e <vListInsert>
}
 8008f58:	e010      	b.n	8008f7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5a:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fd ff11 	bl	8006d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d202      	bcs.n	8008f7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f76:	4a08      	ldr	r2, [pc, #32]	; (8008f98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	6013      	str	r3, [r2, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000f14 	.word	0x20000f14
 8008f88:	20000a3c 	.word	0x20000a3c
 8008f8c:	20000efc 	.word	0x20000efc
 8008f90:	20000ecc 	.word	0x20000ecc
 8008f94:	20000ec8 	.word	0x20000ec8
 8008f98:	20000f30 	.word	0x20000f30

08008f9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08a      	sub	sp, #40	; 0x28
 8008fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fa6:	f000 fb07 	bl	80095b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008faa:	4b1c      	ldr	r3, [pc, #112]	; (800901c <xTimerCreateTimerTask+0x80>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d021      	beq.n	8008ff6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fba:	1d3a      	adds	r2, r7, #4
 8008fbc:	f107 0108 	add.w	r1, r7, #8
 8008fc0:	f107 030c 	add.w	r3, r7, #12
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fd fc89 	bl	80068dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	9202      	str	r2, [sp, #8]
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	460a      	mov	r2, r1
 8008fdc:	4910      	ldr	r1, [pc, #64]	; (8009020 <xTimerCreateTimerTask+0x84>)
 8008fde:	4811      	ldr	r0, [pc, #68]	; (8009024 <xTimerCreateTimerTask+0x88>)
 8008fe0:	f7fe ff00 	bl	8007de4 <xTaskCreateStatic>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	4a10      	ldr	r2, [pc, #64]	; (8009028 <xTimerCreateTimerTask+0x8c>)
 8008fe8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <xTimerCreateTimerTask+0x8c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	613b      	str	r3, [r7, #16]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009012:	697b      	ldr	r3, [r7, #20]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000f6c 	.word	0x20000f6c
 8009020:	0800a9a4 	.word	0x0800a9a4
 8009024:	08009161 	.word	0x08009161
 8009028:	20000f70 	.word	0x20000f70

0800902c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800903a:	2300      	movs	r3, #0
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	623b      	str	r3, [r7, #32]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800905a:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <xTimerGenericCommand+0x98>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d02a      	beq.n	80090b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b05      	cmp	r3, #5
 8009072:	dc18      	bgt.n	80090a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009074:	f7ff fd9c 	bl	8008bb0 <xTaskGetSchedulerState>
 8009078:	4603      	mov	r3, r0
 800907a:	2b02      	cmp	r3, #2
 800907c:	d109      	bne.n	8009092 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800907e:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <xTimerGenericCommand+0x98>)
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f107 0110 	add.w	r1, r7, #16
 8009086:	2300      	movs	r3, #0
 8009088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908a:	f7fe f857 	bl	800713c <xQueueGenericSend>
 800908e:	6278      	str	r0, [r7, #36]	; 0x24
 8009090:	e012      	b.n	80090b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009092:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <xTimerGenericCommand+0x98>)
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f107 0110 	add.w	r1, r7, #16
 800909a:	2300      	movs	r3, #0
 800909c:	2200      	movs	r2, #0
 800909e:	f7fe f84d 	bl	800713c <xQueueGenericSend>
 80090a2:	6278      	str	r0, [r7, #36]	; 0x24
 80090a4:	e008      	b.n	80090b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090a6:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <xTimerGenericCommand+0x98>)
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f107 0110 	add.w	r1, r7, #16
 80090ae:	2300      	movs	r3, #0
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	f7fe f941 	bl	8007338 <xQueueGenericSendFromISR>
 80090b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3728      	adds	r7, #40	; 0x28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000f6c 	.word	0x20000f6c

080090c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d2:	4b22      	ldr	r3, [pc, #136]	; (800915c <prvProcessExpiredTimer+0x94>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	3304      	adds	r3, #4
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fd fe8d 	bl	8006e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d022      	beq.n	800913a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	18d1      	adds	r1, r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	6978      	ldr	r0, [r7, #20]
 8009102:	f000 f8d1 	bl	80092a8 <prvInsertTimerInActiveList>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01f      	beq.n	800914c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800910c:	2300      	movs	r3, #0
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2300      	movs	r3, #0
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	2100      	movs	r1, #0
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7ff ff88 	bl	800902c <xTimerGenericCommand>
 800911c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d113      	bne.n	800914c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	60fb      	str	r3, [r7, #12]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	b2da      	uxtb	r2, r3
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	6978      	ldr	r0, [r7, #20]
 8009152:	4798      	blx	r3
}
 8009154:	bf00      	nop
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20000f64 	.word	0x20000f64

08009160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009168:	f107 0308 	add.w	r3, r7, #8
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f857 	bl	8009220 <prvGetNextExpireTime>
 8009172:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4619      	mov	r1, r3
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f803 	bl	8009184 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800917e:	f000 f8d5 	bl	800932c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009182:	e7f1      	b.n	8009168 <prvTimerTask+0x8>

08009184 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800918e:	f7ff f885 	bl	800829c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f866 	bl	8009268 <prvSampleTimeNow>
 800919c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d130      	bne.n	8009206 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <prvProcessTimerOrBlockTask+0x3c>
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d806      	bhi.n	80091c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091b2:	f7ff f881 	bl	80082b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff ff85 	bl	80090c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091be:	e024      	b.n	800920a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d008      	beq.n	80091d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <prvProcessTimerOrBlockTask+0x90>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <prvProcessTimerOrBlockTask+0x50>
 80091d0:	2301      	movs	r3, #1
 80091d2:	e000      	b.n	80091d6 <prvProcessTimerOrBlockTask+0x52>
 80091d4:	2300      	movs	r3, #0
 80091d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091d8:	4b0f      	ldr	r3, [pc, #60]	; (8009218 <prvProcessTimerOrBlockTask+0x94>)
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	4619      	mov	r1, r3
 80091e6:	f7fe fdc9 	bl	8007d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091ea:	f7ff f865 	bl	80082b8 <xTaskResumeAll>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10a      	bne.n	800920a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091f4:	4b09      	ldr	r3, [pc, #36]	; (800921c <prvProcessTimerOrBlockTask+0x98>)
 80091f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	f3bf 8f6f 	isb	sy
}
 8009204:	e001      	b.n	800920a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009206:	f7ff f857 	bl	80082b8 <xTaskResumeAll>
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20000f68 	.word	0x20000f68
 8009218:	20000f6c 	.word	0x20000f6c
 800921c:	e000ed04 	.word	0xe000ed04

08009220 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <prvGetNextExpireTime+0x44>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <prvGetNextExpireTime+0x16>
 8009232:	2201      	movs	r2, #1
 8009234:	e000      	b.n	8009238 <prvGetNextExpireTime+0x18>
 8009236:	2200      	movs	r2, #0
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <prvGetNextExpireTime+0x44>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	e001      	b.n	8009254 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009254:	68fb      	ldr	r3, [r7, #12]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000f64 	.word	0x20000f64

08009268 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009270:	f7ff f8c0 	bl	80083f4 <xTaskGetTickCount>
 8009274:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009276:	4b0b      	ldr	r3, [pc, #44]	; (80092a4 <prvSampleTimeNow+0x3c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	429a      	cmp	r2, r3
 800927e:	d205      	bcs.n	800928c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009280:	f000 f936 	bl	80094f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	e002      	b.n	8009292 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009292:	4a04      	ldr	r2, [pc, #16]	; (80092a4 <prvSampleTimeNow+0x3c>)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009298:	68fb      	ldr	r3, [r7, #12]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000f74 	.word	0x20000f74

080092a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d812      	bhi.n	80092f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	1ad2      	subs	r2, r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d302      	bcc.n	80092e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092dc:	2301      	movs	r3, #1
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	e01b      	b.n	800931a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092e2:	4b10      	ldr	r3, [pc, #64]	; (8009324 <prvInsertTimerInActiveList+0x7c>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3304      	adds	r3, #4
 80092ea:	4619      	mov	r1, r3
 80092ec:	4610      	mov	r0, r2
 80092ee:	f7fd fd4e 	bl	8006d8e <vListInsert>
 80092f2:	e012      	b.n	800931a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d206      	bcs.n	800930a <prvInsertTimerInActiveList+0x62>
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d302      	bcc.n	800930a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009304:	2301      	movs	r3, #1
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e007      	b.n	800931a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800930a:	4b07      	ldr	r3, [pc, #28]	; (8009328 <prvInsertTimerInActiveList+0x80>)
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7fd fd3a 	bl	8006d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800931a:	697b      	ldr	r3, [r7, #20]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000f68 	.word	0x20000f68
 8009328:	20000f64 	.word	0x20000f64

0800932c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08e      	sub	sp, #56	; 0x38
 8009330:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009332:	e0ca      	b.n	80094ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	da18      	bge.n	800936c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800933a:	1d3b      	adds	r3, r7, #4
 800933c:	3304      	adds	r3, #4
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	61fb      	str	r3, [r7, #28]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009362:	6850      	ldr	r0, [r2, #4]
 8009364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009366:	6892      	ldr	r2, [r2, #8]
 8009368:	4611      	mov	r1, r2
 800936a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f2c0 80aa 	blt.w	80094c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	3304      	adds	r3, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f7fd fd3b 	bl	8006e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800938a:	463b      	mov	r3, r7
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff ff6b 	bl	8009268 <prvSampleTimeNow>
 8009392:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b09      	cmp	r3, #9
 8009398:	f200 8097 	bhi.w	80094ca <prvProcessReceivedCommands+0x19e>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <prvProcessReceivedCommands+0x78>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093cd 	.word	0x080093cd
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093cd 	.word	0x080093cd
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009455 	.word	0x08009455
 80093b8:	0800949f 	.word	0x0800949f
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093cd 	.word	0x080093cd
 80093c4:	08009441 	.word	0x08009441
 80093c8:	08009455 	.word	0x08009455
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	18d1      	adds	r1, r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ec:	f7ff ff5c 	bl	80092a8 <prvInsertTimerInActiveList>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d069      	beq.n	80094ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d05e      	beq.n	80094ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	441a      	add	r2, r3
 8009414:	2300      	movs	r3, #0
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	2100      	movs	r1, #0
 800941c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941e:	f7ff fe05 	bl	800902c <xTimerGenericCommand>
 8009422:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d14f      	bne.n	80094ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	61bb      	str	r3, [r7, #24]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009452:	e03a      	b.n	80094ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	b2da      	uxtb	r2, r3
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	617b      	str	r3, [r7, #20]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	699a      	ldr	r2, [r3, #24]
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	18d1      	adds	r1, r2, r3
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009498:	f7ff ff06 	bl	80092a8 <prvInsertTimerInActiveList>
					break;
 800949c:	e015      	b.n	80094ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d103      	bne.n	80094b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80094ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ae:	f000 fbff 	bl	8009cb0 <vPortFree>
 80094b2:	e00a      	b.n	80094ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ba:	f023 0301 	bic.w	r3, r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80094c6:	e000      	b.n	80094ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80094c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094ca:	4b08      	ldr	r3, [pc, #32]	; (80094ec <prvProcessReceivedCommands+0x1c0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	1d39      	adds	r1, r7, #4
 80094d0:	2200      	movs	r2, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe f858 	bl	8007588 <xQueueReceive>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f47f af2a 	bne.w	8009334 <prvProcessReceivedCommands+0x8>
	}
}
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
 80094e4:	3730      	adds	r7, #48	; 0x30
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20000f6c 	.word	0x20000f6c

080094f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094f6:	e048      	b.n	800958a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094f8:	4b2d      	ldr	r3, [pc, #180]	; (80095b0 <prvSwitchTimerLists+0xc0>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009502:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <prvSwitchTimerLists+0xc0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3304      	adds	r3, #4
 8009510:	4618      	mov	r0, r3
 8009512:	f7fd fc75 	bl	8006e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d02e      	beq.n	800958a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	4413      	add	r3, r2
 8009534:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	429a      	cmp	r2, r3
 800953c:	d90e      	bls.n	800955c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800954a:	4b19      	ldr	r3, [pc, #100]	; (80095b0 <prvSwitchTimerLists+0xc0>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fd fc1a 	bl	8006d8e <vListInsert>
 800955a:	e016      	b.n	800958a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800955c:	2300      	movs	r3, #0
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	2300      	movs	r3, #0
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff fd60 	bl	800902c <xTimerGenericCommand>
 800956c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	603b      	str	r3, [r7, #0]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <prvSwitchTimerLists+0xc0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1b1      	bne.n	80094f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009594:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <prvSwitchTimerLists+0xc0>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800959a:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <prvSwitchTimerLists+0xc4>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a04      	ldr	r2, [pc, #16]	; (80095b0 <prvSwitchTimerLists+0xc0>)
 80095a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095a2:	4a04      	ldr	r2, [pc, #16]	; (80095b4 <prvSwitchTimerLists+0xc4>)
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	6013      	str	r3, [r2, #0]
}
 80095a8:	bf00      	nop
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000f64 	.word	0x20000f64
 80095b4:	20000f68 	.word	0x20000f68

080095b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80095be:	f000 f989 	bl	80098d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095c2:	4b15      	ldr	r3, [pc, #84]	; (8009618 <prvCheckForValidListAndQueue+0x60>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d120      	bne.n	800960c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095ca:	4814      	ldr	r0, [pc, #80]	; (800961c <prvCheckForValidListAndQueue+0x64>)
 80095cc:	f7fd fb8e 	bl	8006cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095d0:	4813      	ldr	r0, [pc, #76]	; (8009620 <prvCheckForValidListAndQueue+0x68>)
 80095d2:	f7fd fb8b 	bl	8006cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095d6:	4b13      	ldr	r3, [pc, #76]	; (8009624 <prvCheckForValidListAndQueue+0x6c>)
 80095d8:	4a10      	ldr	r2, [pc, #64]	; (800961c <prvCheckForValidListAndQueue+0x64>)
 80095da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095dc:	4b12      	ldr	r3, [pc, #72]	; (8009628 <prvCheckForValidListAndQueue+0x70>)
 80095de:	4a10      	ldr	r2, [pc, #64]	; (8009620 <prvCheckForValidListAndQueue+0x68>)
 80095e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095e2:	2300      	movs	r3, #0
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	4b11      	ldr	r3, [pc, #68]	; (800962c <prvCheckForValidListAndQueue+0x74>)
 80095e8:	4a11      	ldr	r2, [pc, #68]	; (8009630 <prvCheckForValidListAndQueue+0x78>)
 80095ea:	2110      	movs	r1, #16
 80095ec:	200a      	movs	r0, #10
 80095ee:	f7fd fc99 	bl	8006f24 <xQueueGenericCreateStatic>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4a08      	ldr	r2, [pc, #32]	; (8009618 <prvCheckForValidListAndQueue+0x60>)
 80095f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095f8:	4b07      	ldr	r3, [pc, #28]	; (8009618 <prvCheckForValidListAndQueue+0x60>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <prvCheckForValidListAndQueue+0x60>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	490b      	ldr	r1, [pc, #44]	; (8009634 <prvCheckForValidListAndQueue+0x7c>)
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fb8e 	bl	8007d28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800960c:	f000 f992 	bl	8009934 <vPortExitCritical>
}
 8009610:	bf00      	nop
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20000f6c 	.word	0x20000f6c
 800961c:	20000f3c 	.word	0x20000f3c
 8009620:	20000f50 	.word	0x20000f50
 8009624:	20000f64 	.word	0x20000f64
 8009628:	20000f68 	.word	0x20000f68
 800962c:	20001018 	.word	0x20001018
 8009630:	20000f78 	.word	0x20000f78
 8009634:	0800a9ac 	.word	0x0800a9ac

08009638 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	; 0x28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009646:	f06f 0301 	mvn.w	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <xTimerPendFunctionCallFromISR+0x3c>)
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	f107 0114 	add.w	r1, r7, #20
 8009660:	2300      	movs	r3, #0
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	f7fd fe68 	bl	8007338 <xQueueGenericSendFromISR>
 8009668:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800966c:	4618      	mov	r0, r3
 800966e:	3728      	adds	r7, #40	; 0x28
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20000f6c 	.word	0x20000f6c

08009678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3b04      	subs	r3, #4
 8009688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3b04      	subs	r3, #4
 8009696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f023 0201 	bic.w	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3b04      	subs	r3, #4
 80096a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096a8:	4a0c      	ldr	r2, [pc, #48]	; (80096dc <pxPortInitialiseStack+0x64>)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3b14      	subs	r3, #20
 80096b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3b04      	subs	r3, #4
 80096be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f06f 0202 	mvn.w	r2, #2
 80096c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3b20      	subs	r3, #32
 80096cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ce:	68fb      	ldr	r3, [r7, #12]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	080096e1 	.word	0x080096e1

080096e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096ea:	4b12      	ldr	r3, [pc, #72]	; (8009734 <prvTaskExitError+0x54>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d00a      	beq.n	800970a <prvTaskExitError+0x2a>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	60fb      	str	r3, [r7, #12]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <prvTaskExitError+0x28>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60bb      	str	r3, [r7, #8]
}
 800971c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800971e:	bf00      	nop
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0fc      	beq.n	8009720 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20000010 	.word	0x20000010
	...

08009740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <pxCurrentTCBConst2>)
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	f380 8809 	msr	PSP, r0
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	4770      	bx	lr
 800975c:	f3af 8000 	nop.w

08009760 <pxCurrentTCBConst2>:
 8009760:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009768:	4808      	ldr	r0, [pc, #32]	; (800978c <prvPortStartFirstTask+0x24>)
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f380 8808 	msr	MSP, r0
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8814 	msr	CONTROL, r0
 800977a:	b662      	cpsie	i
 800977c:	b661      	cpsie	f
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	df00      	svc	0
 8009788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800978a:	bf00      	nop
 800978c:	e000ed08 	.word	0xe000ed08

08009790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009796:	4b46      	ldr	r3, [pc, #280]	; (80098b0 <xPortStartScheduler+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a46      	ldr	r2, [pc, #280]	; (80098b4 <xPortStartScheduler+0x124>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10a      	bne.n	80097b6 <xPortStartScheduler+0x26>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	613b      	str	r3, [r7, #16]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097b6:	4b3e      	ldr	r3, [pc, #248]	; (80098b0 <xPortStartScheduler+0x120>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a3f      	ldr	r2, [pc, #252]	; (80098b8 <xPortStartScheduler+0x128>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10a      	bne.n	80097d6 <xPortStartScheduler+0x46>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60fb      	str	r3, [r7, #12]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097d6:	4b39      	ldr	r3, [pc, #228]	; (80098bc <xPortStartScheduler+0x12c>)
 80097d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	4b31      	ldr	r3, [pc, #196]	; (80098c0 <xPortStartScheduler+0x130>)
 80097fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097fe:	4b31      	ldr	r3, [pc, #196]	; (80098c4 <xPortStartScheduler+0x134>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009804:	e009      	b.n	800981a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009806:	4b2f      	ldr	r3, [pc, #188]	; (80098c4 <xPortStartScheduler+0x134>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3b01      	subs	r3, #1
 800980c:	4a2d      	ldr	r2, [pc, #180]	; (80098c4 <xPortStartScheduler+0x134>)
 800980e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d0ef      	beq.n	8009806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009826:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <xPortStartScheduler+0x134>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f1c3 0307 	rsb	r3, r3, #7
 800982e:	2b04      	cmp	r3, #4
 8009830:	d00a      	beq.n	8009848 <xPortStartScheduler+0xb8>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	60bb      	str	r3, [r7, #8]
}
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009848:	4b1e      	ldr	r3, [pc, #120]	; (80098c4 <xPortStartScheduler+0x134>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	021b      	lsls	r3, r3, #8
 800984e:	4a1d      	ldr	r2, [pc, #116]	; (80098c4 <xPortStartScheduler+0x134>)
 8009850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <xPortStartScheduler+0x134>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800985a:	4a1a      	ldr	r2, [pc, #104]	; (80098c4 <xPortStartScheduler+0x134>)
 800985c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	b2da      	uxtb	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009866:	4b18      	ldr	r3, [pc, #96]	; (80098c8 <xPortStartScheduler+0x138>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <xPortStartScheduler+0x138>)
 800986c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009872:	4b15      	ldr	r3, [pc, #84]	; (80098c8 <xPortStartScheduler+0x138>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <xPortStartScheduler+0x138>)
 8009878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800987c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800987e:	f000 f8dd 	bl	8009a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009882:	4b12      	ldr	r3, [pc, #72]	; (80098cc <xPortStartScheduler+0x13c>)
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009888:	f000 f8fc 	bl	8009a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <xPortStartScheduler+0x140>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a0f      	ldr	r2, [pc, #60]	; (80098d0 <xPortStartScheduler+0x140>)
 8009892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009898:	f7ff ff66 	bl	8009768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800989c:	f7fe fe74 	bl	8008588 <vTaskSwitchContext>
	prvTaskExitError();
 80098a0:	f7ff ff1e 	bl	80096e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	e000ed00 	.word	0xe000ed00
 80098b4:	410fc271 	.word	0x410fc271
 80098b8:	410fc270 	.word	0x410fc270
 80098bc:	e000e400 	.word	0xe000e400
 80098c0:	20001068 	.word	0x20001068
 80098c4:	2000106c 	.word	0x2000106c
 80098c8:	e000ed20 	.word	0xe000ed20
 80098cc:	20000010 	.word	0x20000010
 80098d0:	e000ef34 	.word	0xe000ef34

080098d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	607b      	str	r3, [r7, #4]
}
 80098ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <vPortEnterCritical+0x58>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a0d      	ldr	r2, [pc, #52]	; (800992c <vPortEnterCritical+0x58>)
 80098f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <vPortEnterCritical+0x58>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10f      	bne.n	8009920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009900:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <vPortEnterCritical+0x5c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <vPortEnterCritical+0x4c>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	603b      	str	r3, [r7, #0]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <vPortEnterCritical+0x4a>
	}
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20000010 	.word	0x20000010
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800993a:	4b12      	ldr	r3, [pc, #72]	; (8009984 <vPortExitCritical+0x50>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <vPortExitCritical+0x24>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	607b      	str	r3, [r7, #4]
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009958:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <vPortExitCritical+0x50>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3b01      	subs	r3, #1
 800995e:	4a09      	ldr	r2, [pc, #36]	; (8009984 <vPortExitCritical+0x50>)
 8009960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009962:	4b08      	ldr	r3, [pc, #32]	; (8009984 <vPortExitCritical+0x50>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <vPortExitCritical+0x42>
 800996a:	2300      	movs	r3, #0
 800996c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	f383 8811 	msr	BASEPRI, r3
}
 8009974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000010 	.word	0x20000010
	...

08009990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009990:	f3ef 8009 	mrs	r0, PSP
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <pxCurrentTCBConst>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	f01e 0f10 	tst.w	lr, #16
 80099a0:	bf08      	it	eq
 80099a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099b4:	f380 8811 	msr	BASEPRI, r0
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f7fe fde2 	bl	8008588 <vTaskSwitchContext>
 80099c4:	f04f 0000 	mov.w	r0, #0
 80099c8:	f380 8811 	msr	BASEPRI, r0
 80099cc:	bc09      	pop	{r0, r3}
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	6808      	ldr	r0, [r1, #0]
 80099d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d6:	f01e 0f10 	tst.w	lr, #16
 80099da:	bf08      	it	eq
 80099dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099e0:	f380 8809 	msr	PSP, r0
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst>:
 80099f0:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	607b      	str	r3, [r7, #4]
}
 8009a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a12:	f7fe fcff 	bl	8008414 <xTaskIncrementTick>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a1c:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <xPortSysTickHandler+0x40>)
 8009a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	2300      	movs	r3, #0
 8009a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f383 8811 	msr	BASEPRI, r3
}
 8009a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <vPortSetupTimerInterrupt+0x34>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a46:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <vPortSetupTimerInterrupt+0x38>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <vPortSetupTimerInterrupt+0x3c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <vPortSetupTimerInterrupt+0x40>)
 8009a52:	fba2 2303 	umull	r2, r3, r2, r3
 8009a56:	099b      	lsrs	r3, r3, #6
 8009a58:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <vPortSetupTimerInterrupt+0x44>)
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a5e:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <vPortSetupTimerInterrupt+0x34>)
 8009a60:	2207      	movs	r2, #7
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	e000e010 	.word	0xe000e010
 8009a74:	e000e018 	.word	0xe000e018
 8009a78:	20000000 	.word	0x20000000
 8009a7c:	10624dd3 	.word	0x10624dd3
 8009a80:	e000e014 	.word	0xe000e014

08009a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a94 <vPortEnableVFP+0x10>
 8009a88:	6801      	ldr	r1, [r0, #0]
 8009a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a8e:	6001      	str	r1, [r0, #0]
 8009a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a92:	bf00      	nop
 8009a94:	e000ed88 	.word	0xe000ed88

08009a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a9e:	f3ef 8305 	mrs	r3, IPSR
 8009aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b0f      	cmp	r3, #15
 8009aa8:	d914      	bls.n	8009ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009aaa:	4a17      	ldr	r2, [pc, #92]	; (8009b08 <vPortValidateInterruptPriority+0x70>)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ab4:	4b15      	ldr	r3, [pc, #84]	; (8009b0c <vPortValidateInterruptPriority+0x74>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	7afa      	ldrb	r2, [r7, #11]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d20a      	bcs.n	8009ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ad4:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <vPortValidateInterruptPriority+0x78>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <vPortValidateInterruptPriority+0x7c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d90a      	bls.n	8009afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	603b      	str	r3, [r7, #0]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <vPortValidateInterruptPriority+0x60>
	}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	e000e3f0 	.word	0xe000e3f0
 8009b0c:	20001068 	.word	0x20001068
 8009b10:	e000ed0c 	.word	0xe000ed0c
 8009b14:	2000106c 	.word	0x2000106c

08009b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	; 0x28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b24:	f7fe fbba 	bl	800829c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b28:	4b5b      	ldr	r3, [pc, #364]	; (8009c98 <pvPortMalloc+0x180>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b30:	f000 f920 	bl	8009d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b34:	4b59      	ldr	r3, [pc, #356]	; (8009c9c <pvPortMalloc+0x184>)
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 8093 	bne.w	8009c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d01d      	beq.n	8009b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b48:	2208      	movs	r2, #8
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d014      	beq.n	8009b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f023 0307 	bic.w	r3, r3, #7
 8009b60:	3308      	adds	r3, #8
 8009b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <pvPortMalloc+0x6c>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	617b      	str	r3, [r7, #20]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d06e      	beq.n	8009c68 <pvPortMalloc+0x150>
 8009b8a:	4b45      	ldr	r3, [pc, #276]	; (8009ca0 <pvPortMalloc+0x188>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d869      	bhi.n	8009c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b94:	4b43      	ldr	r3, [pc, #268]	; (8009ca4 <pvPortMalloc+0x18c>)
 8009b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b98:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <pvPortMalloc+0x18c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b9e:	e004      	b.n	8009baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d903      	bls.n	8009bbc <pvPortMalloc+0xa4>
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1f1      	bne.n	8009ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bbc:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <pvPortMalloc+0x180>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d050      	beq.n	8009c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2208      	movs	r2, #8
 8009bcc:	4413      	add	r3, r2
 8009bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	2308      	movs	r3, #8
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d91f      	bls.n	8009c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <pvPortMalloc+0xf8>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	613b      	str	r3, [r7, #16]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	1ad2      	subs	r2, r2, r3
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c22:	69b8      	ldr	r0, [r7, #24]
 8009c24:	f000 f908 	bl	8009e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c36:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <pvPortMalloc+0x190>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d203      	bcs.n	8009c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c42:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <pvPortMalloc+0x190>)
 8009c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <pvPortMalloc+0x184>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <pvPortMalloc+0x194>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	4a11      	ldr	r2, [pc, #68]	; (8009cac <pvPortMalloc+0x194>)
 8009c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c68:	f7fe fb26 	bl	80082b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <pvPortMalloc+0x174>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	60fb      	str	r3, [r7, #12]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <pvPortMalloc+0x172>
	return pvReturn;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3728      	adds	r7, #40	; 0x28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	200085a8 	.word	0x200085a8
 8009c9c:	200085bc 	.word	0x200085bc
 8009ca0:	200085ac 	.word	0x200085ac
 8009ca4:	200085a0 	.word	0x200085a0
 8009ca8:	200085b0 	.word	0x200085b0
 8009cac:	200085b4 	.word	0x200085b4

08009cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d04d      	beq.n	8009d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4413      	add	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	4b24      	ldr	r3, [pc, #144]	; (8009d68 <vPortFree+0xb8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <vPortFree+0x44>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	60fb      	str	r3, [r7, #12]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <vPortFree+0x62>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60bb      	str	r3, [r7, #8]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <vPortFree+0xb8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01e      	beq.n	8009d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11a      	bne.n	8009d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <vPortFree+0xb8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	43db      	mvns	r3, r3
 8009d32:	401a      	ands	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d38:	f7fe fab0 	bl	800829c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <vPortFree+0xbc>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4413      	add	r3, r2
 8009d46:	4a09      	ldr	r2, [pc, #36]	; (8009d6c <vPortFree+0xbc>)
 8009d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d4a:	6938      	ldr	r0, [r7, #16]
 8009d4c:	f000 f874 	bl	8009e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <vPortFree+0xc0>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a06      	ldr	r2, [pc, #24]	; (8009d70 <vPortFree+0xc0>)
 8009d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d5a:	f7fe faad 	bl	80082b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d5e:	bf00      	nop
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	200085bc 	.word	0x200085bc
 8009d6c:	200085ac 	.word	0x200085ac
 8009d70:	200085b8 	.word	0x200085b8

08009d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d7a:	f247 5330 	movw	r3, #30000	; 0x7530
 8009d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d80:	4b27      	ldr	r3, [pc, #156]	; (8009e20 <prvHeapInit+0xac>)
 8009d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3307      	adds	r3, #7
 8009d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0307 	bic.w	r3, r3, #7
 8009d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	4a1f      	ldr	r2, [pc, #124]	; (8009e20 <prvHeapInit+0xac>)
 8009da4:	4413      	add	r3, r2
 8009da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dac:	4a1d      	ldr	r2, [pc, #116]	; (8009e24 <prvHeapInit+0xb0>)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <prvHeapInit+0xb0>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <prvHeapInit+0xb4>)
 8009dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <prvHeapInit+0xb4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dde:	4b12      	ldr	r3, [pc, #72]	; (8009e28 <prvHeapInit+0xb4>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009df4:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvHeapInit+0xb4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <prvHeapInit+0xb8>)
 8009e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <prvHeapInit+0xbc>)
 8009e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <prvHeapInit+0xc0>)
 8009e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	20001070 	.word	0x20001070
 8009e24:	200085a0 	.word	0x200085a0
 8009e28:	200085a8 	.word	0x200085a8
 8009e2c:	200085b0 	.word	0x200085b0
 8009e30:	200085ac 	.word	0x200085ac
 8009e34:	200085bc 	.word	0x200085bc

08009e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e40:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <prvInsertBlockIntoFreeList+0xac>)
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e002      	b.n	8009e4c <prvInsertBlockIntoFreeList+0x14>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d8f7      	bhi.n	8009e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4413      	add	r3, r2
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d108      	bne.n	8009e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	441a      	add	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	441a      	add	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d118      	bne.n	8009ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d00d      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e008      	b.n	8009ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e003      	b.n	8009ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d002      	beq.n	8009ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	200085a0 	.word	0x200085a0
 8009ee8:	200085a8 	.word	0x200085a8

08009eec <__errno>:
 8009eec:	4b01      	ldr	r3, [pc, #4]	; (8009ef4 <__errno+0x8>)
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000014 	.word	0x20000014

08009ef8 <__libc_init_array>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	4d0d      	ldr	r5, [pc, #52]	; (8009f30 <__libc_init_array+0x38>)
 8009efc:	4c0d      	ldr	r4, [pc, #52]	; (8009f34 <__libc_init_array+0x3c>)
 8009efe:	1b64      	subs	r4, r4, r5
 8009f00:	10a4      	asrs	r4, r4, #2
 8009f02:	2600      	movs	r6, #0
 8009f04:	42a6      	cmp	r6, r4
 8009f06:	d109      	bne.n	8009f1c <__libc_init_array+0x24>
 8009f08:	4d0b      	ldr	r5, [pc, #44]	; (8009f38 <__libc_init_array+0x40>)
 8009f0a:	4c0c      	ldr	r4, [pc, #48]	; (8009f3c <__libc_init_array+0x44>)
 8009f0c:	f000 fd12 	bl	800a934 <_init>
 8009f10:	1b64      	subs	r4, r4, r5
 8009f12:	10a4      	asrs	r4, r4, #2
 8009f14:	2600      	movs	r6, #0
 8009f16:	42a6      	cmp	r6, r4
 8009f18:	d105      	bne.n	8009f26 <__libc_init_array+0x2e>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f20:	4798      	blx	r3
 8009f22:	3601      	adds	r6, #1
 8009f24:	e7ee      	b.n	8009f04 <__libc_init_array+0xc>
 8009f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2a:	4798      	blx	r3
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	e7f2      	b.n	8009f16 <__libc_init_array+0x1e>
 8009f30:	0800aab8 	.word	0x0800aab8
 8009f34:	0800aab8 	.word	0x0800aab8
 8009f38:	0800aab8 	.word	0x0800aab8
 8009f3c:	0800aabc 	.word	0x0800aabc

08009f40 <__retarget_lock_acquire_recursive>:
 8009f40:	4770      	bx	lr

08009f42 <__retarget_lock_release_recursive>:
 8009f42:	4770      	bx	lr

08009f44 <memcpy>:
 8009f44:	440a      	add	r2, r1
 8009f46:	4291      	cmp	r1, r2
 8009f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f4c:	d100      	bne.n	8009f50 <memcpy+0xc>
 8009f4e:	4770      	bx	lr
 8009f50:	b510      	push	{r4, lr}
 8009f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f5a:	4291      	cmp	r1, r2
 8009f5c:	d1f9      	bne.n	8009f52 <memcpy+0xe>
 8009f5e:	bd10      	pop	{r4, pc}

08009f60 <memset>:
 8009f60:	4402      	add	r2, r0
 8009f62:	4603      	mov	r3, r0
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d100      	bne.n	8009f6a <memset+0xa>
 8009f68:	4770      	bx	lr
 8009f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f6e:	e7f9      	b.n	8009f64 <memset+0x4>

08009f70 <sbrk_aligned>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	4e0e      	ldr	r6, [pc, #56]	; (8009fac <sbrk_aligned+0x3c>)
 8009f74:	460c      	mov	r4, r1
 8009f76:	6831      	ldr	r1, [r6, #0]
 8009f78:	4605      	mov	r5, r0
 8009f7a:	b911      	cbnz	r1, 8009f82 <sbrk_aligned+0x12>
 8009f7c:	f000 f8f6 	bl	800a16c <_sbrk_r>
 8009f80:	6030      	str	r0, [r6, #0]
 8009f82:	4621      	mov	r1, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 f8f1 	bl	800a16c <_sbrk_r>
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	d00a      	beq.n	8009fa4 <sbrk_aligned+0x34>
 8009f8e:	1cc4      	adds	r4, r0, #3
 8009f90:	f024 0403 	bic.w	r4, r4, #3
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d007      	beq.n	8009fa8 <sbrk_aligned+0x38>
 8009f98:	1a21      	subs	r1, r4, r0
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 f8e6 	bl	800a16c <_sbrk_r>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d101      	bne.n	8009fa8 <sbrk_aligned+0x38>
 8009fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	200085c8 	.word	0x200085c8

08009fb0 <_malloc_r>:
 8009fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb4:	1ccd      	adds	r5, r1, #3
 8009fb6:	f025 0503 	bic.w	r5, r5, #3
 8009fba:	3508      	adds	r5, #8
 8009fbc:	2d0c      	cmp	r5, #12
 8009fbe:	bf38      	it	cc
 8009fc0:	250c      	movcc	r5, #12
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	db01      	blt.n	8009fcc <_malloc_r+0x1c>
 8009fc8:	42a9      	cmp	r1, r5
 8009fca:	d905      	bls.n	8009fd8 <_malloc_r+0x28>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	2600      	movs	r6, #0
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	4e2e      	ldr	r6, [pc, #184]	; (800a094 <_malloc_r+0xe4>)
 8009fda:	f000 f911 	bl	800a200 <__malloc_lock>
 8009fde:	6833      	ldr	r3, [r6, #0]
 8009fe0:	461c      	mov	r4, r3
 8009fe2:	bb34      	cbnz	r4, 800a032 <_malloc_r+0x82>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f7ff ffc2 	bl	8009f70 <sbrk_aligned>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	4604      	mov	r4, r0
 8009ff0:	d14d      	bne.n	800a08e <_malloc_r+0xde>
 8009ff2:	6834      	ldr	r4, [r6, #0]
 8009ff4:	4626      	mov	r6, r4
 8009ff6:	2e00      	cmp	r6, #0
 8009ff8:	d140      	bne.n	800a07c <_malloc_r+0xcc>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4638      	mov	r0, r7
 800a000:	eb04 0803 	add.w	r8, r4, r3
 800a004:	f000 f8b2 	bl	800a16c <_sbrk_r>
 800a008:	4580      	cmp	r8, r0
 800a00a:	d13a      	bne.n	800a082 <_malloc_r+0xd2>
 800a00c:	6821      	ldr	r1, [r4, #0]
 800a00e:	3503      	adds	r5, #3
 800a010:	1a6d      	subs	r5, r5, r1
 800a012:	f025 0503 	bic.w	r5, r5, #3
 800a016:	3508      	adds	r5, #8
 800a018:	2d0c      	cmp	r5, #12
 800a01a:	bf38      	it	cc
 800a01c:	250c      	movcc	r5, #12
 800a01e:	4629      	mov	r1, r5
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff ffa5 	bl	8009f70 <sbrk_aligned>
 800a026:	3001      	adds	r0, #1
 800a028:	d02b      	beq.n	800a082 <_malloc_r+0xd2>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	442b      	add	r3, r5
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	e00e      	b.n	800a050 <_malloc_r+0xa0>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	1b52      	subs	r2, r2, r5
 800a036:	d41e      	bmi.n	800a076 <_malloc_r+0xc6>
 800a038:	2a0b      	cmp	r2, #11
 800a03a:	d916      	bls.n	800a06a <_malloc_r+0xba>
 800a03c:	1961      	adds	r1, r4, r5
 800a03e:	42a3      	cmp	r3, r4
 800a040:	6025      	str	r5, [r4, #0]
 800a042:	bf18      	it	ne
 800a044:	6059      	strne	r1, [r3, #4]
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	bf08      	it	eq
 800a04a:	6031      	streq	r1, [r6, #0]
 800a04c:	5162      	str	r2, [r4, r5]
 800a04e:	604b      	str	r3, [r1, #4]
 800a050:	4638      	mov	r0, r7
 800a052:	f104 060b 	add.w	r6, r4, #11
 800a056:	f000 f8d9 	bl	800a20c <__malloc_unlock>
 800a05a:	f026 0607 	bic.w	r6, r6, #7
 800a05e:	1d23      	adds	r3, r4, #4
 800a060:	1af2      	subs	r2, r6, r3
 800a062:	d0b6      	beq.n	8009fd2 <_malloc_r+0x22>
 800a064:	1b9b      	subs	r3, r3, r6
 800a066:	50a3      	str	r3, [r4, r2]
 800a068:	e7b3      	b.n	8009fd2 <_malloc_r+0x22>
 800a06a:	6862      	ldr	r2, [r4, #4]
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	bf0c      	ite	eq
 800a070:	6032      	streq	r2, [r6, #0]
 800a072:	605a      	strne	r2, [r3, #4]
 800a074:	e7ec      	b.n	800a050 <_malloc_r+0xa0>
 800a076:	4623      	mov	r3, r4
 800a078:	6864      	ldr	r4, [r4, #4]
 800a07a:	e7b2      	b.n	8009fe2 <_malloc_r+0x32>
 800a07c:	4634      	mov	r4, r6
 800a07e:	6876      	ldr	r6, [r6, #4]
 800a080:	e7b9      	b.n	8009ff6 <_malloc_r+0x46>
 800a082:	230c      	movs	r3, #12
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	4638      	mov	r0, r7
 800a088:	f000 f8c0 	bl	800a20c <__malloc_unlock>
 800a08c:	e7a1      	b.n	8009fd2 <_malloc_r+0x22>
 800a08e:	6025      	str	r5, [r4, #0]
 800a090:	e7de      	b.n	800a050 <_malloc_r+0xa0>
 800a092:	bf00      	nop
 800a094:	200085c4 	.word	0x200085c4

0800a098 <cleanup_glue>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	6809      	ldr	r1, [r1, #0]
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b109      	cbz	r1, 800a0a6 <cleanup_glue+0xe>
 800a0a2:	f7ff fff9 	bl	800a098 <cleanup_glue>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ae:	f000 b8b3 	b.w	800a218 <_free_r>
	...

0800a0b4 <_reclaim_reent>:
 800a0b4:	4b2c      	ldr	r3, [pc, #176]	; (800a168 <_reclaim_reent+0xb4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	b570      	push	{r4, r5, r6, lr}
 800a0bc:	4604      	mov	r4, r0
 800a0be:	d051      	beq.n	800a164 <_reclaim_reent+0xb0>
 800a0c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a0c2:	b143      	cbz	r3, 800a0d6 <_reclaim_reent+0x22>
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d14a      	bne.n	800a160 <_reclaim_reent+0xac>
 800a0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0cc:	6819      	ldr	r1, [r3, #0]
 800a0ce:	b111      	cbz	r1, 800a0d6 <_reclaim_reent+0x22>
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 f8a1 	bl	800a218 <_free_r>
 800a0d6:	6961      	ldr	r1, [r4, #20]
 800a0d8:	b111      	cbz	r1, 800a0e0 <_reclaim_reent+0x2c>
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 f89c 	bl	800a218 <_free_r>
 800a0e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0e2:	b111      	cbz	r1, 800a0ea <_reclaim_reent+0x36>
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f000 f897 	bl	800a218 <_free_r>
 800a0ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a0ec:	b111      	cbz	r1, 800a0f4 <_reclaim_reent+0x40>
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 f892 	bl	800a218 <_free_r>
 800a0f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a0f6:	b111      	cbz	r1, 800a0fe <_reclaim_reent+0x4a>
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 f88d 	bl	800a218 <_free_r>
 800a0fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a100:	b111      	cbz	r1, 800a108 <_reclaim_reent+0x54>
 800a102:	4620      	mov	r0, r4
 800a104:	f000 f888 	bl	800a218 <_free_r>
 800a108:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a10a:	b111      	cbz	r1, 800a112 <_reclaim_reent+0x5e>
 800a10c:	4620      	mov	r0, r4
 800a10e:	f000 f883 	bl	800a218 <_free_r>
 800a112:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a114:	b111      	cbz	r1, 800a11c <_reclaim_reent+0x68>
 800a116:	4620      	mov	r0, r4
 800a118:	f000 f87e 	bl	800a218 <_free_r>
 800a11c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11e:	b111      	cbz	r1, 800a126 <_reclaim_reent+0x72>
 800a120:	4620      	mov	r0, r4
 800a122:	f000 f879 	bl	800a218 <_free_r>
 800a126:	69a3      	ldr	r3, [r4, #24]
 800a128:	b1e3      	cbz	r3, 800a164 <_reclaim_reent+0xb0>
 800a12a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a12c:	4620      	mov	r0, r4
 800a12e:	4798      	blx	r3
 800a130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a132:	b1b9      	cbz	r1, 800a164 <_reclaim_reent+0xb0>
 800a134:	4620      	mov	r0, r4
 800a136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a13a:	f7ff bfad 	b.w	800a098 <cleanup_glue>
 800a13e:	5949      	ldr	r1, [r1, r5]
 800a140:	b941      	cbnz	r1, 800a154 <_reclaim_reent+0xa0>
 800a142:	3504      	adds	r5, #4
 800a144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a146:	2d80      	cmp	r5, #128	; 0x80
 800a148:	68d9      	ldr	r1, [r3, #12]
 800a14a:	d1f8      	bne.n	800a13e <_reclaim_reent+0x8a>
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f863 	bl	800a218 <_free_r>
 800a152:	e7ba      	b.n	800a0ca <_reclaim_reent+0x16>
 800a154:	680e      	ldr	r6, [r1, #0]
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f85e 	bl	800a218 <_free_r>
 800a15c:	4631      	mov	r1, r6
 800a15e:	e7ef      	b.n	800a140 <_reclaim_reent+0x8c>
 800a160:	2500      	movs	r5, #0
 800a162:	e7ef      	b.n	800a144 <_reclaim_reent+0x90>
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	bf00      	nop
 800a168:	20000014 	.word	0x20000014

0800a16c <_sbrk_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d06      	ldr	r5, [pc, #24]	; (800a188 <_sbrk_r+0x1c>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	f7f7 f816 	bl	80011a8 <_sbrk>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_sbrk_r+0x1a>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_sbrk_r+0x1a>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	200085cc 	.word	0x200085cc

0800a18c <_vsniprintf_r>:
 800a18c:	b530      	push	{r4, r5, lr}
 800a18e:	4614      	mov	r4, r2
 800a190:	2c00      	cmp	r4, #0
 800a192:	b09b      	sub	sp, #108	; 0x6c
 800a194:	4605      	mov	r5, r0
 800a196:	461a      	mov	r2, r3
 800a198:	da05      	bge.n	800a1a6 <_vsniprintf_r+0x1a>
 800a19a:	238b      	movs	r3, #139	; 0x8b
 800a19c:	6003      	str	r3, [r0, #0]
 800a19e:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a2:	b01b      	add	sp, #108	; 0x6c
 800a1a4:	bd30      	pop	{r4, r5, pc}
 800a1a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a1aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a1ae:	bf14      	ite	ne
 800a1b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1b4:	4623      	moveq	r3, r4
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1be:	9100      	str	r1, [sp, #0]
 800a1c0:	9104      	str	r1, [sp, #16]
 800a1c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a1c6:	4669      	mov	r1, sp
 800a1c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1ca:	f000 f8cd 	bl	800a368 <_svfiprintf_r>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	bfbc      	itt	lt
 800a1d2:	238b      	movlt	r3, #139	; 0x8b
 800a1d4:	602b      	strlt	r3, [r5, #0]
 800a1d6:	2c00      	cmp	r4, #0
 800a1d8:	d0e3      	beq.n	800a1a2 <_vsniprintf_r+0x16>
 800a1da:	9b00      	ldr	r3, [sp, #0]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
 800a1e0:	e7df      	b.n	800a1a2 <_vsniprintf_r+0x16>
	...

0800a1e4 <vsniprintf>:
 800a1e4:	b507      	push	{r0, r1, r2, lr}
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	460a      	mov	r2, r1
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	4803      	ldr	r0, [pc, #12]	; (800a1fc <vsniprintf+0x18>)
 800a1f0:	6800      	ldr	r0, [r0, #0]
 800a1f2:	f7ff ffcb 	bl	800a18c <_vsniprintf_r>
 800a1f6:	b003      	add	sp, #12
 800a1f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1fc:	20000014 	.word	0x20000014

0800a200 <__malloc_lock>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__malloc_lock+0x8>)
 800a202:	f7ff be9d 	b.w	8009f40 <__retarget_lock_acquire_recursive>
 800a206:	bf00      	nop
 800a208:	200085c0 	.word	0x200085c0

0800a20c <__malloc_unlock>:
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <__malloc_unlock+0x8>)
 800a20e:	f7ff be98 	b.w	8009f42 <__retarget_lock_release_recursive>
 800a212:	bf00      	nop
 800a214:	200085c0 	.word	0x200085c0

0800a218 <_free_r>:
 800a218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a21a:	2900      	cmp	r1, #0
 800a21c:	d044      	beq.n	800a2a8 <_free_r+0x90>
 800a21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a222:	9001      	str	r0, [sp, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f1a1 0404 	sub.w	r4, r1, #4
 800a22a:	bfb8      	it	lt
 800a22c:	18e4      	addlt	r4, r4, r3
 800a22e:	f7ff ffe7 	bl	800a200 <__malloc_lock>
 800a232:	4a1e      	ldr	r2, [pc, #120]	; (800a2ac <_free_r+0x94>)
 800a234:	9801      	ldr	r0, [sp, #4]
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	b933      	cbnz	r3, 800a248 <_free_r+0x30>
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	6014      	str	r4, [r2, #0]
 800a23e:	b003      	add	sp, #12
 800a240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a244:	f7ff bfe2 	b.w	800a20c <__malloc_unlock>
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d908      	bls.n	800a25e <_free_r+0x46>
 800a24c:	6825      	ldr	r5, [r4, #0]
 800a24e:	1961      	adds	r1, r4, r5
 800a250:	428b      	cmp	r3, r1
 800a252:	bf01      	itttt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	1949      	addeq	r1, r1, r5
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	e7ed      	b.n	800a23a <_free_r+0x22>
 800a25e:	461a      	mov	r2, r3
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b10b      	cbz	r3, 800a268 <_free_r+0x50>
 800a264:	42a3      	cmp	r3, r4
 800a266:	d9fa      	bls.n	800a25e <_free_r+0x46>
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	1855      	adds	r5, r2, r1
 800a26c:	42a5      	cmp	r5, r4
 800a26e:	d10b      	bne.n	800a288 <_free_r+0x70>
 800a270:	6824      	ldr	r4, [r4, #0]
 800a272:	4421      	add	r1, r4
 800a274:	1854      	adds	r4, r2, r1
 800a276:	42a3      	cmp	r3, r4
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	d1e0      	bne.n	800a23e <_free_r+0x26>
 800a27c:	681c      	ldr	r4, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	6053      	str	r3, [r2, #4]
 800a282:	4421      	add	r1, r4
 800a284:	6011      	str	r1, [r2, #0]
 800a286:	e7da      	b.n	800a23e <_free_r+0x26>
 800a288:	d902      	bls.n	800a290 <_free_r+0x78>
 800a28a:	230c      	movs	r3, #12
 800a28c:	6003      	str	r3, [r0, #0]
 800a28e:	e7d6      	b.n	800a23e <_free_r+0x26>
 800a290:	6825      	ldr	r5, [r4, #0]
 800a292:	1961      	adds	r1, r4, r5
 800a294:	428b      	cmp	r3, r1
 800a296:	bf04      	itt	eq
 800a298:	6819      	ldreq	r1, [r3, #0]
 800a29a:	685b      	ldreq	r3, [r3, #4]
 800a29c:	6063      	str	r3, [r4, #4]
 800a29e:	bf04      	itt	eq
 800a2a0:	1949      	addeq	r1, r1, r5
 800a2a2:	6021      	streq	r1, [r4, #0]
 800a2a4:	6054      	str	r4, [r2, #4]
 800a2a6:	e7ca      	b.n	800a23e <_free_r+0x26>
 800a2a8:	b003      	add	sp, #12
 800a2aa:	bd30      	pop	{r4, r5, pc}
 800a2ac:	200085c4 	.word	0x200085c4

0800a2b0 <__ssputs_r>:
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	688e      	ldr	r6, [r1, #8]
 800a2b6:	429e      	cmp	r6, r3
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	4690      	mov	r8, r2
 800a2be:	461f      	mov	r7, r3
 800a2c0:	d838      	bhi.n	800a334 <__ssputs_r+0x84>
 800a2c2:	898a      	ldrh	r2, [r1, #12]
 800a2c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2c8:	d032      	beq.n	800a330 <__ssputs_r+0x80>
 800a2ca:	6825      	ldr	r5, [r4, #0]
 800a2cc:	6909      	ldr	r1, [r1, #16]
 800a2ce:	eba5 0901 	sub.w	r9, r5, r1
 800a2d2:	6965      	ldr	r5, [r4, #20]
 800a2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2dc:	3301      	adds	r3, #1
 800a2de:	444b      	add	r3, r9
 800a2e0:	106d      	asrs	r5, r5, #1
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	bf38      	it	cc
 800a2e6:	461d      	movcc	r5, r3
 800a2e8:	0553      	lsls	r3, r2, #21
 800a2ea:	d531      	bpl.n	800a350 <__ssputs_r+0xa0>
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f7ff fe5f 	bl	8009fb0 <_malloc_r>
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	b950      	cbnz	r0, 800a30c <__ssputs_r+0x5c>
 800a2f6:	230c      	movs	r3, #12
 800a2f8:	f8ca 3000 	str.w	r3, [sl]
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a302:	81a3      	strh	r3, [r4, #12]
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30c:	6921      	ldr	r1, [r4, #16]
 800a30e:	464a      	mov	r2, r9
 800a310:	f7ff fe18 	bl	8009f44 <memcpy>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	6126      	str	r6, [r4, #16]
 800a322:	6165      	str	r5, [r4, #20]
 800a324:	444e      	add	r6, r9
 800a326:	eba5 0509 	sub.w	r5, r5, r9
 800a32a:	6026      	str	r6, [r4, #0]
 800a32c:	60a5      	str	r5, [r4, #8]
 800a32e:	463e      	mov	r6, r7
 800a330:	42be      	cmp	r6, r7
 800a332:	d900      	bls.n	800a336 <__ssputs_r+0x86>
 800a334:	463e      	mov	r6, r7
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	4632      	mov	r2, r6
 800a33a:	4641      	mov	r1, r8
 800a33c:	f000 faa8 	bl	800a890 <memmove>
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	1b9b      	subs	r3, r3, r6
 800a344:	60a3      	str	r3, [r4, #8]
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	4433      	add	r3, r6
 800a34a:	6023      	str	r3, [r4, #0]
 800a34c:	2000      	movs	r0, #0
 800a34e:	e7db      	b.n	800a308 <__ssputs_r+0x58>
 800a350:	462a      	mov	r2, r5
 800a352:	f000 fab7 	bl	800a8c4 <_realloc_r>
 800a356:	4606      	mov	r6, r0
 800a358:	2800      	cmp	r0, #0
 800a35a:	d1e1      	bne.n	800a320 <__ssputs_r+0x70>
 800a35c:	6921      	ldr	r1, [r4, #16]
 800a35e:	4650      	mov	r0, sl
 800a360:	f7ff ff5a 	bl	800a218 <_free_r>
 800a364:	e7c7      	b.n	800a2f6 <__ssputs_r+0x46>
	...

0800a368 <_svfiprintf_r>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	4698      	mov	r8, r3
 800a36e:	898b      	ldrh	r3, [r1, #12]
 800a370:	061b      	lsls	r3, r3, #24
 800a372:	b09d      	sub	sp, #116	; 0x74
 800a374:	4607      	mov	r7, r0
 800a376:	460d      	mov	r5, r1
 800a378:	4614      	mov	r4, r2
 800a37a:	d50e      	bpl.n	800a39a <_svfiprintf_r+0x32>
 800a37c:	690b      	ldr	r3, [r1, #16]
 800a37e:	b963      	cbnz	r3, 800a39a <_svfiprintf_r+0x32>
 800a380:	2140      	movs	r1, #64	; 0x40
 800a382:	f7ff fe15 	bl	8009fb0 <_malloc_r>
 800a386:	6028      	str	r0, [r5, #0]
 800a388:	6128      	str	r0, [r5, #16]
 800a38a:	b920      	cbnz	r0, 800a396 <_svfiprintf_r+0x2e>
 800a38c:	230c      	movs	r3, #12
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	e0d1      	b.n	800a53a <_svfiprintf_r+0x1d2>
 800a396:	2340      	movs	r3, #64	; 0x40
 800a398:	616b      	str	r3, [r5, #20]
 800a39a:	2300      	movs	r3, #0
 800a39c:	9309      	str	r3, [sp, #36]	; 0x24
 800a39e:	2320      	movs	r3, #32
 800a3a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3a8:	2330      	movs	r3, #48	; 0x30
 800a3aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a554 <_svfiprintf_r+0x1ec>
 800a3ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b2:	f04f 0901 	mov.w	r9, #1
 800a3b6:	4623      	mov	r3, r4
 800a3b8:	469a      	mov	sl, r3
 800a3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3be:	b10a      	cbz	r2, 800a3c4 <_svfiprintf_r+0x5c>
 800a3c0:	2a25      	cmp	r2, #37	; 0x25
 800a3c2:	d1f9      	bne.n	800a3b8 <_svfiprintf_r+0x50>
 800a3c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3c8:	d00b      	beq.n	800a3e2 <_svfiprintf_r+0x7a>
 800a3ca:	465b      	mov	r3, fp
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7ff ff6d 	bl	800a2b0 <__ssputs_r>
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f000 80aa 	beq.w	800a530 <_svfiprintf_r+0x1c8>
 800a3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3de:	445a      	add	r2, fp
 800a3e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80a2 	beq.w	800a530 <_svfiprintf_r+0x1c8>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f6:	f10a 0a01 	add.w	sl, sl, #1
 800a3fa:	9304      	str	r3, [sp, #16]
 800a3fc:	9307      	str	r3, [sp, #28]
 800a3fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a402:	931a      	str	r3, [sp, #104]	; 0x68
 800a404:	4654      	mov	r4, sl
 800a406:	2205      	movs	r2, #5
 800a408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40c:	4851      	ldr	r0, [pc, #324]	; (800a554 <_svfiprintf_r+0x1ec>)
 800a40e:	f7f5 ff07 	bl	8000220 <memchr>
 800a412:	9a04      	ldr	r2, [sp, #16]
 800a414:	b9d8      	cbnz	r0, 800a44e <_svfiprintf_r+0xe6>
 800a416:	06d0      	lsls	r0, r2, #27
 800a418:	bf44      	itt	mi
 800a41a:	2320      	movmi	r3, #32
 800a41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a420:	0711      	lsls	r1, r2, #28
 800a422:	bf44      	itt	mi
 800a424:	232b      	movmi	r3, #43	; 0x2b
 800a426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a42a:	f89a 3000 	ldrb.w	r3, [sl]
 800a42e:	2b2a      	cmp	r3, #42	; 0x2a
 800a430:	d015      	beq.n	800a45e <_svfiprintf_r+0xf6>
 800a432:	9a07      	ldr	r2, [sp, #28]
 800a434:	4654      	mov	r4, sl
 800a436:	2000      	movs	r0, #0
 800a438:	f04f 0c0a 	mov.w	ip, #10
 800a43c:	4621      	mov	r1, r4
 800a43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a442:	3b30      	subs	r3, #48	; 0x30
 800a444:	2b09      	cmp	r3, #9
 800a446:	d94e      	bls.n	800a4e6 <_svfiprintf_r+0x17e>
 800a448:	b1b0      	cbz	r0, 800a478 <_svfiprintf_r+0x110>
 800a44a:	9207      	str	r2, [sp, #28]
 800a44c:	e014      	b.n	800a478 <_svfiprintf_r+0x110>
 800a44e:	eba0 0308 	sub.w	r3, r0, r8
 800a452:	fa09 f303 	lsl.w	r3, r9, r3
 800a456:	4313      	orrs	r3, r2
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	46a2      	mov	sl, r4
 800a45c:	e7d2      	b.n	800a404 <_svfiprintf_r+0x9c>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	1d19      	adds	r1, r3, #4
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	9103      	str	r1, [sp, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	bfbb      	ittet	lt
 800a46a:	425b      	neglt	r3, r3
 800a46c:	f042 0202 	orrlt.w	r2, r2, #2
 800a470:	9307      	strge	r3, [sp, #28]
 800a472:	9307      	strlt	r3, [sp, #28]
 800a474:	bfb8      	it	lt
 800a476:	9204      	strlt	r2, [sp, #16]
 800a478:	7823      	ldrb	r3, [r4, #0]
 800a47a:	2b2e      	cmp	r3, #46	; 0x2e
 800a47c:	d10c      	bne.n	800a498 <_svfiprintf_r+0x130>
 800a47e:	7863      	ldrb	r3, [r4, #1]
 800a480:	2b2a      	cmp	r3, #42	; 0x2a
 800a482:	d135      	bne.n	800a4f0 <_svfiprintf_r+0x188>
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	1d1a      	adds	r2, r3, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	9203      	str	r2, [sp, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfb8      	it	lt
 800a490:	f04f 33ff 	movlt.w	r3, #4294967295
 800a494:	3402      	adds	r4, #2
 800a496:	9305      	str	r3, [sp, #20]
 800a498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a564 <_svfiprintf_r+0x1fc>
 800a49c:	7821      	ldrb	r1, [r4, #0]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	4650      	mov	r0, sl
 800a4a2:	f7f5 febd 	bl	8000220 <memchr>
 800a4a6:	b140      	cbz	r0, 800a4ba <_svfiprintf_r+0x152>
 800a4a8:	2340      	movs	r3, #64	; 0x40
 800a4aa:	eba0 000a 	sub.w	r0, r0, sl
 800a4ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b2:	9b04      	ldr	r3, [sp, #16]
 800a4b4:	4303      	orrs	r3, r0
 800a4b6:	3401      	adds	r4, #1
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4be:	4826      	ldr	r0, [pc, #152]	; (800a558 <_svfiprintf_r+0x1f0>)
 800a4c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c4:	2206      	movs	r2, #6
 800a4c6:	f7f5 feab 	bl	8000220 <memchr>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d038      	beq.n	800a540 <_svfiprintf_r+0x1d8>
 800a4ce:	4b23      	ldr	r3, [pc, #140]	; (800a55c <_svfiprintf_r+0x1f4>)
 800a4d0:	bb1b      	cbnz	r3, 800a51a <_svfiprintf_r+0x1b2>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	3307      	adds	r3, #7
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	3308      	adds	r3, #8
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	4433      	add	r3, r6
 800a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e4:	e767      	b.n	800a3b6 <_svfiprintf_r+0x4e>
 800a4e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	e7a5      	b.n	800a43c <_svfiprintf_r+0xd4>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	9305      	str	r3, [sp, #20]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	f04f 0c0a 	mov.w	ip, #10
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a502:	3a30      	subs	r2, #48	; 0x30
 800a504:	2a09      	cmp	r2, #9
 800a506:	d903      	bls.n	800a510 <_svfiprintf_r+0x1a8>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0c5      	beq.n	800a498 <_svfiprintf_r+0x130>
 800a50c:	9105      	str	r1, [sp, #20]
 800a50e:	e7c3      	b.n	800a498 <_svfiprintf_r+0x130>
 800a510:	fb0c 2101 	mla	r1, ip, r1, r2
 800a514:	4604      	mov	r4, r0
 800a516:	2301      	movs	r3, #1
 800a518:	e7f0      	b.n	800a4fc <_svfiprintf_r+0x194>
 800a51a:	ab03      	add	r3, sp, #12
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	462a      	mov	r2, r5
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <_svfiprintf_r+0x1f8>)
 800a522:	a904      	add	r1, sp, #16
 800a524:	4638      	mov	r0, r7
 800a526:	f3af 8000 	nop.w
 800a52a:	1c42      	adds	r2, r0, #1
 800a52c:	4606      	mov	r6, r0
 800a52e:	d1d6      	bne.n	800a4de <_svfiprintf_r+0x176>
 800a530:	89ab      	ldrh	r3, [r5, #12]
 800a532:	065b      	lsls	r3, r3, #25
 800a534:	f53f af2c 	bmi.w	800a390 <_svfiprintf_r+0x28>
 800a538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a53a:	b01d      	add	sp, #116	; 0x74
 800a53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a540:	ab03      	add	r3, sp, #12
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	462a      	mov	r2, r5
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <_svfiprintf_r+0x1f8>)
 800a548:	a904      	add	r1, sp, #16
 800a54a:	4638      	mov	r0, r7
 800a54c:	f000 f87a 	bl	800a644 <_printf_i>
 800a550:	e7eb      	b.n	800a52a <_svfiprintf_r+0x1c2>
 800a552:	bf00      	nop
 800a554:	0800aa7c 	.word	0x0800aa7c
 800a558:	0800aa86 	.word	0x0800aa86
 800a55c:	00000000 	.word	0x00000000
 800a560:	0800a2b1 	.word	0x0800a2b1
 800a564:	0800aa82 	.word	0x0800aa82

0800a568 <_printf_common>:
 800a568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a56c:	4616      	mov	r6, r2
 800a56e:	4699      	mov	r9, r3
 800a570:	688a      	ldr	r2, [r1, #8]
 800a572:	690b      	ldr	r3, [r1, #16]
 800a574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a578:	4293      	cmp	r3, r2
 800a57a:	bfb8      	it	lt
 800a57c:	4613      	movlt	r3, r2
 800a57e:	6033      	str	r3, [r6, #0]
 800a580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a584:	4607      	mov	r7, r0
 800a586:	460c      	mov	r4, r1
 800a588:	b10a      	cbz	r2, 800a58e <_printf_common+0x26>
 800a58a:	3301      	adds	r3, #1
 800a58c:	6033      	str	r3, [r6, #0]
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	0699      	lsls	r1, r3, #26
 800a592:	bf42      	ittt	mi
 800a594:	6833      	ldrmi	r3, [r6, #0]
 800a596:	3302      	addmi	r3, #2
 800a598:	6033      	strmi	r3, [r6, #0]
 800a59a:	6825      	ldr	r5, [r4, #0]
 800a59c:	f015 0506 	ands.w	r5, r5, #6
 800a5a0:	d106      	bne.n	800a5b0 <_printf_common+0x48>
 800a5a2:	f104 0a19 	add.w	sl, r4, #25
 800a5a6:	68e3      	ldr	r3, [r4, #12]
 800a5a8:	6832      	ldr	r2, [r6, #0]
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	42ab      	cmp	r3, r5
 800a5ae:	dc26      	bgt.n	800a5fe <_printf_common+0x96>
 800a5b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5b4:	1e13      	subs	r3, r2, #0
 800a5b6:	6822      	ldr	r2, [r4, #0]
 800a5b8:	bf18      	it	ne
 800a5ba:	2301      	movne	r3, #1
 800a5bc:	0692      	lsls	r2, r2, #26
 800a5be:	d42b      	bmi.n	800a618 <_printf_common+0xb0>
 800a5c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	47c0      	blx	r8
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d01e      	beq.n	800a60c <_printf_common+0xa4>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	68e5      	ldr	r5, [r4, #12]
 800a5d2:	6832      	ldr	r2, [r6, #0]
 800a5d4:	f003 0306 	and.w	r3, r3, #6
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	bf08      	it	eq
 800a5dc:	1aad      	subeq	r5, r5, r2
 800a5de:	68a3      	ldr	r3, [r4, #8]
 800a5e0:	6922      	ldr	r2, [r4, #16]
 800a5e2:	bf0c      	ite	eq
 800a5e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e8:	2500      	movne	r5, #0
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	bfc4      	itt	gt
 800a5ee:	1a9b      	subgt	r3, r3, r2
 800a5f0:	18ed      	addgt	r5, r5, r3
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	341a      	adds	r4, #26
 800a5f6:	42b5      	cmp	r5, r6
 800a5f8:	d11a      	bne.n	800a630 <_printf_common+0xc8>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e008      	b.n	800a610 <_printf_common+0xa8>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4652      	mov	r2, sl
 800a602:	4649      	mov	r1, r9
 800a604:	4638      	mov	r0, r7
 800a606:	47c0      	blx	r8
 800a608:	3001      	adds	r0, #1
 800a60a:	d103      	bne.n	800a614 <_printf_common+0xac>
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	3501      	adds	r5, #1
 800a616:	e7c6      	b.n	800a5a6 <_printf_common+0x3e>
 800a618:	18e1      	adds	r1, r4, r3
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	2030      	movs	r0, #48	; 0x30
 800a61e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a622:	4422      	add	r2, r4
 800a624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a62c:	3302      	adds	r3, #2
 800a62e:	e7c7      	b.n	800a5c0 <_printf_common+0x58>
 800a630:	2301      	movs	r3, #1
 800a632:	4622      	mov	r2, r4
 800a634:	4649      	mov	r1, r9
 800a636:	4638      	mov	r0, r7
 800a638:	47c0      	blx	r8
 800a63a:	3001      	adds	r0, #1
 800a63c:	d0e6      	beq.n	800a60c <_printf_common+0xa4>
 800a63e:	3601      	adds	r6, #1
 800a640:	e7d9      	b.n	800a5f6 <_printf_common+0x8e>
	...

0800a644 <_printf_i>:
 800a644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	7e0f      	ldrb	r7, [r1, #24]
 800a64a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a64c:	2f78      	cmp	r7, #120	; 0x78
 800a64e:	4691      	mov	r9, r2
 800a650:	4680      	mov	r8, r0
 800a652:	460c      	mov	r4, r1
 800a654:	469a      	mov	sl, r3
 800a656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a65a:	d807      	bhi.n	800a66c <_printf_i+0x28>
 800a65c:	2f62      	cmp	r7, #98	; 0x62
 800a65e:	d80a      	bhi.n	800a676 <_printf_i+0x32>
 800a660:	2f00      	cmp	r7, #0
 800a662:	f000 80d8 	beq.w	800a816 <_printf_i+0x1d2>
 800a666:	2f58      	cmp	r7, #88	; 0x58
 800a668:	f000 80a3 	beq.w	800a7b2 <_printf_i+0x16e>
 800a66c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a674:	e03a      	b.n	800a6ec <_printf_i+0xa8>
 800a676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a67a:	2b15      	cmp	r3, #21
 800a67c:	d8f6      	bhi.n	800a66c <_printf_i+0x28>
 800a67e:	a101      	add	r1, pc, #4	; (adr r1, 800a684 <_printf_i+0x40>)
 800a680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a684:	0800a6dd 	.word	0x0800a6dd
 800a688:	0800a6f1 	.word	0x0800a6f1
 800a68c:	0800a66d 	.word	0x0800a66d
 800a690:	0800a66d 	.word	0x0800a66d
 800a694:	0800a66d 	.word	0x0800a66d
 800a698:	0800a66d 	.word	0x0800a66d
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a66d 	.word	0x0800a66d
 800a6a4:	0800a66d 	.word	0x0800a66d
 800a6a8:	0800a66d 	.word	0x0800a66d
 800a6ac:	0800a66d 	.word	0x0800a66d
 800a6b0:	0800a7fd 	.word	0x0800a7fd
 800a6b4:	0800a721 	.word	0x0800a721
 800a6b8:	0800a7df 	.word	0x0800a7df
 800a6bc:	0800a66d 	.word	0x0800a66d
 800a6c0:	0800a66d 	.word	0x0800a66d
 800a6c4:	0800a81f 	.word	0x0800a81f
 800a6c8:	0800a66d 	.word	0x0800a66d
 800a6cc:	0800a721 	.word	0x0800a721
 800a6d0:	0800a66d 	.word	0x0800a66d
 800a6d4:	0800a66d 	.word	0x0800a66d
 800a6d8:	0800a7e7 	.word	0x0800a7e7
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	602a      	str	r2, [r5, #0]
 800a6e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e0a3      	b.n	800a838 <_printf_i+0x1f4>
 800a6f0:	6820      	ldr	r0, [r4, #0]
 800a6f2:	6829      	ldr	r1, [r5, #0]
 800a6f4:	0606      	lsls	r6, r0, #24
 800a6f6:	f101 0304 	add.w	r3, r1, #4
 800a6fa:	d50a      	bpl.n	800a712 <_printf_i+0xce>
 800a6fc:	680e      	ldr	r6, [r1, #0]
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	2e00      	cmp	r6, #0
 800a702:	da03      	bge.n	800a70c <_printf_i+0xc8>
 800a704:	232d      	movs	r3, #45	; 0x2d
 800a706:	4276      	negs	r6, r6
 800a708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a70c:	485e      	ldr	r0, [pc, #376]	; (800a888 <_printf_i+0x244>)
 800a70e:	230a      	movs	r3, #10
 800a710:	e019      	b.n	800a746 <_printf_i+0x102>
 800a712:	680e      	ldr	r6, [r1, #0]
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a71a:	bf18      	it	ne
 800a71c:	b236      	sxthne	r6, r6
 800a71e:	e7ef      	b.n	800a700 <_printf_i+0xbc>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	6820      	ldr	r0, [r4, #0]
 800a724:	1d19      	adds	r1, r3, #4
 800a726:	6029      	str	r1, [r5, #0]
 800a728:	0601      	lsls	r1, r0, #24
 800a72a:	d501      	bpl.n	800a730 <_printf_i+0xec>
 800a72c:	681e      	ldr	r6, [r3, #0]
 800a72e:	e002      	b.n	800a736 <_printf_i+0xf2>
 800a730:	0646      	lsls	r6, r0, #25
 800a732:	d5fb      	bpl.n	800a72c <_printf_i+0xe8>
 800a734:	881e      	ldrh	r6, [r3, #0]
 800a736:	4854      	ldr	r0, [pc, #336]	; (800a888 <_printf_i+0x244>)
 800a738:	2f6f      	cmp	r7, #111	; 0x6f
 800a73a:	bf0c      	ite	eq
 800a73c:	2308      	moveq	r3, #8
 800a73e:	230a      	movne	r3, #10
 800a740:	2100      	movs	r1, #0
 800a742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a746:	6865      	ldr	r5, [r4, #4]
 800a748:	60a5      	str	r5, [r4, #8]
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	bfa2      	ittt	ge
 800a74e:	6821      	ldrge	r1, [r4, #0]
 800a750:	f021 0104 	bicge.w	r1, r1, #4
 800a754:	6021      	strge	r1, [r4, #0]
 800a756:	b90e      	cbnz	r6, 800a75c <_printf_i+0x118>
 800a758:	2d00      	cmp	r5, #0
 800a75a:	d04d      	beq.n	800a7f8 <_printf_i+0x1b4>
 800a75c:	4615      	mov	r5, r2
 800a75e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a762:	fb03 6711 	mls	r7, r3, r1, r6
 800a766:	5dc7      	ldrb	r7, [r0, r7]
 800a768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a76c:	4637      	mov	r7, r6
 800a76e:	42bb      	cmp	r3, r7
 800a770:	460e      	mov	r6, r1
 800a772:	d9f4      	bls.n	800a75e <_printf_i+0x11a>
 800a774:	2b08      	cmp	r3, #8
 800a776:	d10b      	bne.n	800a790 <_printf_i+0x14c>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	07de      	lsls	r6, r3, #31
 800a77c:	d508      	bpl.n	800a790 <_printf_i+0x14c>
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	6861      	ldr	r1, [r4, #4]
 800a782:	4299      	cmp	r1, r3
 800a784:	bfde      	ittt	le
 800a786:	2330      	movle	r3, #48	; 0x30
 800a788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a78c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a790:	1b52      	subs	r2, r2, r5
 800a792:	6122      	str	r2, [r4, #16]
 800a794:	f8cd a000 	str.w	sl, [sp]
 800a798:	464b      	mov	r3, r9
 800a79a:	aa03      	add	r2, sp, #12
 800a79c:	4621      	mov	r1, r4
 800a79e:	4640      	mov	r0, r8
 800a7a0:	f7ff fee2 	bl	800a568 <_printf_common>
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d14c      	bne.n	800a842 <_printf_i+0x1fe>
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	b004      	add	sp, #16
 800a7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b2:	4835      	ldr	r0, [pc, #212]	; (800a888 <_printf_i+0x244>)
 800a7b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7b8:	6829      	ldr	r1, [r5, #0]
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7c0:	6029      	str	r1, [r5, #0]
 800a7c2:	061d      	lsls	r5, r3, #24
 800a7c4:	d514      	bpl.n	800a7f0 <_printf_i+0x1ac>
 800a7c6:	07df      	lsls	r7, r3, #31
 800a7c8:	bf44      	itt	mi
 800a7ca:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ce:	6023      	strmi	r3, [r4, #0]
 800a7d0:	b91e      	cbnz	r6, 800a7da <_printf_i+0x196>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	f023 0320 	bic.w	r3, r3, #32
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	2310      	movs	r3, #16
 800a7dc:	e7b0      	b.n	800a740 <_printf_i+0xfc>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f043 0320 	orr.w	r3, r3, #32
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	2378      	movs	r3, #120	; 0x78
 800a7e8:	4828      	ldr	r0, [pc, #160]	; (800a88c <_printf_i+0x248>)
 800a7ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7ee:	e7e3      	b.n	800a7b8 <_printf_i+0x174>
 800a7f0:	0659      	lsls	r1, r3, #25
 800a7f2:	bf48      	it	mi
 800a7f4:	b2b6      	uxthmi	r6, r6
 800a7f6:	e7e6      	b.n	800a7c6 <_printf_i+0x182>
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	e7bb      	b.n	800a774 <_printf_i+0x130>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	6826      	ldr	r6, [r4, #0]
 800a800:	6961      	ldr	r1, [r4, #20]
 800a802:	1d18      	adds	r0, r3, #4
 800a804:	6028      	str	r0, [r5, #0]
 800a806:	0635      	lsls	r5, r6, #24
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	d501      	bpl.n	800a810 <_printf_i+0x1cc>
 800a80c:	6019      	str	r1, [r3, #0]
 800a80e:	e002      	b.n	800a816 <_printf_i+0x1d2>
 800a810:	0670      	lsls	r0, r6, #25
 800a812:	d5fb      	bpl.n	800a80c <_printf_i+0x1c8>
 800a814:	8019      	strh	r1, [r3, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	6123      	str	r3, [r4, #16]
 800a81a:	4615      	mov	r5, r2
 800a81c:	e7ba      	b.n	800a794 <_printf_i+0x150>
 800a81e:	682b      	ldr	r3, [r5, #0]
 800a820:	1d1a      	adds	r2, r3, #4
 800a822:	602a      	str	r2, [r5, #0]
 800a824:	681d      	ldr	r5, [r3, #0]
 800a826:	6862      	ldr	r2, [r4, #4]
 800a828:	2100      	movs	r1, #0
 800a82a:	4628      	mov	r0, r5
 800a82c:	f7f5 fcf8 	bl	8000220 <memchr>
 800a830:	b108      	cbz	r0, 800a836 <_printf_i+0x1f2>
 800a832:	1b40      	subs	r0, r0, r5
 800a834:	6060      	str	r0, [r4, #4]
 800a836:	6863      	ldr	r3, [r4, #4]
 800a838:	6123      	str	r3, [r4, #16]
 800a83a:	2300      	movs	r3, #0
 800a83c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a840:	e7a8      	b.n	800a794 <_printf_i+0x150>
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	462a      	mov	r2, r5
 800a846:	4649      	mov	r1, r9
 800a848:	4640      	mov	r0, r8
 800a84a:	47d0      	blx	sl
 800a84c:	3001      	adds	r0, #1
 800a84e:	d0ab      	beq.n	800a7a8 <_printf_i+0x164>
 800a850:	6823      	ldr	r3, [r4, #0]
 800a852:	079b      	lsls	r3, r3, #30
 800a854:	d413      	bmi.n	800a87e <_printf_i+0x23a>
 800a856:	68e0      	ldr	r0, [r4, #12]
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	4298      	cmp	r0, r3
 800a85c:	bfb8      	it	lt
 800a85e:	4618      	movlt	r0, r3
 800a860:	e7a4      	b.n	800a7ac <_printf_i+0x168>
 800a862:	2301      	movs	r3, #1
 800a864:	4632      	mov	r2, r6
 800a866:	4649      	mov	r1, r9
 800a868:	4640      	mov	r0, r8
 800a86a:	47d0      	blx	sl
 800a86c:	3001      	adds	r0, #1
 800a86e:	d09b      	beq.n	800a7a8 <_printf_i+0x164>
 800a870:	3501      	adds	r5, #1
 800a872:	68e3      	ldr	r3, [r4, #12]
 800a874:	9903      	ldr	r1, [sp, #12]
 800a876:	1a5b      	subs	r3, r3, r1
 800a878:	42ab      	cmp	r3, r5
 800a87a:	dcf2      	bgt.n	800a862 <_printf_i+0x21e>
 800a87c:	e7eb      	b.n	800a856 <_printf_i+0x212>
 800a87e:	2500      	movs	r5, #0
 800a880:	f104 0619 	add.w	r6, r4, #25
 800a884:	e7f5      	b.n	800a872 <_printf_i+0x22e>
 800a886:	bf00      	nop
 800a888:	0800aa8d 	.word	0x0800aa8d
 800a88c:	0800aa9e 	.word	0x0800aa9e

0800a890 <memmove>:
 800a890:	4288      	cmp	r0, r1
 800a892:	b510      	push	{r4, lr}
 800a894:	eb01 0402 	add.w	r4, r1, r2
 800a898:	d902      	bls.n	800a8a0 <memmove+0x10>
 800a89a:	4284      	cmp	r4, r0
 800a89c:	4623      	mov	r3, r4
 800a89e:	d807      	bhi.n	800a8b0 <memmove+0x20>
 800a8a0:	1e43      	subs	r3, r0, #1
 800a8a2:	42a1      	cmp	r1, r4
 800a8a4:	d008      	beq.n	800a8b8 <memmove+0x28>
 800a8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ae:	e7f8      	b.n	800a8a2 <memmove+0x12>
 800a8b0:	4402      	add	r2, r0
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	428a      	cmp	r2, r1
 800a8b6:	d100      	bne.n	800a8ba <memmove+0x2a>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8c2:	e7f7      	b.n	800a8b4 <memmove+0x24>

0800a8c4 <_realloc_r>:
 800a8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c8:	4680      	mov	r8, r0
 800a8ca:	4614      	mov	r4, r2
 800a8cc:	460e      	mov	r6, r1
 800a8ce:	b921      	cbnz	r1, 800a8da <_realloc_r+0x16>
 800a8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	f7ff bb6b 	b.w	8009fb0 <_malloc_r>
 800a8da:	b92a      	cbnz	r2, 800a8e8 <_realloc_r+0x24>
 800a8dc:	f7ff fc9c 	bl	800a218 <_free_r>
 800a8e0:	4625      	mov	r5, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	f000 f81b 	bl	800a922 <_malloc_usable_size_r>
 800a8ec:	4284      	cmp	r4, r0
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	d802      	bhi.n	800a8f8 <_realloc_r+0x34>
 800a8f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8f6:	d812      	bhi.n	800a91e <_realloc_r+0x5a>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f7ff fb58 	bl	8009fb0 <_malloc_r>
 800a900:	4605      	mov	r5, r0
 800a902:	2800      	cmp	r0, #0
 800a904:	d0ed      	beq.n	800a8e2 <_realloc_r+0x1e>
 800a906:	42bc      	cmp	r4, r7
 800a908:	4622      	mov	r2, r4
 800a90a:	4631      	mov	r1, r6
 800a90c:	bf28      	it	cs
 800a90e:	463a      	movcs	r2, r7
 800a910:	f7ff fb18 	bl	8009f44 <memcpy>
 800a914:	4631      	mov	r1, r6
 800a916:	4640      	mov	r0, r8
 800a918:	f7ff fc7e 	bl	800a218 <_free_r>
 800a91c:	e7e1      	b.n	800a8e2 <_realloc_r+0x1e>
 800a91e:	4635      	mov	r5, r6
 800a920:	e7df      	b.n	800a8e2 <_realloc_r+0x1e>

0800a922 <_malloc_usable_size_r>:
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	1f18      	subs	r0, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfbc      	itt	lt
 800a92c:	580b      	ldrlt	r3, [r1, r0]
 800a92e:	18c0      	addlt	r0, r0, r3
 800a930:	4770      	bx	lr
	...

0800a934 <_init>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr

0800a940 <_fini>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr
