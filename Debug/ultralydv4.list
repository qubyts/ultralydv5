
ultralydv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088cc  080088cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080088d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  20000078  0800894c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c1c  0800894c  00024c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae40  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3d  00000000  00000000  0003aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246aa  00000000  00000000  00041360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3f7  00000000  00000000  00065a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db7b7  00000000  00000000  0007fe01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b5b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  0015b608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800879c 	.word	0x0800879c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800879c 	.word	0x0800879c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	deftask_init();
 8000da4:	f000 ffa8 	bl	8001cf8 <deftask_init>
	buzzer_init();
 8000da8:	f000 ff1e 	bl	8001be8 <buzzer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <MX_FREERTOS_Init+0x20>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_FREERTOS_Init+0x24>)
 8000db2:	f004 fb49 	bl	8005448 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <MX_FREERTOS_Init+0x28>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	0800880c 	.word	0x0800880c
 8000dc4:	08000dcd 	.word	0x08000dcd
 8000dc8:	20000094 	.word	0x20000094

08000dcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f004 fbc9 	bl	800556c <osDelay>
 8000dda:	e7fb      	b.n	8000dd4 <StartDefaultTask+0x8>

08000ddc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a39      	ldr	r2, [pc, #228]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_GPIO_Init+0x104>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_GPIO_Init+0x108>)
 8000e4c:	f001 fa7e 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e56:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <MX_GPIO_Init+0x10c>)
 8000e58:	f001 fa78 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4822      	ldr	r0, [pc, #136]	; (8000eec <MX_GPIO_Init+0x110>)
 8000e62:	f001 fa73 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <MX_GPIO_Init+0x10c>)
 8000e7e:	f001 f8d1 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e82:	2320      	movs	r3, #32
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <MX_GPIO_Init+0x108>)
 8000e9a:	f001 f8c3 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_GPIO_Init+0x10c>)
 8000eb8:	f001 f8b4 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_GPIO_Init+0x110>)
 8000ed4:	f001 f8a6 	bl	8002024 <HAL_GPIO_Init>

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 ff12 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f816 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff ff6e 	bl	8000ddc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f00:	f000 fcd2 	bl	80018a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f04:	f000 f98e 	bl	8001224 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f08:	f000 fa2c 	bl	8001364 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f0c:	f000 face 	bl	80014ac <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f10:	f000 fb3c 	bl	800158c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f14:	f000 fa7c 	bl	8001410 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f18:	f004 fa4c 	bl	80053b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f1c:	f7ff ff40 	bl	8000da0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f20:	f004 fa6c 	bl	80053fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <main+0x34>
	...

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2234      	movs	r2, #52	; 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f006 ffc8 	bl	8007ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <SystemClock_Config+0xdc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <SystemClock_Config+0xdc>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <SystemClock_Config+0xdc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <SystemClock_Config+0xe0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <SystemClock_Config+0xe0>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <SystemClock_Config+0xe0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f9c:	23b4      	movs	r3, #180	; 0xb4
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fd99 	bl	8002ae8 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fbc:	f000 f876 	bl	80010ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc0:	f001 f9f8 	bl	80023b4 <HAL_PWREx_EnableOverDrive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fca:	f000 f86f 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	2105      	movs	r1, #5
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fa31 	bl	8002454 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ff8:	f000 f858 	bl	80010ac <Error_Handler>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3750      	adds	r7, #80	; 0x50
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x34>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10c      	bne.n	8001038 <HAL_TIM_IC_CaptureCallback+0x2c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001024:	f001 f9ab 	bl	800237e <HAL_GPIO_TogglePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800102c:	f002 f9dc 	bl	80033e8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001034:	f003 fc64 	bl	8004900 <HAL_TIMEx_PWMN_Stop>
	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40000800 	.word	0x40000800
 8001044:	40020800 	.word	0x40020800
 8001048:	2000009c 	.word	0x2000009c

0800104c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d117      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001064:	f001 f98b 	bl	800237e <HAL_GPIO_TogglePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001068:	2100      	movs	r1, #0
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800106c:	f002 f9bc 	bl	80033e8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001074:	f003 fc44 	bl	8004900 <HAL_TIMEx_PWMN_Stop>
		captured_value1 = TIM4->CCR1;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107c:	461a      	mov	r2, r3
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001080:	601a      	str	r2, [r3, #0]
		TIM4->CNT = 0;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = 0;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800
 800109c:	2000009c 	.word	0x2000009c
 80010a0:	40000800 	.word	0x40000800
 80010a4:	20000000 	.word	0x20000000
 80010a8:	40010000 	.word	0x40010000

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_MspInit+0x54>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_MspInit+0x54>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_MspInit+0x54>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_MspInit+0x54>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_MspInit+0x54>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_MspInit+0x54>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	210f      	movs	r1, #15
 80010fa:	f06f 0001 	mvn.w	r0, #1
 80010fe:	f000 ff5a 	bl	8001fb6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 fe3e 	bl	8001dc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001144:	f005 fe20 	bl	8006d88 <xTaskGetSchedulerState>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d001      	beq.n	8001152 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800114e:	f006 fc0b 	bl	8007968 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM2_IRQHandler+0x10>)
 800115e:	f002 fb8f 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000e4 	.word	0x200000e4

0800116c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM3_IRQHandler+0x10>)
 8001172:	f002 fb85 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000012c 	.word	0x2000012c

08001180 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM4_IRQHandler+0x10>)
 8001186:	f002 fb7b 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000174 	.word	0x20000174

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f006 fe4a 	bl	8007e5c <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20020000 	.word	0x20020000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000098 	.word	0x20000098
 80011fc:	20004c20 	.word	0x20004c20

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b096      	sub	sp, #88	; 0x58
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2220      	movs	r2, #32
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f006 fe35 	bl	8007ecc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_TIM1_Init+0x138>)
 8001264:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <MX_TIM1_Init+0x13c>)
 8001266:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001268:	4b3c      	ldr	r3, [pc, #240]	; (800135c <MX_TIM1_Init+0x138>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_TIM1_Init+0x138>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <MX_TIM1_Init+0x138>)
 8001276:	f241 1294 	movw	r2, #4500	; 0x1194
 800127a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_TIM1_Init+0x138>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <MX_TIM1_Init+0x138>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_TIM1_Init+0x138>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <MX_TIM1_Init+0x138>)
 8001290:	f001 fec8 	bl	8003024 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800129a:	f7ff ff07 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a8:	4619      	mov	r1, r3
 80012aa:	482c      	ldr	r0, [pc, #176]	; (800135c <MX_TIM1_Init+0x138>)
 80012ac:	f002 fd4e 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012b6:	f7ff fef9 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ba:	4828      	ldr	r0, [pc, #160]	; (800135c <MX_TIM1_Init+0x138>)
 80012bc:	f001 ff72 	bl	80031a4 <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012c6:	f7ff fef1 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d6:	4619      	mov	r1, r3
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_TIM1_Init+0x138>)
 80012da:	f003 fb6f 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012e4:	f7ff fee2 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e8:	2360      	movs	r3, #96	; 0x60
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 80012ec:	2328      	movs	r3, #40	; 0x28
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM1_Init+0x138>)
 800130e:	f002 fc5b 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001318:	f7ff fec8 	bl	80010ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 8001328:	2396      	movs	r3, #150	; 0x96
 800132a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM1_Init+0x138>)
 8001340:	f003 fbb8 	bl	8004ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800134a:	f7ff feaf 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM1_Init+0x138>)
 8001350:	f000 fa4a 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000009c 	.word	0x2000009c
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_TIM2_Init+0xa8>)
 8001382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_TIM2_Init+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_TIM2_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22500;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_TIM2_Init+0xa8>)
 8001396:	f245 72e4 	movw	r2, #22500	; 0x57e4
 800139a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_TIM2_Init+0xa8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM2_Init+0xa8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM2_Init+0xa8>)
 80013aa:	f001 fe3b 	bl	8003024 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013b4:	f7ff fe7a 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_TIM2_Init+0xa8>)
 80013c6:	f002 fcc1 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013d0:	f7ff fe6c 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80013d4:	2108      	movs	r1, #8
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM2_Init+0xa8>)
 80013d8:	f002 f9f8 	bl	80037cc <HAL_TIM_OnePulse_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013e2:	f7ff fe63 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM2_Init+0xa8>)
 80013f4:	f003 fae2 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013fe:	f7ff fe55 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000e4 	.word	0x200000e4

08001410 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM3_Init+0x94>)
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <MX_TIM3_Init+0x98>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001434:	2202      	movs	r2, #2
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM3_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001440:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM3_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001454:	f001 fde6 	bl	8003024 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800145e:	f7ff fe25 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001470:	f002 fc6c 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800147a:	f7ff fe17 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_TIM3_Init+0x94>)
 800148c:	f003 fa96 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001496:	f7ff fe09 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000012c 	.word	0x2000012c
 80014a8:	40000400 	.word	0x40000400

080014ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014d8:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <MX_TIM4_Init+0xdc>)
 80014da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014de:	220e      	movs	r2, #14
 80014e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <MX_TIM4_Init+0xd8>)
 80014fe:	f001 fd91 	bl	8003024 <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001508:	f7ff fdd0 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4619      	mov	r1, r3
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_TIM4_Init+0xd8>)
 800151a:	f002 fc17 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001524:	f7ff fdc2 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001528:	4816      	ldr	r0, [pc, #88]	; (8001584 <MX_TIM4_Init+0xd8>)
 800152a:	f001 ffcd 	bl	80034c8 <HAL_TIM_IC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001534:	f7ff fdba 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <MX_TIM4_Init+0xd8>)
 8001548:	f003 fa38 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001552:	f7ff fdab 	bl	80010ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_TIM4_Init+0xd8>)
 800156e:	f002 fa8f 	bl	8003a90 <HAL_TIM_IC_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001578:	f7ff fd98 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000174 	.word	0x20000174
 8001588:	40000800 	.word	0x40000800

0800158c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <MX_TIM5_Init+0xec>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45;
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015c4:	222d      	movs	r2, #45	; 0x2d
 80015c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80015ce:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <MX_TIM5_Init+0xe8>)
 80015e4:	f001 fd1e 	bl	8003024 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80015ee:	f7ff fd5d 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fc:	4619      	mov	r1, r3
 80015fe:	481d      	ldr	r0, [pc, #116]	; (8001674 <MX_TIM5_Init+0xe8>)
 8001600:	f002 fba4 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800160a:	f7ff fd4f 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800160e:	4819      	ldr	r0, [pc, #100]	; (8001674 <MX_TIM5_Init+0xe8>)
 8001610:	f001 fdc8 	bl	80031a4 <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800161a:	f7ff fd47 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4619      	mov	r1, r3
 800162c:	4811      	ldr	r0, [pc, #68]	; (8001674 <MX_TIM5_Init+0xe8>)
 800162e:	f003 f9c5 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001638:	f7ff fd38 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_TIM5_Init+0xe8>)
 8001656:	f002 fab7 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001660:	f7ff fd24 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_TIM5_Init+0xe8>)
 8001666:	f000 f8bf 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200001bc 	.word	0x200001bc
 8001678:	40000c00 	.word	0x40000c00

0800167c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_TIM_Base_MspInit+0x154>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a4b      	ldr	r2, [pc, #300]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80016ba:	e084      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c4:	d116      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2105      	movs	r1, #5
 80016e6:	201c      	movs	r0, #28
 80016e8:	f000 fc65 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ec:	201c      	movs	r0, #28
 80016ee:	f000 fc7e 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 80016f2:	e068      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a37      	ldr	r2, [pc, #220]	; (80017d8 <HAL_TIM_Base_MspInit+0x15c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d116      	bne.n	800172c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	201d      	movs	r0, #29
 8001720:	f000 fc49 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001724:	201d      	movs	r0, #29
 8001726:	f000 fc62 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 800172a:	e04c      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM4)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <HAL_TIM_Base_MspInit+0x160>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d134      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800177e:	2302      	movs	r3, #2
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4815      	ldr	r0, [pc, #84]	; (80017e0 <HAL_TIM_Base_MspInit+0x164>)
 800178a:	f000 fc4b 	bl	8002024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	201e      	movs	r0, #30
 8001794:	f000 fc0f 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001798:	201e      	movs	r0, #30
 800179a:	f000 fc28 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 800179e:	e012      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(tim_baseHandle->Instance==TIM5)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_TIM_Base_MspInit+0x168>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10d      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_TIM_Base_MspInit+0x158>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3738      	adds	r7, #56	; 0x38
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40000c00 	.word	0x40000c00

080017e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d11f      	bne.n	800184a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001826:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001838:	2301      	movs	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4817      	ldr	r0, [pc, #92]	; (80018a0 <HAL_TIM_MspPostInit+0xb8>)
 8001844:	f000 fbee 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001848:	e022      	b.n	8001890 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_TIM_MspPostInit+0xbc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d11d      	bne.n	8001890 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001870:	2301      	movs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001880:	2302      	movs	r3, #2
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_MspPostInit+0xb8>)
 800188c:	f000 fbca 	bl	8002024 <HAL_GPIO_Init>
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010000 	.word	0x40010000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40000c00 	.word	0x40000c00

080018a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f003 f973 	bl	8004bca <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f7ff fbdf 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000204 	.word	0x20000204
 80018f8:	40004400 	.word	0x40004400

080018fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_UART_MspInit+0x84>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12b      	bne.n	8001976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_UART_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001956:	230c      	movs	r3, #12
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001966:	2307      	movs	r3, #7
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_UART_MspInit+0x8c>)
 8001972:	f000 fb57 	bl	8002024 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40004400 	.word	0x40004400
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f7ff fc23 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f006 fa55 	bl	8007e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fa97 	bl	8000ef0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019d0:	080088d4 	.word	0x080088d4
  ldr r2, =_sbss
 80019d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019d8:	20004c1c 	.word	0x20004c1c

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <Start_BuzzerTask>:



char txbuff1[50];
void Start_BuzzerTask(void *argument)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer */
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80019e8:	2100      	movs	r1, #0
 80019ea:	4879      	ldr	r0, [pc, #484]	; (8001bd0 <Start_BuzzerTask+0x1f0>)
 80019ec:	f001 fc34 	bl	8003258 <HAL_TIM_PWM_Start>
	  TIM5->CCR1 = 1000;
 80019f0:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <Start_BuzzerTask+0x1f4>)
 80019f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34
	  int buzzer_toggle = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
	  int buzzer_toggle_cont = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
	  int buzzer_toggle_delay = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
	  int distance = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
	  int constant = 29;
 8001a08:	231d      	movs	r3, #29
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  distance = *((int *) argument) + constant ; //0.034cm->0.000001s
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]

	  distance = (distance/6.15)*0.0342 + constant;
 8001a16:	6938      	ldr	r0, [r7, #16]
 8001a18:	f7fe fd9c 	bl	8000554 <__aeabi_i2d>
 8001a1c:	a368      	add	r3, pc, #416	; (adr r3, 8001bc0 <Start_BuzzerTask+0x1e0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe ff2b 	bl	800087c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a366      	add	r3, pc, #408	; (adr r3, 8001bc8 <Start_BuzzerTask+0x1e8>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fdf8 	bl	8000628 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	461d      	mov	r5, r3
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7fe fd87 	bl	8000554 <__aeabi_i2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc35 	bl	80002bc <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7fe fff7 	bl	8000a4c <__aeabi_d2iz>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a62:	2120      	movs	r1, #32
 8001a64:	485c      	ldr	r0, [pc, #368]	; (8001bd8 <Start_BuzzerTask+0x1f8>)
 8001a66:	f000 fc8a 	bl	800237e <HAL_GPIO_TogglePin>
	  if((distance > 0)&&(distance <30))
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd08      	ble.n	8001a82 <Start_BuzzerTask+0xa2>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b1d      	cmp	r3, #29
 8001a74:	dc05      	bgt.n	8001a82 <Start_BuzzerTask+0xa2>
		  {
			  buzzer_toggle_delay = 1000;
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	e05c      	b.n	8001b3c <Start_BuzzerTask+0x15c>
		  }
	  else if((distance >= 30)&&(distance <60))
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b1d      	cmp	r3, #29
 8001a86:	dd07      	ble.n	8001a98 <Start_BuzzerTask+0xb8>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b3b      	cmp	r3, #59	; 0x3b
 8001a8c:	dc04      	bgt.n	8001a98 <Start_BuzzerTask+0xb8>
		  {
			  buzzer_toggle_delay = 125;
 8001a8e:	237d      	movs	r3, #125	; 0x7d
 8001a90:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e051      	b.n	8001b3c <Start_BuzzerTask+0x15c>
		  }
	  else if((distance >= 60)&&(distance <90))
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b3b      	cmp	r3, #59	; 0x3b
 8001a9c:	dd07      	ble.n	8001aae <Start_BuzzerTask+0xce>
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b59      	cmp	r3, #89	; 0x59
 8001aa2:	dc04      	bgt.n	8001aae <Start_BuzzerTask+0xce>
	  	  {
			  buzzer_toggle_delay = 142;
 8001aa4:	238e      	movs	r3, #142	; 0x8e
 8001aa6:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	e046      	b.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  }
	  else if((distance >= 90)&&(distance <120))
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b59      	cmp	r3, #89	; 0x59
 8001ab2:	dd07      	ble.n	8001ac4 <Start_BuzzerTask+0xe4>
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b77      	cmp	r3, #119	; 0x77
 8001ab8:	dc04      	bgt.n	8001ac4 <Start_BuzzerTask+0xe4>
	  	  {
			  buzzer_toggle_delay = 167;
 8001aba:	23a7      	movs	r3, #167	; 0xa7
 8001abc:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	e03b      	b.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  }
	  else if((distance >= 120)&&(distance <150))
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b77      	cmp	r3, #119	; 0x77
 8001ac8:	dd07      	ble.n	8001ada <Start_BuzzerTask+0xfa>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b95      	cmp	r3, #149	; 0x95
 8001ace:	dc04      	bgt.n	8001ada <Start_BuzzerTask+0xfa>
	  	  {
			  buzzer_toggle_delay = 200;
 8001ad0:	23c8      	movs	r3, #200	; 0xc8
 8001ad2:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e030      	b.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  }
	  else if((distance >= 150)&&(distance <180))
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b95      	cmp	r3, #149	; 0x95
 8001ade:	dd07      	ble.n	8001af0 <Start_BuzzerTask+0x110>
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2bb3      	cmp	r3, #179	; 0xb3
 8001ae4:	dc04      	bgt.n	8001af0 <Start_BuzzerTask+0x110>
	  	  {
			  buzzer_toggle_delay = 250;
 8001ae6:	23fa      	movs	r3, #250	; 0xfa
 8001ae8:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e025      	b.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  }
	  else if((distance >= 180)&&(distance <210))
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2bb3      	cmp	r3, #179	; 0xb3
 8001af4:	dd08      	ble.n	8001b08 <Start_BuzzerTask+0x128>
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2bd1      	cmp	r3, #209	; 0xd1
 8001afa:	dc05      	bgt.n	8001b08 <Start_BuzzerTask+0x128>
	  	  {
			  buzzer_toggle_delay = 333;
 8001afc:	f240 134d 	movw	r3, #333	; 0x14d
 8001b00:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	e019      	b.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  }
	  else if((distance >= 210)&&(distance <270))
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2bd1      	cmp	r3, #209	; 0xd1
 8001b0c:	dd09      	ble.n	8001b22 <Start_BuzzerTask+0x142>
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001b14:	da05      	bge.n	8001b22 <Start_BuzzerTask+0x142>
	  	  {
			  buzzer_toggle_delay = 500;
 8001b16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b1a:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	e00c      	b.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  }

	  else if((distance >= 270)&&(distance <=300))
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001b28:	db08      	blt.n	8001b3c <Start_BuzzerTask+0x15c>
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b30:	dc04      	bgt.n	8001b3c <Start_BuzzerTask+0x15c>
	  	  {
			  buzzer_toggle_delay = 1000;
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
	  	  }

	  sprintf(txbuff1,"distance: %d\n\r",distance);
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4927      	ldr	r1, [pc, #156]	; (8001bdc <Start_BuzzerTask+0x1fc>)
 8001b40:	4827      	ldr	r0, [pc, #156]	; (8001be0 <Start_BuzzerTask+0x200>)
 8001b42:	f006 f9cb 	bl	8007edc <siprintf>
	  HAL_UART_Transmit(&huart2, &txbuff1, 20, 100);
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	2214      	movs	r2, #20
 8001b4a:	4925      	ldr	r1, [pc, #148]	; (8001be0 <Start_BuzzerTask+0x200>)
 8001b4c:	4825      	ldr	r0, [pc, #148]	; (8001be4 <Start_BuzzerTask+0x204>)
 8001b4e:	f003 f889 	bl	8004c64 <HAL_UART_Transmit>
	  if(buzzer_toggle == 1)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <Start_BuzzerTask+0x186>
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	481d      	ldr	r0, [pc, #116]	; (8001bd0 <Start_BuzzerTask+0x1f0>)
 8001b5c:	f001 fb7c 	bl	8003258 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	e012      	b.n	8001b8c <Start_BuzzerTask+0x1ac>

	  }
	  else if((buzzer_toggle == 0)&&(buzzer_toggle_cont == 0))
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <Start_BuzzerTask+0x1a0>
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <Start_BuzzerTask+0x1a0>
	  {
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001b72:	2100      	movs	r1, #0
 8001b74:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <Start_BuzzerTask+0x1f0>)
 8001b76:	f001 fc37 	bl	80033e8 <HAL_TIM_PWM_Stop>
		  buzzer_toggle = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e005      	b.n	8001b8c <Start_BuzzerTask+0x1ac>
	  }
	  else
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001b80:	2100      	movs	r1, #0
 8001b82:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <Start_BuzzerTask+0x1f0>)
 8001b84:	f001 fb68 	bl	8003258 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
	  }
	  if(distance < 1)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dc06      	bgt.n	8001ba0 <Start_BuzzerTask+0x1c0>
	  {
		  buzzer_toggle_delay = 2000;
 8001b92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b96:	617b      	str	r3, [r7, #20]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <Start_BuzzerTask+0x1f0>)
 8001b9c:	f001 fc24 	bl	80033e8 <HAL_TIM_PWM_Stop>


	  }
	  if(distance >300)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ba6:	dd06      	ble.n	8001bb6 <Start_BuzzerTask+0x1d6>
	  {
		  buzzer_toggle_delay = 2000;
 8001ba8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bac:	617b      	str	r3, [r7, #20]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <Start_BuzzerTask+0x1f0>)
 8001bb2:	f001 fc19 	bl	80033e8 <HAL_TIM_PWM_Stop>
	  }

    osDelay(buzzer_toggle_delay);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fcd7 	bl	800556c <osDelay>
	  distance = *((int *) argument) + constant ; //0.034cm->0.000001s
 8001bbe:	e725      	b.n	8001a0c <Start_BuzzerTask+0x2c>
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	40189999 	.word	0x40189999
 8001bc8:	930be0df 	.word	0x930be0df
 8001bcc:	3fa182a9 	.word	0x3fa182a9
 8001bd0:	200001bc 	.word	0x200001bc
 8001bd4:	40000c00 	.word	0x40000c00
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	080087cc 	.word	0x080087cc
 8001be0:	2000024c 	.word	0x2000024c
 8001be4:	20000204 	.word	0x20000204

08001be8 <buzzer_init>:
  }

}
void buzzer_init(){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
/* creation of Buzzer_Task */
Buzzer_TaskHandle = osThreadNew(Start_BuzzerTask, &captured_value1, &Buzzer_Task_attributes);
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <buzzer_init+0x18>)
 8001bee:	4905      	ldr	r1, [pc, #20]	; (8001c04 <buzzer_init+0x1c>)
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <buzzer_init+0x20>)
 8001bf2:	f003 fc29 	bl	8005448 <osThreadNew>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <buzzer_init+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08008848 	.word	0x08008848
 8001c04:	20000000 	.word	0x20000000
 8001c08:	080019e1 	.word	0x080019e1
 8001c0c:	20000248 	.word	0x20000248

08001c10 <StarttimerTask>:
  .priority = (osPriority_t) osPriorityNormal,
};
void StarttimerTask(void *argument);
char txbuff[50];
void StarttimerTask(void *argument)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttimerTask */
	HAL_TIM_Base_Start_IT(&htim2);
 8001c18:	482b      	ldr	r0, [pc, #172]	; (8001cc8 <StarttimerTask+0xb8>)
 8001c1a:	f001 fa53 	bl	80030c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	482a      	ldr	r0, [pc, #168]	; (8001ccc <StarttimerTask+0xbc>)
 8001c22:	f001 fcab 	bl	800357c <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  TIM1->CCR1 = 2250;
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <StarttimerTask+0xc0>)
 8001c28:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
	  		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4828      	ldr	r0, [pc, #160]	; (8001cd4 <StarttimerTask+0xc4>)
 8001c32:	f002 fdab 	bl	800478c <HAL_TIMEx_PWMN_Start>
	  		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c36:	2100      	movs	r1, #0
 8001c38:	4826      	ldr	r0, [pc, #152]	; (8001cd4 <StarttimerTask+0xc4>)
 8001c3a:	f001 fb0d 	bl	8003258 <HAL_TIM_PWM_Start>
	  		HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4822      	ldr	r0, [pc, #136]	; (8001ccc <StarttimerTask+0xbc>)
 8001c42:	f001 fc9b 	bl	800357c <HAL_TIM_IC_Start_IT>
	  		TIM2->ARR = 22500;
 8001c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4a:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
	  		__HAL_TIM_ENABLE(&htim2);
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <StarttimerTask+0xb8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <StarttimerTask+0xb8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
	  		TIM3->ARR = 45000;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <StarttimerTask+0xc8>)
 8001c62:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
	  		__HAL_TIM_ENABLE(&htim3);
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <StarttimerTask+0xcc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <StarttimerTask+0xcc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
	  		__HAL_TIM_ENABLE(&htim4);
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <StarttimerTask+0xbc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <StarttimerTask+0xbc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
	  		sprintf(txbuff,"ms: %ld\n\r",TIM4->CCR1);
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <StarttimerTask+0xd0>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4915      	ldr	r1, [pc, #84]	; (8001ce4 <StarttimerTask+0xd4>)
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <StarttimerTask+0xd8>)
 8001c92:	f006 f923 	bl	8007edc <siprintf>
	  			  captured_value1 = TIM4->CCR1;
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <StarttimerTask+0xd0>)
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <StarttimerTask+0xdc>)
 8001c9e:	601a      	str	r2, [r3, #0]
	  			  HAL_UART_Transmit(&huart2, &txbuff, 15, 100);
 8001ca0:	2364      	movs	r3, #100	; 0x64
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <StarttimerTask+0xd8>)
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <StarttimerTask+0xe0>)
 8001ca8:	f002 ffdc 	bl	8004c64 <HAL_UART_Transmit>
	  		TIM4->CNT = 0;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <StarttimerTask+0xd0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

	  	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <StarttimerTask+0xe4>)
 8001cb8:	f000 fb61 	bl	800237e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc0:	f003 fc54 	bl	800556c <osDelay>
	  TIM1->CCR1 = 2250;
 8001cc4:	e7af      	b.n	8001c26 <StarttimerTask+0x16>
 8001cc6:	bf00      	nop
 8001cc8:	200000e4 	.word	0x200000e4
 8001ccc:	20000174 	.word	0x20000174
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	2000009c 	.word	0x2000009c
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	2000012c 	.word	0x2000012c
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	080087e8 	.word	0x080087e8
 8001ce8:	20000284 	.word	0x20000284
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000204 	.word	0x20000204
 8001cf4:	40020800 	.word	0x40020800

08001cf8 <deftask_init>:
  }
  /* USER CODE END StarttimerTask */
}

void deftask_init(){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	/* creation of timerTask */
	timerTaskHandle = osThreadNew(StarttimerTask, NULL, &timerTask_attributes);
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <deftask_init+0x18>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <deftask_init+0x1c>)
 8001d02:	f003 fba1 	bl	8005448 <osThreadNew>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <deftask_init+0x20>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	0800886c 	.word	0x0800886c
 8001d14:	08001c11 	.word	0x08001c11
 8001d18:	20000280 	.word	0x20000280

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f92b 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff f9b2 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f943 	bl	800200a <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 f90b 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000004 	.word	0x20000004
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	200002b8 	.word	0x200002b8

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	200002b8 	.word	0x200002b8

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff8e 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff29 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff3e 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff8e 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff31 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e165      	b.n	800230c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8154 	bne.w	8002306 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d005      	beq.n	8002076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	2b02      	cmp	r3, #2
 8002074:	d130      	bne.n	80020d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ae 	beq.w	8002306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_GPIO_Init+0x300>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a5c      	ldr	r2, [pc, #368]	; (8002324 <HAL_GPIO_Init+0x300>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_GPIO_Init+0x300>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_GPIO_Init+0x304>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	; (800232c <HAL_GPIO_Init+0x308>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	; (8002330 <HAL_GPIO_Init+0x30c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	; (8002334 <HAL_GPIO_Init+0x310>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4c      	ldr	r2, [pc, #304]	; (8002338 <HAL_GPIO_Init+0x314>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4b      	ldr	r2, [pc, #300]	; (800233c <HAL_GPIO_Init+0x318>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x20a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <HAL_GPIO_Init+0x31c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x206>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x320>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x202>
 8002222:	2306      	movs	r3, #6
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002226:	2307      	movs	r3, #7
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	; (8002328 <HAL_GPIO_Init+0x304>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_GPIO_Init+0x324>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a31      	ldr	r2, [pc, #196]	; (8002348 <HAL_GPIO_Init+0x324>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x324>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_GPIO_Init+0x324>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_GPIO_Init+0x324>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_GPIO_Init+0x324>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_GPIO_Init+0x324>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_GPIO_Init+0x324>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae96 	bls.w	8002040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43d9      	mvns	r1, r3
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_PWREx_EnableOverDrive+0x90>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_PWREx_EnableOverDrive+0x90>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_PWREx_EnableOverDrive+0x90>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_PWREx_EnableOverDrive+0x94>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e0:	f7ff fd02 	bl	8001de8 <HAL_GetTick>
 80023e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023e6:	e009      	b.n	80023fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023e8:	f7ff fcfe 	bl	8001de8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f6:	d901      	bls.n	80023fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e01f      	b.n	800243c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_PWREx_EnableOverDrive+0x98>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d1ee      	bne.n	80023e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_PWREx_EnableOverDrive+0x9c>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002410:	f7ff fcea 	bl	8001de8 <HAL_GetTick>
 8002414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002416:	e009      	b.n	800242c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002418:	f7ff fce6 	bl	8001de8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002426:	d901      	bls.n	800242c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e007      	b.n	800243c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_PWREx_EnableOverDrive+0x98>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002438:	d1ee      	bne.n	8002418 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	420e0040 	.word	0x420e0040
 800244c:	40007000 	.word	0x40007000
 8002450:	420e0044 	.word	0x420e0044

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0cc      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d90c      	bls.n	8002490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d044      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d119      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d003      	beq.n	8002512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	2b03      	cmp	r3, #3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e06f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e067      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4934      	ldr	r1, [pc, #208]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff fc50 	bl	8001de8 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff fc4c 	bl	8001de8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e04f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d20c      	bcs.n	800259c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f855 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fbb0 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	08008830 	.word	0x08008830
 8002618:	20000004 	.word	0x20000004
 800261c:	20000008 	.word	0x20000008

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <HAL_RCC_GetPCLK1Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	08008840 	.word	0x08008840

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002664:	f7ff ffdc 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	08008840 	.word	0x08008840

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b0ae      	sub	sp, #184	; 0xb8
 800268e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ae:	4bcb      	ldr	r3, [pc, #812]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	f200 8206 	bhi.w	8002ac8 <HAL_RCC_GetSysClockFreq+0x440>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	080026f9 	.word	0x080026f9
 80026c8:	08002ac9 	.word	0x08002ac9
 80026cc:	08002ac9 	.word	0x08002ac9
 80026d0:	08002ac9 	.word	0x08002ac9
 80026d4:	08002701 	.word	0x08002701
 80026d8:	08002ac9 	.word	0x08002ac9
 80026dc:	08002ac9 	.word	0x08002ac9
 80026e0:	08002ac9 	.word	0x08002ac9
 80026e4:	08002709 	.word	0x08002709
 80026e8:	08002ac9 	.word	0x08002ac9
 80026ec:	08002ac9 	.word	0x08002ac9
 80026f0:	08002ac9 	.word	0x08002ac9
 80026f4:	080028f9 	.word	0x080028f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4bb9      	ldr	r3, [pc, #740]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80026fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80026fe:	e1e7      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002700:	4bb8      	ldr	r3, [pc, #736]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002706:	e1e3      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002708:	4bb4      	ldr	r3, [pc, #720]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002714:	4bb1      	ldr	r3, [pc, #708]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d071      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002720:	4bae      	ldr	r3, [pc, #696]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	2200      	movs	r2, #0
 8002728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800272c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002746:	4622      	mov	r2, r4
 8002748:	462b      	mov	r3, r5
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	0159      	lsls	r1, r3, #5
 8002754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002758:	0150      	lsls	r0, r2, #5
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4621      	mov	r1, r4
 8002760:	1a51      	subs	r1, r2, r1
 8002762:	6439      	str	r1, [r7, #64]	; 0x40
 8002764:	4629      	mov	r1, r5
 8002766:	eb63 0301 	sbc.w	r3, r3, r1
 800276a:	647b      	str	r3, [r7, #68]	; 0x44
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002778:	4649      	mov	r1, r9
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	4641      	mov	r1, r8
 800277e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002782:	4641      	mov	r1, r8
 8002784:	018a      	lsls	r2, r1, #6
 8002786:	4641      	mov	r1, r8
 8002788:	1a51      	subs	r1, r2, r1
 800278a:	63b9      	str	r1, [r7, #56]	; 0x38
 800278c:	4649      	mov	r1, r9
 800278e:	eb63 0301 	sbc.w	r3, r3, r1
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80027a0:	4649      	mov	r1, r9
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4641      	mov	r1, r8
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4622      	mov	r2, r4
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ba:	462b      	mov	r3, r5
 80027bc:	460a      	mov	r2, r1
 80027be:	eb42 0303 	adc.w	r3, r2, r3
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027d0:	4629      	mov	r1, r5
 80027d2:	024b      	lsls	r3, r1, #9
 80027d4:	4621      	mov	r1, r4
 80027d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027da:	4621      	mov	r1, r4
 80027dc:	024a      	lsls	r2, r1, #9
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80027f4:	f7fe f952 	bl	8000a9c <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002802:	e067      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002804:	4b75      	ldr	r3, [pc, #468]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002810:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281c:	67bb      	str	r3, [r7, #120]	; 0x78
 800281e:	2300      	movs	r3, #0
 8002820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002822:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002826:	4622      	mov	r2, r4
 8002828:	462b      	mov	r3, r5
 800282a:	f04f 0000 	mov.w	r0, #0
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002838:	0150      	lsls	r0, r2, #5
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4621      	mov	r1, r4
 8002840:	1a51      	subs	r1, r2, r1
 8002842:	62b9      	str	r1, [r7, #40]	; 0x28
 8002844:	4629      	mov	r1, r5
 8002846:	eb63 0301 	sbc.w	r3, r3, r1
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002858:	4649      	mov	r1, r9
 800285a:	018b      	lsls	r3, r1, #6
 800285c:	4641      	mov	r1, r8
 800285e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002862:	4641      	mov	r1, r8
 8002864:	018a      	lsls	r2, r1, #6
 8002866:	4641      	mov	r1, r8
 8002868:	ebb2 0a01 	subs.w	sl, r2, r1
 800286c:	4649      	mov	r1, r9
 800286e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800287e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002886:	4692      	mov	sl, r2
 8002888:	469b      	mov	fp, r3
 800288a:	4623      	mov	r3, r4
 800288c:	eb1a 0303 	adds.w	r3, sl, r3
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	462b      	mov	r3, r5
 8002894:	eb4b 0303 	adc.w	r3, fp, r3
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028bc:	2200      	movs	r2, #0
 80028be:	673b      	str	r3, [r7, #112]	; 0x70
 80028c0:	677a      	str	r2, [r7, #116]	; 0x74
 80028c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028c6:	f7fe f8e9 	bl	8000a9c <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4613      	mov	r3, r2
 80028d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d4:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	3301      	adds	r3, #1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80028e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028f6:	e0eb      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f8:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d06b      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002910:	4b32      	ldr	r3, [pc, #200]	; (80029dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	2200      	movs	r2, #0
 8002918:	66bb      	str	r3, [r7, #104]	; 0x68
 800291a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800291c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002922:	663b      	str	r3, [r7, #96]	; 0x60
 8002924:	2300      	movs	r3, #0
 8002926:	667b      	str	r3, [r7, #100]	; 0x64
 8002928:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800292c:	4622      	mov	r2, r4
 800292e:	462b      	mov	r3, r5
 8002930:	f04f 0000 	mov.w	r0, #0
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	0159      	lsls	r1, r3, #5
 800293a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293e:	0150      	lsls	r0, r2, #5
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4621      	mov	r1, r4
 8002946:	1a51      	subs	r1, r2, r1
 8002948:	61b9      	str	r1, [r7, #24]
 800294a:	4629      	mov	r1, r5
 800294c:	eb63 0301 	sbc.w	r3, r3, r1
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800295e:	4659      	mov	r1, fp
 8002960:	018b      	lsls	r3, r1, #6
 8002962:	4651      	mov	r1, sl
 8002964:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002968:	4651      	mov	r1, sl
 800296a:	018a      	lsls	r2, r1, #6
 800296c:	4651      	mov	r1, sl
 800296e:	ebb2 0801 	subs.w	r8, r2, r1
 8002972:	4659      	mov	r1, fp
 8002974:	eb63 0901 	sbc.w	r9, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002984:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002988:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298c:	4690      	mov	r8, r2
 800298e:	4699      	mov	r9, r3
 8002990:	4623      	mov	r3, r4
 8002992:	eb18 0303 	adds.w	r3, r8, r3
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	462b      	mov	r3, r5
 800299a:	eb49 0303 	adc.w	r3, r9, r3
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029ac:	4629      	mov	r1, r5
 80029ae:	024b      	lsls	r3, r1, #9
 80029b0:	4621      	mov	r1, r4
 80029b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b6:	4621      	mov	r1, r4
 80029b8:	024a      	lsls	r2, r1, #9
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029c2:	2200      	movs	r2, #0
 80029c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80029c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029cc:	f7fe f866 	bl	8000a9c <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029da:	e065      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x420>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x458>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	2200      	movs	r2, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	4611      	mov	r1, r2
 80029f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029f8:	653b      	str	r3, [r7, #80]	; 0x50
 80029fa:	2300      	movs	r3, #0
 80029fc:	657b      	str	r3, [r7, #84]	; 0x54
 80029fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a02:	4642      	mov	r2, r8
 8002a04:	464b      	mov	r3, r9
 8002a06:	f04f 0000 	mov.w	r0, #0
 8002a0a:	f04f 0100 	mov.w	r1, #0
 8002a0e:	0159      	lsls	r1, r3, #5
 8002a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a14:	0150      	lsls	r0, r2, #5
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	1a51      	subs	r1, r2, r1
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	4649      	mov	r1, r9
 8002a22:	eb63 0301 	sbc.w	r3, r3, r1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a34:	4659      	mov	r1, fp
 8002a36:	018b      	lsls	r3, r1, #6
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a3e:	4651      	mov	r1, sl
 8002a40:	018a      	lsls	r2, r1, #6
 8002a42:	4651      	mov	r1, sl
 8002a44:	1a54      	subs	r4, r2, r1
 8002a46:	4659      	mov	r1, fp
 8002a48:	eb63 0501 	sbc.w	r5, r3, r1
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	00eb      	lsls	r3, r5, #3
 8002a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5a:	00e2      	lsls	r2, r4, #3
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4643      	mov	r3, r8
 8002a62:	18e3      	adds	r3, r4, r3
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	464b      	mov	r3, r9
 8002a68:	eb45 0303 	adc.w	r3, r5, r3
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	028b      	lsls	r3, r1, #10
 8002a7e:	4621      	mov	r1, r4
 8002a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a84:	4621      	mov	r1, r4
 8002a86:	028a      	lsls	r2, r1, #10
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a90:	2200      	movs	r2, #0
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a9a:	f7fd ffff 	bl	8000a9c <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0f1b      	lsrs	r3, r3, #28
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ac6:	e003      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ace:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	37b8      	adds	r7, #184	; 0xb8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400

08002ae8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e28d      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8083 	beq.w	8002c0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b08:	4b94      	ldr	r3, [pc, #592]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d019      	beq.n	8002b48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b14:	4b91      	ldr	r3, [pc, #580]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b20:	4b8e      	ldr	r3, [pc, #568]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b2c:	d00c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d112      	bne.n	8002b60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b46:	d10b      	bne.n	8002b60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	4b84      	ldr	r3, [pc, #528]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d05b      	beq.n	8002c0c <HAL_RCC_OscConfig+0x124>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d157      	bne.n	8002c0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e25a      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_OscConfig+0x90>
 8002b6a:	4b7c      	ldr	r3, [pc, #496]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7b      	ldr	r2, [pc, #492]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e01d      	b.n	8002bb4 <HAL_RCC_OscConfig+0xcc>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0xb4>
 8002b82:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a75      	ldr	r2, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a72      	ldr	r2, [pc, #456]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0xcc>
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b6c      	ldr	r3, [pc, #432]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6b      	ldr	r2, [pc, #428]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7ff f914 	bl	8001de8 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff f910 	bl	8001de8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e21f      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xdc>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7ff f900 	bl	8001de8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bec:	f7ff f8fc 	bl	8001de8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e20b      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x104>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06f      	beq.n	8002cfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c1a:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d017      	beq.n	8002c56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c26:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d11c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d116      	bne.n	8002c84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x186>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1d3      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4937      	ldr	r1, [pc, #220]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	e03a      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCC_OscConfig+0x278>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7ff f8a9 	bl	8001de8 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7ff f8a5 	bl	8001de8 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e1b4      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4925      	ldr	r1, [pc, #148]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_OscConfig+0x278>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f888 	bl	8001de8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7ff f884 	bl	8001de8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e193      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d036      	beq.n	8002d74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_RCC_OscConfig+0x27c>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7ff f868 	bl	8001de8 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7ff f864 	bl	8001de8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e173      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x234>
 8002d3a:	e01b      	b.n	8002d74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7ff f851 	bl	8001de8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	e00e      	b.n	8002d68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7ff f84d 	bl	8001de8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d907      	bls.n	8002d68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e15c      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470000 	.word	0x42470000
 8002d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	4b8a      	ldr	r3, [pc, #552]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ea      	bne.n	8002d4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8097 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b83      	ldr	r3, [pc, #524]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b7c      	ldr	r3, [pc, #496]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <HAL_RCC_OscConfig+0x4b0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d118      	bne.n	8002df0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x4b0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x4b0>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7ff f80d 	bl	8001de8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd2:	f7ff f809 	bl	8001de8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e118      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x4b0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x31e>
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	e01c      	b.n	8002e40 <HAL_RCC_OscConfig+0x358>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x340>
 8002e0e:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a60      	ldr	r2, [pc, #384]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1a:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a5d      	ldr	r2, [pc, #372]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0x358>
 8002e28:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a59      	ldr	r2, [pc, #356]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b57      	ldr	r3, [pc, #348]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a56      	ldr	r2, [pc, #344]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d015      	beq.n	8002e74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe ffce 	bl	8001de8 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe ffca 	bl	8001de8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0d7      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0ee      	beq.n	8002e50 <HAL_RCC_OscConfig+0x368>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe ffb8 	bl	8001de8 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe ffb4 	bl	8001de8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0c1      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e92:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ee      	bne.n	8002e7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	4a3a      	ldr	r2, [pc, #232]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80ad 	beq.w	8003014 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d060      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d145      	bne.n	8002f5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_RCC_OscConfig+0x4b4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe ff88 	bl	8001de8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe ff84 	bl	8001de8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e093      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	019b      	lsls	r3, r3, #6
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	3b01      	subs	r3, #1
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	071b      	lsls	r3, r3, #28
 8002f26:	491b      	ldr	r1, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x4b4>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe ff59 	bl	8001de8 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe ff55 	bl	8001de8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e064      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x452>
 8002f58:	e05c      	b.n	8003014 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_RCC_OscConfig+0x4b4>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe ff42 	bl	8001de8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe ff3e 	bl	8001de8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04d      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_OscConfig+0x4ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x480>
 8002f86:	e045      	b.n	8003014 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e040      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <HAL_RCC_OscConfig+0x538>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d030      	beq.n	8003010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d129      	bne.n	8003010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d122      	bne.n	8003010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d119      	bne.n	8003010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d10f      	bne.n	8003010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e041      	b.n	80030ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fb16 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 ff58 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d001      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e04e      	b.n	800317a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a23      	ldr	r2, [pc, #140]	; (8003188 <HAL_TIM_Base_Start_IT+0xc4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d01d      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_TIM_Base_Start_IT+0xc8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_TIM_Base_Start_IT+0xcc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1c      	ldr	r2, [pc, #112]	; (8003194 <HAL_TIM_Base_Start_IT+0xd0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <HAL_TIM_Base_Start_IT+0xd4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <HAL_TIM_Base_Start_IT+0xd8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d010      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	e007      	b.n	8003178 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010000 	.word	0x40010000
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800
 8003194:	40000c00 	.word	0x40000c00
 8003198:	40010400 	.word	0x40010400
 800319c:	40014000 	.word	0x40014000
 80031a0:	40001800 	.word	0x40001800

080031a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e041      	b.n	800323a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f839 	bl	8003242 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 fe98 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_TIM_PWM_Start+0x24>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e022      	b.n	80032c2 <HAL_TIM_PWM_Start+0x6a>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d109      	bne.n	8003296 <HAL_TIM_PWM_Start+0x3e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e015      	b.n	80032c2 <HAL_TIM_PWM_Start+0x6a>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d109      	bne.n	80032b0 <HAL_TIM_PWM_Start+0x58>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e008      	b.n	80032c2 <HAL_TIM_PWM_Start+0x6a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07c      	b.n	80033c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0x82>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	e013      	b.n	8003302 <HAL_TIM_PWM_Start+0xaa>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0x92>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e8:	e00b      	b.n	8003302 <HAL_TIM_PWM_Start+0xaa>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0xa2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f8:	e003      	b.n	8003302 <HAL_TIM_PWM_Start+0xaa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fa18 	bl	8004740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2d      	ldr	r2, [pc, #180]	; (80033cc <HAL_TIM_PWM_Start+0x174>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_PWM_Start+0xcc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <HAL_TIM_PWM_Start+0x178>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_TIM_PWM_Start+0xd0>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_TIM_PWM_Start+0xd2>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_TIM_PWM_Start+0x174>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d01d      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <HAL_TIM_PWM_Start+0x17c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_TIM_PWM_Start+0x180>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_TIM_PWM_Start+0x184>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIM_PWM_Start+0x178>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_TIM_PWM_Start+0x188>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIM_PWM_Start+0x136>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_TIM_PWM_Start+0x18c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d111      	bne.n	80033b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b06      	cmp	r3, #6
 800339e:	d010      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	e007      	b.n	80033c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40010400 	.word	0x40010400
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	40014000 	.word	0x40014000
 80033e4:	40001800 	.word	0x40001800

080033e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f9a0 	bl	8004740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <HAL_TIM_PWM_Stop+0xd8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIM_PWM_Stop+0x2c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_TIM_PWM_Stop+0xdc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_TIM_PWM_Stop+0x30>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_TIM_PWM_Stop+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	f241 1311 	movw	r3, #4369	; 0x1111
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <HAL_TIM_PWM_Stop+0x66>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	f240 4344 	movw	r3, #1092	; 0x444
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <HAL_TIM_PWM_Stop+0x66>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	f241 1311 	movw	r3, #4369	; 0x1111
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <HAL_TIM_PWM_Stop+0x96>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	f240 4344 	movw	r3, #1092	; 0x444
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_TIM_PWM_Stop+0x96>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Stop+0xa6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	e013      	b.n	80034b6 <HAL_TIM_PWM_Stop+0xce>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Stop+0xb6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800349c:	e00b      	b.n	80034b6 <HAL_TIM_PWM_Stop+0xce>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Stop+0xc6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	e003      	b.n	80034b6 <HAL_TIM_PWM_Stop+0xce>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40010400 	.word	0x40010400

080034c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e041      	b.n	800355e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f839 	bl	8003566 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fd06 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_TIM_IC_Start_IT+0x1e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e013      	b.n	80035c2 <HAL_TIM_IC_Start_IT+0x46>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d104      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0x2e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e00b      	b.n	80035c2 <HAL_TIM_IC_Start_IT+0x46>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_IC_Start_IT+0x3e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e003      	b.n	80035c2 <HAL_TIM_IC_Start_IT+0x46>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <HAL_TIM_IC_Start_IT+0x58>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e013      	b.n	80035fc <HAL_TIM_IC_Start_IT+0x80>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d104      	bne.n	80035e4 <HAL_TIM_IC_Start_IT+0x68>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e00b      	b.n	80035fc <HAL_TIM_IC_Start_IT+0x80>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d104      	bne.n	80035f4 <HAL_TIM_IC_Start_IT+0x78>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e003      	b.n	80035fc <HAL_TIM_IC_Start_IT+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035fe:	7bbb      	ldrb	r3, [r7, #14]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003604:	7b7b      	ldrb	r3, [r7, #13]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d001      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0cc      	b.n	80037a8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_TIM_IC_Start_IT+0xa2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	e013      	b.n	8003646 <HAL_TIM_IC_Start_IT+0xca>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d104      	bne.n	800362e <HAL_TIM_IC_Start_IT+0xb2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	e00b      	b.n	8003646 <HAL_TIM_IC_Start_IT+0xca>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d104      	bne.n	800363e <HAL_TIM_IC_Start_IT+0xc2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	e003      	b.n	8003646 <HAL_TIM_IC_Start_IT+0xca>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_TIM_IC_Start_IT+0xda>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003654:	e013      	b.n	800367e <HAL_TIM_IC_Start_IT+0x102>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d104      	bne.n	8003666 <HAL_TIM_IC_Start_IT+0xea>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003664:	e00b      	b.n	800367e <HAL_TIM_IC_Start_IT+0x102>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d104      	bne.n	8003676 <HAL_TIM_IC_Start_IT+0xfa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003674:	e003      	b.n	800367e <HAL_TIM_IC_Start_IT+0x102>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d841      	bhi.n	8003708 <HAL_TIM_IC_Start_IT+0x18c>
 8003684:	a201      	add	r2, pc, #4	; (adr r2, 800368c <HAL_TIM_IC_Start_IT+0x110>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036c1 	.word	0x080036c1
 8003690:	08003709 	.word	0x08003709
 8003694:	08003709 	.word	0x08003709
 8003698:	08003709 	.word	0x08003709
 800369c:	080036d3 	.word	0x080036d3
 80036a0:	08003709 	.word	0x08003709
 80036a4:	08003709 	.word	0x08003709
 80036a8:	08003709 	.word	0x08003709
 80036ac:	080036e5 	.word	0x080036e5
 80036b0:	08003709 	.word	0x08003709
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003709 	.word	0x08003709
 80036bc:	080036f7 	.word	0x080036f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0202 	orr.w	r2, r2, #2
 80036ce:	60da      	str	r2, [r3, #12]
      break;
 80036d0:	e01d      	b.n	800370e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0204 	orr.w	r2, r2, #4
 80036e0:	60da      	str	r2, [r3, #12]
      break;
 80036e2:	e014      	b.n	800370e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0208 	orr.w	r2, r2, #8
 80036f2:	60da      	str	r2, [r3, #12]
      break;
 80036f4:	e00b      	b.n	800370e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0210 	orr.w	r2, r2, #16
 8003704:	60da      	str	r2, [r3, #12]
      break;
 8003706:	e002      	b.n	800370e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	bf00      	nop
  }

  if (status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d148      	bne.n	80037a6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f80f 	bl	8004740 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <HAL_TIM_IC_Start_IT+0x234>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d01d      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_TIM_IC_Start_IT+0x238>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d018      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIM_IC_Start_IT+0x23c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_TIM_IC_Start_IT+0x240>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_TIM_IC_Start_IT+0x244>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_TIM_IC_Start_IT+0x248>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x1f6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIM_IC_Start_IT+0x24c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d111      	bne.n	8003796 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b06      	cmp	r3, #6
 8003782:	d010      	beq.n	80037a6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	e007      	b.n	80037a6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40001800 	.word	0x40001800

080037cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e041      	b.n	8003864 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f839 	bl	800386c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f000 fb83 	bl	8003f18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0202 	mvn.w	r2, #2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fba2 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fb05 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fb0c 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0204 	mvn.w	r2, #4
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fb78 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fadb 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fae2 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0208 	mvn.w	r2, #8
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2204      	movs	r2, #4
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fb4e 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fab1 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fab8 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d122      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b10      	cmp	r3, #16
 800399e:	d11b      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0210 	mvn.w	r2, #16
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2208      	movs	r2, #8
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fb24 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa87 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fa8e 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0201 	mvn.w	r2, #1
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fb24 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f001 f89e 	bl	8004b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fa53 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0220 	mvn.w	r2, #32
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 f868 	bl	8004b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_IC_ConfigChannel+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e088      	b.n	8003bc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f000 fc74 	bl	80043b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020c 	bic.w	r2, r2, #12
 8003ade:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
 8003af2:	e060      	b.n	8003bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d11c      	bne.n	8003b34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 fcf8 	bl	80044fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6999      	ldr	r1, [r3, #24]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e040      	b.n	8003bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11b      	bne.n	8003b72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f000 fd45 	bl	80045d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 020c 	bic.w	r2, r2, #12
 8003b5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
 8003b70:	e021      	b.n	8003bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d11c      	bne.n	8003bb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 fd62 	bl	8004650 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69d9      	ldr	r1, [r3, #28]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	61da      	str	r2, [r3, #28]
 8003bb0:	e001      	b.n	8003bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0ae      	b.n	8003d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	f200 809f 	bhi.w	8003d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bf6:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003d35 	.word	0x08003d35
 8003c04:	08003d35 	.word	0x08003d35
 8003c08:	08003d35 	.word	0x08003d35
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003d35 	.word	0x08003d35
 8003c14:	08003d35 	.word	0x08003d35
 8003c18:	08003d35 	.word	0x08003d35
 8003c1c:	08003cb3 	.word	0x08003cb3
 8003c20:	08003d35 	.word	0x08003d35
 8003c24:	08003d35 	.word	0x08003d35
 8003c28:	08003d35 	.word	0x08003d35
 8003c2c:	08003cf3 	.word	0x08003cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa0e 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0208 	orr.w	r2, r2, #8
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	619a      	str	r2, [r3, #24]
      break;
 8003c6e:	e064      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa5e 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6999      	ldr	r1, [r3, #24]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	619a      	str	r2, [r3, #24]
      break;
 8003cb0:	e043      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fab3 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0208 	orr.w	r2, r2, #8
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0204 	bic.w	r2, r2, #4
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	61da      	str	r2, [r3, #28]
      break;
 8003cf0:	e023      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fb07 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	021a      	lsls	r2, r3, #8
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
      break;
 8003d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b4      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x172>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfa>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 fc7d 	bl	8004700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 fc66 	bl	8004700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fb24 	bl	80044a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	; 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc33 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fb80 	bl	8004578 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	; 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fc23 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fb04 	bl	80044a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fc13 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 fc0a 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_TI1_SetConfig+0xcc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01b      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d017      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a25      	ldr	r2, [pc, #148]	; (8004488 <TIM_TI1_SetConfig+0xd0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a24      	ldr	r2, [pc, #144]	; (800448c <TIM_TI1_SetConfig+0xd4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <TIM_TI1_SetConfig+0xd8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <TIM_TI1_SetConfig+0xdc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a21      	ldr	r2, [pc, #132]	; (8004498 <TIM_TI1_SetConfig+0xe0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_TI1_SetConfig+0x66>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a20      	ldr	r2, [pc, #128]	; (800449c <TIM_TI1_SetConfig+0xe4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <TIM_TI1_SetConfig+0x6a>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <TIM_TI1_SetConfig+0x6c>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e003      	b.n	8004442 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	b2db      	uxtb	r3, r3
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f023 030a 	bic.w	r3, r3, #10
 800445c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f003 030a 	and.w	r3, r3, #10
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010000 	.word	0x40010000
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40010400 	.word	0x40010400
 8004498:	40014000 	.word	0x40014000
 800449c:	40001800 	.word	0x40001800

080044a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 030a 	bic.w	r3, r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f023 0210 	bic.w	r2, r3, #16
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	b29b      	uxth	r3, r3
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004550:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	621a      	str	r2, [r3, #32]
}
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0210 	bic.w	r2, r3, #16
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	031b      	lsls	r3, r3, #12
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 0303 	bic.w	r3, r3, #3
 8004604:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004614:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	b2db      	uxtb	r3, r3
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004628:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	031b      	lsls	r3, r3, #12
 8004694:	b29b      	uxth	r3, r3
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f043 0307 	orr.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	431a      	orrs	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2201      	movs	r2, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <HAL_TIMEx_PWMN_Start+0x24>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e022      	b.n	80047f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d109      	bne.n	80047ca <HAL_TIMEx_PWMN_Start+0x3e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e015      	b.n	80047f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d109      	bne.n	80047e4 <HAL_TIMEx_PWMN_Start+0x58>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e008      	b.n	80047f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06d      	b.n	80048da <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIMEx_PWMN_Start+0x82>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800480c:	e013      	b.n	8004836 <HAL_TIMEx_PWMN_Start+0xaa>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIMEx_PWMN_Start+0x92>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800481c:	e00b      	b.n	8004836 <HAL_TIMEx_PWMN_Start+0xaa>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIMEx_PWMN_Start+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	e003      	b.n	8004836 <HAL_TIMEx_PWMN_Start+0xaa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2204      	movs	r2, #4
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f99e 	bl	8004b80 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <HAL_TIMEx_PWMN_Start+0x158>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d022      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d01d      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d018      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1d      	ldr	r2, [pc, #116]	; (80048ec <HAL_TIMEx_PWMN_Start+0x160>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_TIMEx_PWMN_Start+0x164>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <HAL_TIMEx_PWMN_Start+0x168>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d009      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_TIMEx_PWMN_Start+0x118>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_TIMEx_PWMN_Start+0x170>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d111      	bne.n	80048c8 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d010      	beq.n	80048d8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	e007      	b.n	80048d8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40001800 	.word	0x40001800

08004900 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f934 	bl	8004b80 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <HAL_TIMEx_PWMN_Stop+0x48>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	f240 4344 	movw	r3, #1092	; 0x444
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_TIMEx_PWMN_Stop+0x48>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <HAL_TIMEx_PWMN_Stop+0x78>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	f240 4344 	movw	r3, #1092	; 0x444
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_TIMEx_PWMN_Stop+0x78>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_TIMEx_PWMN_Stop+0x88>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004986:	e013      	b.n	80049b0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d104      	bne.n	8004998 <HAL_TIMEx_PWMN_Stop+0x98>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004996:	e00b      	b.n	80049b0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d104      	bne.n	80049a8 <HAL_TIMEx_PWMN_Stop+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a6:	e003      	b.n	80049b0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e05a      	b.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d01d      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d018      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a17      	ldr	r2, [pc, #92]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10c      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40001800 	.word	0x40001800

08004ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e03d      	b.n	8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2204      	movs	r2, #4
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1a      	ldr	r2, [r3, #32]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1a      	ldr	r2, [r3, #32]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e03f      	b.n	8004c5c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc fe83 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2224      	movs	r2, #36	; 0x24
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f928 	bl	8004e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d17c      	bne.n	8004d7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_UART_Transmit+0x2c>
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e075      	b.n	8004d80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Transmit+0x3e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e06e      	b.n	8004d80 <HAL_UART_Transmit+0x11c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2221      	movs	r2, #33	; 0x21
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb8:	f7fd f896 	bl	8001de8 <HAL_GetTick>
 8004cbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d108      	bne.n	8004ce6 <HAL_UART_Transmit+0x82>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e003      	b.n	8004cee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cf6:	e02a      	b.n	8004d4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f840 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e036      	b.n	8004d80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e007      	b.n	8004d40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1cf      	bne.n	8004cf8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2140      	movs	r1, #64	; 0x40
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f810 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e006      	b.n	8004d80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b090      	sub	sp, #64	; 0x40
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d98:	e050      	b.n	8004e3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d04c      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da8:	f7fd f81e 	bl	8001de8 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d241      	bcs.n	8004e3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3314      	adds	r3, #20
 8004df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3314      	adds	r3, #20
 8004e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e0c:	623a      	str	r2, [r7, #32]
 8004e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e00f      	b.n	8004e5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4013      	ands	r3, r2
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d09f      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3740      	adds	r7, #64	; 0x40
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b0c0      	sub	sp, #256	; 0x100
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	ea40 0301 	orr.w	r3, r0, r1
 8004e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ebc:	f021 010c 	bic.w	r1, r1, #12
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	6999      	ldr	r1, [r3, #24]
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	ea40 0301 	orr.w	r3, r0, r1
 8004eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b8f      	ldr	r3, [pc, #572]	; (8005130 <UART_SetConfig+0x2cc>)
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d005      	beq.n	8004f04 <UART_SetConfig+0xa0>
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b8d      	ldr	r3, [pc, #564]	; (8005134 <UART_SetConfig+0x2d0>)
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d104      	bne.n	8004f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f04:	f7fd fbac 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8004f08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f0c:	e003      	b.n	8004f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f0e:	f7fd fb93 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8004f12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f20:	f040 810c 	bne.w	800513c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	1891      	adds	r1, r2, r2
 8004f3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f3e:	415b      	adcs	r3, r3
 8004f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f46:	4621      	mov	r1, r4
 8004f48:	eb12 0801 	adds.w	r8, r2, r1
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	eb43 0901 	adc.w	r9, r3, r1
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f66:	4690      	mov	r8, r2
 8004f68:	4699      	mov	r9, r3
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	eb18 0303 	adds.w	r3, r8, r3
 8004f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f74:	462b      	mov	r3, r5
 8004f76:	eb49 0303 	adc.w	r3, r9, r3
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f92:	460b      	mov	r3, r1
 8004f94:	18db      	adds	r3, r3, r3
 8004f96:	653b      	str	r3, [r7, #80]	; 0x50
 8004f98:	4613      	mov	r3, r2
 8004f9a:	eb42 0303 	adc.w	r3, r2, r3
 8004f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fa8:	f7fb fd78 	bl	8000a9c <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4b61      	ldr	r3, [pc, #388]	; (8005138 <UART_SetConfig+0x2d4>)
 8004fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	011c      	lsls	r4, r3, #4
 8004fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fdc:	4641      	mov	r1, r8
 8004fde:	eb12 0a01 	adds.w	sl, r2, r1
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ffc:	4692      	mov	sl, r2
 8004ffe:	469b      	mov	fp, r3
 8005000:	4643      	mov	r3, r8
 8005002:	eb1a 0303 	adds.w	r3, sl, r3
 8005006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800500a:	464b      	mov	r3, r9
 800500c:	eb4b 0303 	adc.w	r3, fp, r3
 8005010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005020:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005028:	460b      	mov	r3, r1
 800502a:	18db      	adds	r3, r3, r3
 800502c:	643b      	str	r3, [r7, #64]	; 0x40
 800502e:	4613      	mov	r3, r2
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	647b      	str	r3, [r7, #68]	; 0x44
 8005036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800503a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800503e:	f7fb fd2d 	bl	8000a9c <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4611      	mov	r1, r2
 8005048:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <UART_SetConfig+0x2d4>)
 800504a:	fba3 2301 	umull	r2, r3, r3, r1
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2264      	movs	r2, #100	; 0x64
 8005052:	fb02 f303 	mul.w	r3, r2, r3
 8005056:	1acb      	subs	r3, r1, r3
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <UART_SetConfig+0x2d4>)
 8005060:	fba3 2302 	umull	r2, r3, r3, r2
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800506c:	441c      	add	r4, r3
 800506e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005072:	2200      	movs	r2, #0
 8005074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005078:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800507c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005080:	4642      	mov	r2, r8
 8005082:	464b      	mov	r3, r9
 8005084:	1891      	adds	r1, r2, r2
 8005086:	63b9      	str	r1, [r7, #56]	; 0x38
 8005088:	415b      	adcs	r3, r3
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005090:	4641      	mov	r1, r8
 8005092:	1851      	adds	r1, r2, r1
 8005094:	6339      	str	r1, [r7, #48]	; 0x30
 8005096:	4649      	mov	r1, r9
 8005098:	414b      	adcs	r3, r1
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050a8:	4659      	mov	r1, fp
 80050aa:	00cb      	lsls	r3, r1, #3
 80050ac:	4651      	mov	r1, sl
 80050ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b2:	4651      	mov	r1, sl
 80050b4:	00ca      	lsls	r2, r1, #3
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	4642      	mov	r2, r8
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c4:	464b      	mov	r3, r9
 80050c6:	460a      	mov	r2, r1
 80050c8:	eb42 0303 	adc.w	r3, r2, r3
 80050cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050e4:	460b      	mov	r3, r1
 80050e6:	18db      	adds	r3, r3, r3
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ea:	4613      	mov	r3, r2
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050fa:	f7fb fccf 	bl	8000a9c <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <UART_SetConfig+0x2d4>)
 8005104:	fba3 1302 	umull	r1, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2164      	movs	r1, #100	; 0x64
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	3332      	adds	r3, #50	; 0x32
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <UART_SetConfig+0x2d4>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f003 0207 	and.w	r2, r3, #7
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4422      	add	r2, r4
 800512a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800512c:	e105      	b.n	800533a <UART_SetConfig+0x4d6>
 800512e:	bf00      	nop
 8005130:	40011000 	.word	0x40011000
 8005134:	40011400 	.word	0x40011400
 8005138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800513c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800514a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800514e:	4642      	mov	r2, r8
 8005150:	464b      	mov	r3, r9
 8005152:	1891      	adds	r1, r2, r2
 8005154:	6239      	str	r1, [r7, #32]
 8005156:	415b      	adcs	r3, r3
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
 800515a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800515e:	4641      	mov	r1, r8
 8005160:	1854      	adds	r4, r2, r1
 8005162:	4649      	mov	r1, r9
 8005164:	eb43 0501 	adc.w	r5, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	00eb      	lsls	r3, r5, #3
 8005172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005176:	00e2      	lsls	r2, r4, #3
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	4643      	mov	r3, r8
 800517e:	18e3      	adds	r3, r4, r3
 8005180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005184:	464b      	mov	r3, r9
 8005186:	eb45 0303 	adc.w	r3, r5, r3
 800518a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800519a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051aa:	4629      	mov	r1, r5
 80051ac:	008b      	lsls	r3, r1, #2
 80051ae:	4621      	mov	r1, r4
 80051b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b4:	4621      	mov	r1, r4
 80051b6:	008a      	lsls	r2, r1, #2
 80051b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051bc:	f7fb fc6e 	bl	8000a9c <__aeabi_uldivmod>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4b60      	ldr	r3, [pc, #384]	; (8005348 <UART_SetConfig+0x4e4>)
 80051c6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	011c      	lsls	r4, r3, #4
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	1891      	adds	r1, r2, r2
 80051e6:	61b9      	str	r1, [r7, #24]
 80051e8:	415b      	adcs	r3, r3
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f0:	4641      	mov	r1, r8
 80051f2:	1851      	adds	r1, r2, r1
 80051f4:	6139      	str	r1, [r7, #16]
 80051f6:	4649      	mov	r1, r9
 80051f8:	414b      	adcs	r3, r1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005208:	4659      	mov	r1, fp
 800520a:	00cb      	lsls	r3, r1, #3
 800520c:	4651      	mov	r1, sl
 800520e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005212:	4651      	mov	r1, sl
 8005214:	00ca      	lsls	r2, r1, #3
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	4603      	mov	r3, r0
 800521c:	4642      	mov	r2, r8
 800521e:	189b      	adds	r3, r3, r2
 8005220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005224:	464b      	mov	r3, r9
 8005226:	460a      	mov	r2, r1
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	67bb      	str	r3, [r7, #120]	; 0x78
 800523a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005248:	4649      	mov	r1, r9
 800524a:	008b      	lsls	r3, r1, #2
 800524c:	4641      	mov	r1, r8
 800524e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005252:	4641      	mov	r1, r8
 8005254:	008a      	lsls	r2, r1, #2
 8005256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800525a:	f7fb fc1f 	bl	8000a9c <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <UART_SetConfig+0x4e4>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a34      	ldr	r2, [pc, #208]	; (8005348 <UART_SetConfig+0x4e4>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005282:	441c      	add	r4, r3
 8005284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005288:	2200      	movs	r2, #0
 800528a:	673b      	str	r3, [r7, #112]	; 0x70
 800528c:	677a      	str	r2, [r7, #116]	; 0x74
 800528e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005292:	4642      	mov	r2, r8
 8005294:	464b      	mov	r3, r9
 8005296:	1891      	adds	r1, r2, r2
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	415b      	adcs	r3, r3
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052a2:	4641      	mov	r1, r8
 80052a4:	1851      	adds	r1, r2, r1
 80052a6:	6039      	str	r1, [r7, #0]
 80052a8:	4649      	mov	r1, r9
 80052aa:	414b      	adcs	r3, r1
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052ba:	4659      	mov	r1, fp
 80052bc:	00cb      	lsls	r3, r1, #3
 80052be:	4651      	mov	r1, sl
 80052c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052c4:	4651      	mov	r1, sl
 80052c6:	00ca      	lsls	r2, r1, #3
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	4603      	mov	r3, r0
 80052ce:	4642      	mov	r2, r8
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052d4:	464b      	mov	r3, r9
 80052d6:	460a      	mov	r2, r1
 80052d8:	eb42 0303 	adc.w	r3, r2, r3
 80052dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	663b      	str	r3, [r7, #96]	; 0x60
 80052e8:	667a      	str	r2, [r7, #100]	; 0x64
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052f6:	4649      	mov	r1, r9
 80052f8:	008b      	lsls	r3, r1, #2
 80052fa:	4641      	mov	r1, r8
 80052fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005300:	4641      	mov	r1, r8
 8005302:	008a      	lsls	r2, r1, #2
 8005304:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005308:	f7fb fbc8 	bl	8000a9c <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <UART_SetConfig+0x4e4>)
 8005312:	fba3 1302 	umull	r1, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2164      	movs	r1, #100	; 0x64
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	3332      	adds	r3, #50	; 0x32
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <UART_SetConfig+0x4e4>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f003 020f 	and.w	r2, r3, #15
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4422      	add	r2, r4
 8005338:	609a      	str	r2, [r3, #8]
}
 800533a:	bf00      	nop
 800533c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005346:	bf00      	nop
 8005348:	51eb851f 	.word	0x51eb851f

0800534c <__NVIC_SetPriority>:
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	6039      	str	r1, [r7, #0]
 8005356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	db0a      	blt.n	8005376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	490c      	ldr	r1, [pc, #48]	; (8005398 <__NVIC_SetPriority+0x4c>)
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	440b      	add	r3, r1
 8005370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005374:	e00a      	b.n	800538c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4908      	ldr	r1, [pc, #32]	; (800539c <__NVIC_SetPriority+0x50>)
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	3b04      	subs	r3, #4
 8005384:	0112      	lsls	r2, r2, #4
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	440b      	add	r3, r1
 800538a:	761a      	strb	r2, [r3, #24]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000e100 	.word	0xe000e100
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053a4:	2100      	movs	r1, #0
 80053a6:	f06f 0004 	mvn.w	r0, #4
 80053aa:	f7ff ffcf 	bl	800534c <__NVIC_SetPriority>
#endif
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ba:	f3ef 8305 	mrs	r3, IPSR
 80053be:	603b      	str	r3, [r7, #0]
  return(result);
 80053c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053c6:	f06f 0305 	mvn.w	r3, #5
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	e00c      	b.n	80053e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <osKernelInitialize+0x44>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <osKernelInitialize+0x44>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053dc:	2300      	movs	r3, #0
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e002      	b.n	80053e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053e8:	687b      	ldr	r3, [r7, #4]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	200002bc 	.word	0x200002bc

080053fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005402:	f3ef 8305 	mrs	r3, IPSR
 8005406:	603b      	str	r3, [r7, #0]
  return(result);
 8005408:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <osKernelStart+0x1a>
    stat = osErrorISR;
 800540e:	f06f 0305 	mvn.w	r3, #5
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	e010      	b.n	8005438 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <osKernelStart+0x48>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d109      	bne.n	8005432 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800541e:	f7ff ffbf 	bl	80053a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <osKernelStart+0x48>)
 8005424:	2202      	movs	r2, #2
 8005426:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005428:	f001 f866 	bl	80064f8 <vTaskStartScheduler>
      stat = osOK;
 800542c:	2300      	movs	r3, #0
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e002      	b.n	8005438 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005438:	687b      	ldr	r3, [r7, #4]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	200002bc 	.word	0x200002bc

08005448 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b08e      	sub	sp, #56	; 0x38
 800544c:	af04      	add	r7, sp, #16
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005458:	f3ef 8305 	mrs	r3, IPSR
 800545c:	617b      	str	r3, [r7, #20]
  return(result);
 800545e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005460:	2b00      	cmp	r3, #0
 8005462:	d17e      	bne.n	8005562 <osThreadNew+0x11a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d07b      	beq.n	8005562 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800546e:	2318      	movs	r3, #24
 8005470:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295
 800547a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d045      	beq.n	800550e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <osThreadNew+0x48>
        name = attr->name;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <osThreadNew+0x6e>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b38      	cmp	r3, #56	; 0x38
 80054a8:	d805      	bhi.n	80054b6 <osThreadNew+0x6e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <osThreadNew+0x72>
        return (NULL);
 80054b6:	2300      	movs	r3, #0
 80054b8:	e054      	b.n	8005564 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <osThreadNew+0xa8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b5b      	cmp	r3, #91	; 0x5b
 80054d8:	d90a      	bls.n	80054f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <osThreadNew+0xa8>
        mem = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e010      	b.n	8005512 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10c      	bne.n	8005512 <osThreadNew+0xca>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d108      	bne.n	8005512 <osThreadNew+0xca>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <osThreadNew+0xca>
          mem = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e001      	b.n	8005512 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005520:	9202      	str	r2, [sp, #8]
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6a3a      	ldr	r2, [r7, #32]
 800552c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fe0c 	bl	800614c <xTaskCreateStatic>
 8005534:	4603      	mov	r3, r0
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	e013      	b.n	8005562 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d110      	bne.n	8005562 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	b29a      	uxth	r2, r3
 8005544:	f107 0310 	add.w	r3, r7, #16
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fe57 	bl	8006206 <xTaskCreate>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d001      	beq.n	8005562 <osThreadNew+0x11a>
            hTask = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005562:	693b      	ldr	r3, [r7, #16]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005574:	f3ef 8305 	mrs	r3, IPSR
 8005578:	60bb      	str	r3, [r7, #8]
  return(result);
 800557a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <osDelay+0x1c>
    stat = osErrorISR;
 8005580:	f06f 0305 	mvn.w	r3, #5
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e007      	b.n	8005598 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 ff7c 	bl	8006490 <vTaskDelay>
    }
  }

  return (stat);
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80055b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a06      	ldr	r2, [pc, #24]	; (80055d4 <vApplicationGetIdleTaskMemory+0x30>)
 80055ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	200002c0 	.word	0x200002c0
 80055d4:	2000031c 	.word	0x2000031c

080055d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a07      	ldr	r2, [pc, #28]	; (8005604 <vApplicationGetTimerTaskMemory+0x2c>)
 80055e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a06      	ldr	r2, [pc, #24]	; (8005608 <vApplicationGetTimerTaskMemory+0x30>)
 80055ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f6:	601a      	str	r2, [r3, #0]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	2000051c 	.word	0x2000051c
 8005608:	20000578 	.word	0x20000578

0800560c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f103 0208 	add.w	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f103 0208 	add.w	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f103 0208 	add.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]
}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d103      	bne.n	80056ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e00c      	b.n	80056e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3308      	adds	r3, #8
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e002      	b.n	80056dc <vListInsert+0x2e>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d2f6      	bcs.n	80056d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6892      	ldr	r2, [r2, #8]
 8005736:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6852      	ldr	r2, [r2, #4]
 8005740:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d103      	bne.n	8005754 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800579e:	f002 f851 	bl	8007844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057ae:	fb01 f303 	mul.w	r3, r1, r3
 80057b2:	441a      	add	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	3b01      	subs	r3, #1
 80057d0:	68f9      	ldr	r1, [r7, #12]
 80057d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	441a      	add	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	22ff      	movs	r2, #255	; 0xff
 80057ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d114      	bne.n	800581e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01a      	beq.n	8005832 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3310      	adds	r3, #16
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f903 	bl	8006a0c <xTaskRemoveFromEventList>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d012      	beq.n	8005832 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <xQueueGenericReset+0xcc>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	e009      	b.n	8005832 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3310      	adds	r3, #16
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fef2 	bl	800560c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff feed 	bl	800560c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005832:	f002 f837 	bl	80078a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005836:	2301      	movs	r3, #1
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08e      	sub	sp, #56	; 0x38
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <xQueueGenericCreateStatic+0x52>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <xQueueGenericCreateStatic+0x56>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <xQueueGenericCreateStatic+0x58>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <xQueueGenericCreateStatic+0x7e>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <xQueueGenericCreateStatic+0x82>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <xQueueGenericCreateStatic+0x84>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	61fb      	str	r3, [r7, #28]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058e2:	2350      	movs	r3, #80	; 0x50
 80058e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b50      	cmp	r3, #80	; 0x50
 80058ea:	d00a      	beq.n	8005902 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	61bb      	str	r3, [r7, #24]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005902:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00d      	beq.n	800592a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005916:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f805 	bl	8005934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800592c:	4618      	mov	r0, r3
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e002      	b.n	8005956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005962:	2101      	movs	r1, #1
 8005964:	69b8      	ldr	r0, [r7, #24]
 8005966:	f7ff ff05 	bl	8005774 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <xQueueGenericSend+0x32>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d103      	bne.n	80059bc <xQueueGenericSend+0x40>
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <xQueueGenericSend+0x44>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <xQueueGenericSend+0x46>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <xQueueGenericSend+0x60>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x6e>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <xQueueGenericSend+0x72>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xQueueGenericSend+0x74>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	623b      	str	r3, [r7, #32]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a0a:	f001 f9bd 	bl	8006d88 <xTaskGetSchedulerState>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <xQueueGenericSend+0x9e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <xQueueGenericSend+0xa2>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueGenericSend+0xa4>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a3a:	f001 ff03 	bl	8007844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d302      	bcc.n	8005a50 <xQueueGenericSend+0xd4>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d129      	bne.n	8005aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a56:	f000 fa0b 	bl	8005e70 <prvCopyDataToQueue>
 8005a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d010      	beq.n	8005a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	3324      	adds	r3, #36	; 0x24
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 ffcf 	bl	8006a0c <xTaskRemoveFromEventList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d013      	beq.n	8005a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a74:	4b3f      	ldr	r3, [pc, #252]	; (8005b74 <xQueueGenericSend+0x1f8>)
 8005a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	e00a      	b.n	8005a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a8c:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <xQueueGenericSend+0x1f8>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a9c:	f001 ff02 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e063      	b.n	8005b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aaa:	f001 fefb 	bl	80078a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e05c      	b.n	8005b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 f809 	bl	8006ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ac6:	f001 feed 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aca:	f000 fd7b 	bl	80065c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ace:	f001 feb9 	bl	8007844 <vPortEnterCritical>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ad8:	b25b      	sxtb	r3, r3
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d103      	bne.n	8005ae8 <xQueueGenericSend+0x16c>
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d103      	bne.n	8005afe <xQueueGenericSend+0x182>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afe:	f001 fed1 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b02:	1d3a      	adds	r2, r7, #4
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fff8 	bl	8006b00 <xTaskCheckForTimeOut>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d124      	bne.n	8005b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b18:	f000 faa2 	bl	8006060 <prvIsQueueFull>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	3310      	adds	r3, #16
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff1e 	bl	800696c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b32:	f000 fa2d 	bl	8005f90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b36:	f000 fd53 	bl	80065e0 <xTaskResumeAll>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f47f af7c 	bne.w	8005a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <xQueueGenericSend+0x1f8>)
 8005b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	e772      	b.n	8005a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b56:	f000 fa1b 	bl	8005f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b5a:	f000 fd41 	bl	80065e0 <xTaskResumeAll>
 8005b5e:	e76c      	b.n	8005a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b62:	f000 fa15 	bl	8005f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b66:	f000 fd3b 	bl	80065e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3738      	adds	r7, #56	; 0x38
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b090      	sub	sp, #64	; 0x40
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <xQueueGenericSendFromISR+0x3c>
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <xQueueGenericSendFromISR+0x40>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <xQueueGenericSendFromISR+0x42>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d103      	bne.n	8005be2 <xQueueGenericSendFromISR+0x6a>
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <xQueueGenericSendFromISR+0x6e>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <xQueueGenericSendFromISR+0x70>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c02:	f001 ff01 	bl	8007a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c06:	f3ef 8211 	mrs	r2, BASEPRI
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	61fa      	str	r2, [r7, #28]
 8005c1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d302      	bcc.n	8005c34 <xQueueGenericSendFromISR+0xbc>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d12f      	bne.n	8005c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c4a:	f000 f911 	bl	8005e70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d112      	bne.n	8005c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d016      	beq.n	8005c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fed1 	bl	8006a0c <xTaskRemoveFromEventList>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e007      	b.n	8005c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c82:	3301      	adds	r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	b25a      	sxtb	r2, r3
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c92:	e001      	b.n	8005c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3740      	adds	r7, #64	; 0x40
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	; 0x30
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <xQueueReceive+0x30>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	623b      	str	r3, [r7, #32]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <xQueueReceive+0x3e>
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <xQueueReceive+0x42>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <xQueueReceive+0x44>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <xQueueReceive+0x5e>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	61fb      	str	r3, [r7, #28]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d0e:	f001 f83b 	bl	8006d88 <xTaskGetSchedulerState>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <xQueueReceive+0x6e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <xQueueReceive+0x72>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <xQueueReceive+0x74>
 8005d22:	2300      	movs	r3, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xQueueReceive+0x8e>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	61bb      	str	r3, [r7, #24]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d3e:	f001 fd81 	bl	8007844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01f      	beq.n	8005d8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d52:	f000 f8f7 	bl	8005f44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1e5a      	subs	r2, r3, #1
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00f      	beq.n	8005d86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	3310      	adds	r3, #16
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fe4e 	bl	8006a0c <xTaskRemoveFromEventList>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d76:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <xQueueReceive+0x1bc>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d86:	f001 fd8d 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e069      	b.n	8005e62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d94:	f001 fd86 	bl	80078a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e062      	b.n	8005e62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da2:	f107 0310 	add.w	r3, r7, #16
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fe94 	bl	8006ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005db0:	f001 fd78 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005db4:	f000 fc06 	bl	80065c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005db8:	f001 fd44 	bl	8007844 <vPortEnterCritical>
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <xQueueReceive+0x122>
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d103      	bne.n	8005de8 <xQueueReceive+0x138>
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de8:	f001 fd5c 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dec:	1d3a      	adds	r2, r7, #4
 8005dee:	f107 0310 	add.w	r3, r7, #16
 8005df2:	4611      	mov	r1, r2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fe83 	bl	8006b00 <xTaskCheckForTimeOut>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d123      	bne.n	8005e48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e02:	f000 f917 	bl	8006034 <prvIsQueueEmpty>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d017      	beq.n	8005e3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fda9 	bl	800696c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1c:	f000 f8b8 	bl	8005f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e20:	f000 fbde 	bl	80065e0 <xTaskResumeAll>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d189      	bne.n	8005d3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e2a:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <xQueueReceive+0x1bc>)
 8005e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	e780      	b.n	8005d3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3e:	f000 f8a7 	bl	8005f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e42:	f000 fbcd 	bl	80065e0 <xTaskResumeAll>
 8005e46:	e77a      	b.n	8005d3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4a:	f000 f8a1 	bl	8005f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e4e:	f000 fbc7 	bl	80065e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e54:	f000 f8ee 	bl	8006034 <prvIsQueueEmpty>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f43f af6f 	beq.w	8005d3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3730      	adds	r7, #48	; 0x30
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d14d      	bne.n	8005f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ff92 	bl	8006dc4 <xTaskPriorityDisinherit>
 8005ea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	e043      	b.n	8005f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d119      	bne.n	8005ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6858      	ldr	r0, [r3, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	f001 fff8 	bl	8007eb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d32b      	bcc.n	8005f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	e026      	b.n	8005f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68d8      	ldr	r0, [r3, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	461a      	mov	r2, r3
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	f001 ffde 	bl	8007eb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	425b      	negs	r3, r3
 8005efe:	441a      	add	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d207      	bcs.n	8005f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	425b      	negs	r3, r3
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d105      	bne.n	8005f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f3a:	697b      	ldr	r3, [r7, #20]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	441a      	add	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d303      	bcc.n	8005f78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68d9      	ldr	r1, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	461a      	mov	r2, r3
 8005f82:	6838      	ldr	r0, [r7, #0]
 8005f84:	f001 ff94 	bl	8007eb0 <memcpy>
	}
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f98:	f001 fc54 	bl	8007844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa4:	e011      	b.n	8005fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d012      	beq.n	8005fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3324      	adds	r3, #36	; 0x24
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fd2a 	bl	8006a0c <xTaskRemoveFromEventList>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fbe:	f000 fe01 	bl	8006bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dce9      	bgt.n	8005fa6 <prvUnlockQueue+0x16>
 8005fd2:	e000      	b.n	8005fd6 <prvUnlockQueue+0x46>
					break;
 8005fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	22ff      	movs	r2, #255	; 0xff
 8005fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fde:	f001 fc61 	bl	80078a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fe2:	f001 fc2f 	bl	8007844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fee:	e011      	b.n	8006014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d012      	beq.n	800601e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3310      	adds	r3, #16
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fd05 	bl	8006a0c <xTaskRemoveFromEventList>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006008:	f000 fddc 	bl	8006bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	3b01      	subs	r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006018:	2b00      	cmp	r3, #0
 800601a:	dce9      	bgt.n	8005ff0 <prvUnlockQueue+0x60>
 800601c:	e000      	b.n	8006020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800601e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	22ff      	movs	r2, #255	; 0xff
 8006024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006028:	f001 fc3c 	bl	80078a4 <vPortExitCritical>
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800603c:	f001 fc02 	bl	8007844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006048:	2301      	movs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e001      	b.n	8006052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006052:	f001 fc27 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006068:	f001 fbec 	bl	8007844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006074:	429a      	cmp	r2, r3
 8006076:	d102      	bne.n	800607e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e001      	b.n	8006082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006082:	f001 fc0f 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8006086:	68fb      	ldr	r3, [r7, #12]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e014      	b.n	80060ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060a0:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <vQueueAddToRegistry+0x50>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060ac:	490c      	ldr	r1, [pc, #48]	; (80060e0 <vQueueAddToRegistry+0x50>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060b6:	4a0a      	ldr	r2, [pc, #40]	; (80060e0 <vQueueAddToRegistry+0x50>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060c2:	e006      	b.n	80060d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b07      	cmp	r3, #7
 80060ce:	d9e7      	bls.n	80060a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000978 	.word	0x20000978

080060e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060f4:	f001 fba6 	bl	8007844 <vPortEnterCritical>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d103      	bne.n	800610e <vQueueWaitForMessageRestricted+0x2a>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006114:	b25b      	sxtb	r3, r3
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d103      	bne.n	8006124 <vQueueWaitForMessageRestricted+0x40>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006124:	f001 fbbe 	bl	80078a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fc3b 	bl	80069b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff26 	bl	8005f90 <prvUnlockQueue>
	}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08e      	sub	sp, #56	; 0x38
 8006150:	af04      	add	r7, sp, #16
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800615a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	623b      	str	r3, [r7, #32]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xTaskCreateStatic+0x46>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	61fb      	str	r3, [r7, #28]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006192:	235c      	movs	r3, #92	; 0x5c
 8006194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b5c      	cmp	r3, #92	; 0x5c
 800619a:	d00a      	beq.n	80061b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	61bb      	str	r3, [r7, #24]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01e      	beq.n	80061f8 <xTaskCreateStatic+0xac>
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061d2:	2300      	movs	r3, #0
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	f107 0314 	add.w	r3, r7, #20
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f850 	bl	8006290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061f2:	f000 f8dd 	bl	80063b0 <prvAddNewTaskToReadyList>
 80061f6:	e001      	b.n	80061fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061fc:	697b      	ldr	r3, [r7, #20]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3728      	adds	r7, #40	; 0x28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08c      	sub	sp, #48	; 0x30
 800620a:	af04      	add	r7, sp, #16
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fc34 	bl	8007a88 <pvPortMalloc>
 8006220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006228:	205c      	movs	r0, #92	; 0x5c
 800622a:	f001 fc2d 	bl	8007a88 <pvPortMalloc>
 800622e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
 800623c:	e005      	b.n	800624a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800623e:	6978      	ldr	r0, [r7, #20]
 8006240:	f001 fcee 	bl	8007c20 <vPortFree>
 8006244:	e001      	b.n	800624a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	2300      	movs	r3, #0
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	9302      	str	r3, [sp, #8]
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f80e 	bl	8006290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006274:	69f8      	ldr	r0, [r7, #28]
 8006276:	f000 f89b 	bl	80063b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e002      	b.n	8006286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006280:	f04f 33ff 	mov.w	r3, #4294967295
 8006284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006286:	69bb      	ldr	r3, [r7, #24]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	461a      	mov	r2, r3
 80062a8:	21a5      	movs	r1, #165	; 0xa5
 80062aa:	f001 fe0f 	bl	8007ecc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062b8:	3b01      	subs	r3, #1
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	617b      	str	r3, [r7, #20]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01f      	beq.n	800632e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	e012      	b.n	800631a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	7819      	ldrb	r1, [r3, #0]
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	3334      	adds	r3, #52	; 0x34
 8006304:	460a      	mov	r2, r1
 8006306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d006      	beq.n	8006322 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3301      	adds	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b0f      	cmp	r3, #15
 800631e:	d9e9      	bls.n	80062f4 <prvInitialiseNewTask+0x64>
 8006320:	e000      	b.n	8006324 <prvInitialiseNewTask+0x94>
			{
				break;
 8006322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800632c:	e003      	b.n	8006336 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	2b37      	cmp	r3, #55	; 0x37
 800633a:	d901      	bls.n	8006340 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800633c:	2337      	movs	r3, #55	; 0x37
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff f978 	bl	800564c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	3318      	adds	r3, #24
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff f973 	bl	800564c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	2200      	movs	r2, #0
 8006380:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	68f9      	ldr	r1, [r7, #12]
 800638e:	69b8      	ldr	r0, [r7, #24]
 8006390:	f001 f928 	bl	80075e4 <pxPortInitialiseStack>
 8006394:	4602      	mov	r2, r0
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a6:	bf00      	nop
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063b8:	f001 fa44 	bl	8007844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063bc:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <prvAddNewTaskToReadyList+0xc4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	4a2c      	ldr	r2, [pc, #176]	; (8006474 <prvAddNewTaskToReadyList+0xc4>)
 80063c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063c6:	4b2c      	ldr	r3, [pc, #176]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ce:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <prvAddNewTaskToReadyList+0xc4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d110      	bne.n	80063fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063dc:	f000 fc16 	bl	8006c0c <prvInitialiseTaskLists>
 80063e0:	e00d      	b.n	80063fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063e2:	4b26      	ldr	r3, [pc, #152]	; (800647c <prvAddNewTaskToReadyList+0xcc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ea:	4b23      	ldr	r3, [pc, #140]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d802      	bhi.n	80063fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063fe:	4b20      	ldr	r3, [pc, #128]	; (8006480 <prvAddNewTaskToReadyList+0xd0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <prvAddNewTaskToReadyList+0xd0>)
 8006406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <prvAddNewTaskToReadyList+0xd0>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <prvAddNewTaskToReadyList+0xd4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d903      	bls.n	8006424 <prvAddNewTaskToReadyList+0x74>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a18      	ldr	r2, [pc, #96]	; (8006484 <prvAddNewTaskToReadyList+0xd4>)
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <prvAddNewTaskToReadyList+0xd8>)
 8006432:	441a      	add	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f7ff f913 	bl	8005666 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006440:	f001 fa30 	bl	80078a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <prvAddNewTaskToReadyList+0xcc>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	429a      	cmp	r2, r3
 8006458:	d207      	bcs.n	800646a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800645a:	4b0c      	ldr	r3, [pc, #48]	; (800648c <prvAddNewTaskToReadyList+0xdc>)
 800645c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000e8c 	.word	0x20000e8c
 8006478:	200009b8 	.word	0x200009b8
 800647c:	20000e98 	.word	0x20000e98
 8006480:	20000ea8 	.word	0x20000ea8
 8006484:	20000e94 	.word	0x20000e94
 8006488:	200009bc 	.word	0x200009bc
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <vTaskDelay+0x60>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <vTaskDelay+0x30>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064c0:	f000 f880 	bl	80065c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fcea 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064cc:	f000 f888 	bl	80065e0 <xTaskResumeAll>
 80064d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064d8:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <vTaskDelay+0x64>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000eb4 	.word	0x20000eb4
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006506:	463a      	mov	r2, r7
 8006508:	1d39      	adds	r1, r7, #4
 800650a:	f107 0308 	add.w	r3, r7, #8
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f848 	bl	80055a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	9202      	str	r2, [sp, #8]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	460a      	mov	r2, r1
 8006526:	4921      	ldr	r1, [pc, #132]	; (80065ac <vTaskStartScheduler+0xb4>)
 8006528:	4821      	ldr	r0, [pc, #132]	; (80065b0 <vTaskStartScheduler+0xb8>)
 800652a:	f7ff fe0f 	bl	800614c <xTaskCreateStatic>
 800652e:	4603      	mov	r3, r0
 8006530:	4a20      	ldr	r2, [pc, #128]	; (80065b4 <vTaskStartScheduler+0xbc>)
 8006532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006534:	4b1f      	ldr	r3, [pc, #124]	; (80065b4 <vTaskStartScheduler+0xbc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e001      	b.n	8006546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d102      	bne.n	8006552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800654c:	f000 fcfc 	bl	8006f48 <xTimerCreateTimerTask>
 8006550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d116      	bne.n	8006586 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	613b      	str	r3, [r7, #16]
}
 800656a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <vTaskStartScheduler+0xc0>)
 800656e:	f04f 32ff 	mov.w	r2, #4294967295
 8006572:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006574:	4b11      	ldr	r3, [pc, #68]	; (80065bc <vTaskStartScheduler+0xc4>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <vTaskStartScheduler+0xc8>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006580:	f001 f8be 	bl	8007700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006584:	e00e      	b.n	80065a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d10a      	bne.n	80065a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60fb      	str	r3, [r7, #12]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <vTaskStartScheduler+0xaa>
}
 80065a4:	bf00      	nop
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	080087f4 	.word	0x080087f4
 80065b0:	08006bdd 	.word	0x08006bdd
 80065b4:	20000eb0 	.word	0x20000eb0
 80065b8:	20000eac 	.word	0x20000eac
 80065bc:	20000e98 	.word	0x20000e98
 80065c0:	20000e90 	.word	0x20000e90

080065c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <vTaskSuspendAll+0x18>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	4a03      	ldr	r2, [pc, #12]	; (80065dc <vTaskSuspendAll+0x18>)
 80065d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20000eb4 	.word	0x20000eb4

080065e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ee:	4b42      	ldr	r3, [pc, #264]	; (80066f8 <xTaskResumeAll+0x118>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <xTaskResumeAll+0x2c>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	603b      	str	r3, [r7, #0]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800660c:	f001 f91a 	bl	8007844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006610:	4b39      	ldr	r3, [pc, #228]	; (80066f8 <xTaskResumeAll+0x118>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3b01      	subs	r3, #1
 8006616:	4a38      	ldr	r2, [pc, #224]	; (80066f8 <xTaskResumeAll+0x118>)
 8006618:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661a:	4b37      	ldr	r3, [pc, #220]	; (80066f8 <xTaskResumeAll+0x118>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d162      	bne.n	80066e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006622:	4b36      	ldr	r3, [pc, #216]	; (80066fc <xTaskResumeAll+0x11c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d05e      	beq.n	80066e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800662a:	e02f      	b.n	800668c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662c:	4b34      	ldr	r3, [pc, #208]	; (8006700 <xTaskResumeAll+0x120>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3318      	adds	r3, #24
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff f871 	bl	8005720 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3304      	adds	r3, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff f86c 	bl	8005720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <xTaskResumeAll+0x124>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d903      	bls.n	800665c <xTaskResumeAll+0x7c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <xTaskResumeAll+0x124>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <xTaskResumeAll+0x128>)
 800666a:	441a      	add	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fe fff7 	bl	8005666 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4b23      	ldr	r3, [pc, #140]	; (800670c <xTaskResumeAll+0x12c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006686:	4b22      	ldr	r3, [pc, #136]	; (8006710 <xTaskResumeAll+0x130>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800668c:	4b1c      	ldr	r3, [pc, #112]	; (8006700 <xTaskResumeAll+0x120>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1cb      	bne.n	800662c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800669a:	f000 fb55 	bl	8006d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <xTaskResumeAll+0x134>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066aa:	f000 f847 	bl	800673c <xTaskIncrementTick>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066b4:	4b16      	ldr	r3, [pc, #88]	; (8006710 <xTaskResumeAll+0x130>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f1      	bne.n	80066aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <xTaskResumeAll+0x134>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <xTaskResumeAll+0x130>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <xTaskResumeAll+0x138>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e8:	f001 f8dc 	bl	80078a4 <vPortExitCritical>

	return xAlreadyYielded;
 80066ec:	68bb      	ldr	r3, [r7, #8]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000eb4 	.word	0x20000eb4
 80066fc:	20000e8c 	.word	0x20000e8c
 8006700:	20000e4c 	.word	0x20000e4c
 8006704:	20000e94 	.word	0x20000e94
 8006708:	200009bc 	.word	0x200009bc
 800670c:	200009b8 	.word	0x200009b8
 8006710:	20000ea0 	.word	0x20000ea0
 8006714:	20000e9c 	.word	0x20000e9c
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <xTaskGetTickCount+0x1c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006728:	687b      	ldr	r3, [r7, #4]
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000e90 	.word	0x20000e90

0800673c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006746:	4b4f      	ldr	r3, [pc, #316]	; (8006884 <xTaskIncrementTick+0x148>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 808f 	bne.w	800686e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006750:	4b4d      	ldr	r3, [pc, #308]	; (8006888 <xTaskIncrementTick+0x14c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006758:	4a4b      	ldr	r2, [pc, #300]	; (8006888 <xTaskIncrementTick+0x14c>)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d120      	bne.n	80067a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006764:	4b49      	ldr	r3, [pc, #292]	; (800688c <xTaskIncrementTick+0x150>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <xTaskIncrementTick+0x48>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	603b      	str	r3, [r7, #0]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <xTaskIncrementTick+0x46>
 8006784:	4b41      	ldr	r3, [pc, #260]	; (800688c <xTaskIncrementTick+0x150>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	4b41      	ldr	r3, [pc, #260]	; (8006890 <xTaskIncrementTick+0x154>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a3f      	ldr	r2, [pc, #252]	; (800688c <xTaskIncrementTick+0x150>)
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4a3f      	ldr	r2, [pc, #252]	; (8006890 <xTaskIncrementTick+0x154>)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <xTaskIncrementTick+0x158>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	4a3d      	ldr	r2, [pc, #244]	; (8006894 <xTaskIncrementTick+0x158>)
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	f000 fad1 	bl	8006d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067a6:	4b3c      	ldr	r3, [pc, #240]	; (8006898 <xTaskIncrementTick+0x15c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d349      	bcc.n	8006844 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b0:	4b36      	ldr	r3, [pc, #216]	; (800688c <xTaskIncrementTick+0x150>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ba:	4b37      	ldr	r3, [pc, #220]	; (8006898 <xTaskIncrementTick+0x15c>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	601a      	str	r2, [r3, #0]
					break;
 80067c2:	e03f      	b.n	8006844 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c4:	4b31      	ldr	r3, [pc, #196]	; (800688c <xTaskIncrementTick+0x150>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d203      	bcs.n	80067e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067dc:	4a2e      	ldr	r2, [pc, #184]	; (8006898 <xTaskIncrementTick+0x15c>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067e2:	e02f      	b.n	8006844 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe ff99 	bl	8005720 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	3318      	adds	r3, #24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe ff90 	bl	8005720 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4b25      	ldr	r3, [pc, #148]	; (800689c <xTaskIncrementTick+0x160>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d903      	bls.n	8006814 <xTaskIncrementTick+0xd8>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	4a22      	ldr	r2, [pc, #136]	; (800689c <xTaskIncrementTick+0x160>)
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <xTaskIncrementTick+0x164>)
 8006822:	441a      	add	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f7fe ff1b 	bl	8005666 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <xTaskIncrementTick+0x168>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	429a      	cmp	r2, r3
 800683c:	d3b8      	bcc.n	80067b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006842:	e7b5      	b.n	80067b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006844:	4b17      	ldr	r3, [pc, #92]	; (80068a4 <xTaskIncrementTick+0x168>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	4915      	ldr	r1, [pc, #84]	; (80068a0 <xTaskIncrementTick+0x164>)
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d901      	bls.n	8006860 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <xTaskIncrementTick+0x16c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e004      	b.n	8006878 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <xTaskIncrementTick+0x170>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <xTaskIncrementTick+0x170>)
 8006876:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000eb4 	.word	0x20000eb4
 8006888:	20000e90 	.word	0x20000e90
 800688c:	20000e44 	.word	0x20000e44
 8006890:	20000e48 	.word	0x20000e48
 8006894:	20000ea4 	.word	0x20000ea4
 8006898:	20000eac 	.word	0x20000eac
 800689c:	20000e94 	.word	0x20000e94
 80068a0:	200009bc 	.word	0x200009bc
 80068a4:	200009b8 	.word	0x200009b8
 80068a8:	20000ea0 	.word	0x20000ea0
 80068ac:	20000e9c 	.word	0x20000e9c

080068b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b6:	4b28      	ldr	r3, [pc, #160]	; (8006958 <vTaskSwitchContext+0xa8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068be:	4b27      	ldr	r3, [pc, #156]	; (800695c <vTaskSwitchContext+0xac>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c4:	e041      	b.n	800694a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80068c6:	4b25      	ldr	r3, [pc, #148]	; (800695c <vTaskSwitchContext+0xac>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068cc:	4b24      	ldr	r3, [pc, #144]	; (8006960 <vTaskSwitchContext+0xb0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e010      	b.n	80068f6 <vTaskSwitchContext+0x46>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskSwitchContext+0x3e>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	491b      	ldr	r1, [pc, #108]	; (8006964 <vTaskSwitchContext+0xb4>)
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0e4      	beq.n	80068d4 <vTaskSwitchContext+0x24>
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <vTaskSwitchContext+0xb4>)
 8006916:	4413      	add	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	605a      	str	r2, [r3, #4]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	3308      	adds	r3, #8
 800692c:	429a      	cmp	r2, r3
 800692e:	d104      	bne.n	800693a <vTaskSwitchContext+0x8a>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a09      	ldr	r2, [pc, #36]	; (8006968 <vTaskSwitchContext+0xb8>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	4a06      	ldr	r2, [pc, #24]	; (8006960 <vTaskSwitchContext+0xb0>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6013      	str	r3, [r2, #0]
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000eb4 	.word	0x20000eb4
 800695c:	20000ea0 	.word	0x20000ea0
 8006960:	20000e94 	.word	0x20000e94
 8006964:	200009bc 	.word	0x200009bc
 8006968:	200009b8 	.word	0x200009b8

0800696c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60fb      	str	r3, [r7, #12]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <vTaskPlaceOnEventList+0x44>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3318      	adds	r3, #24
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe fe87 	bl	80056ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069a0:	2101      	movs	r1, #1
 80069a2:	6838      	ldr	r0, [r7, #0]
 80069a4:	f000 fa7c 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200009b8 	.word	0x200009b8

080069b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	617b      	str	r3, [r7, #20]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vTaskPlaceOnEventListRestricted+0x54>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3318      	adds	r3, #24
 80069e2:	4619      	mov	r1, r3
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7fe fe3e 	bl	8005666 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	f000 fa51 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
	}
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200009b8 	.word	0x200009b8

08006a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fe6f 	bl	8005720 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a42:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <xTaskRemoveFromEventList+0xb0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11d      	bne.n	8006a86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fe66 	bl	8005720 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	4b19      	ldr	r3, [pc, #100]	; (8006ac0 <xTaskRemoveFromEventList+0xb4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d903      	bls.n	8006a68 <xTaskRemoveFromEventList+0x5c>
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <xTaskRemoveFromEventList+0xb4>)
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <xTaskRemoveFromEventList+0xb8>)
 8006a76:	441a      	add	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f7fe fdf1 	bl	8005666 <vListInsertEnd>
 8006a84:	e005      	b.n	8006a92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3318      	adds	r3, #24
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	480e      	ldr	r0, [pc, #56]	; (8006ac8 <xTaskRemoveFromEventList+0xbc>)
 8006a8e:	f7fe fdea 	bl	8005666 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <xTaskRemoveFromEventList+0xc0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d905      	bls.n	8006aac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <xTaskRemoveFromEventList+0xc4>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e001      	b.n	8006ab0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ab0:	697b      	ldr	r3, [r7, #20]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000eb4 	.word	0x20000eb4
 8006ac0:	20000e94 	.word	0x20000e94
 8006ac4:	200009bc 	.word	0x200009bc
 8006ac8:	20000e4c 	.word	0x20000e4c
 8006acc:	200009b8 	.word	0x200009b8
 8006ad0:	20000ea0 	.word	0x20000ea0

08006ad4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <vTaskInternalSetTimeOutState+0x24>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <vTaskInternalSetTimeOutState+0x28>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	605a      	str	r2, [r3, #4]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000ea4 	.word	0x20000ea4
 8006afc:	20000e90 	.word	0x20000e90

08006b00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60fb      	str	r3, [r7, #12]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b42:	f000 fe7f 	bl	8007844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <xTaskCheckForTimeOut+0xbc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d102      	bne.n	8006b66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	e023      	b.n	8006bae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <xTaskCheckForTimeOut+0xc0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d007      	beq.n	8006b82 <xTaskCheckForTimeOut+0x82>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d302      	bcc.n	8006b82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e015      	b.n	8006bae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d20b      	bcs.n	8006ba4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ff9b 	bl	8006ad4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	e004      	b.n	8006bae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bae:	f000 fe79 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000e90 	.word	0x20000e90
 8006bc0:	20000ea4 	.word	0x20000ea4

08006bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bc8:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <vTaskMissedYield+0x14>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000ea0 	.word	0x20000ea0

08006bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006be4:	f000 f852 	bl	8006c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <prvIdleTask+0x28>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d9f9      	bls.n	8006be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <prvIdleTask+0x2c>)
 8006bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c00:	e7f0      	b.n	8006be4 <prvIdleTask+0x8>
 8006c02:	bf00      	nop
 8006c04:	200009bc 	.word	0x200009bc
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	e00c      	b.n	8006c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4a12      	ldr	r2, [pc, #72]	; (8006c6c <prvInitialiseTaskLists+0x60>)
 8006c24:	4413      	add	r3, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fcf0 	bl	800560c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b37      	cmp	r3, #55	; 0x37
 8006c36:	d9ef      	bls.n	8006c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c38:	480d      	ldr	r0, [pc, #52]	; (8006c70 <prvInitialiseTaskLists+0x64>)
 8006c3a:	f7fe fce7 	bl	800560c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c3e:	480d      	ldr	r0, [pc, #52]	; (8006c74 <prvInitialiseTaskLists+0x68>)
 8006c40:	f7fe fce4 	bl	800560c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c44:	480c      	ldr	r0, [pc, #48]	; (8006c78 <prvInitialiseTaskLists+0x6c>)
 8006c46:	f7fe fce1 	bl	800560c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c4a:	480c      	ldr	r0, [pc, #48]	; (8006c7c <prvInitialiseTaskLists+0x70>)
 8006c4c:	f7fe fcde 	bl	800560c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c50:	480b      	ldr	r0, [pc, #44]	; (8006c80 <prvInitialiseTaskLists+0x74>)
 8006c52:	f7fe fcdb 	bl	800560c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <prvInitialiseTaskLists+0x78>)
 8006c58:	4a05      	ldr	r2, [pc, #20]	; (8006c70 <prvInitialiseTaskLists+0x64>)
 8006c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <prvInitialiseTaskLists+0x7c>)
 8006c5e:	4a05      	ldr	r2, [pc, #20]	; (8006c74 <prvInitialiseTaskLists+0x68>)
 8006c60:	601a      	str	r2, [r3, #0]
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200009bc 	.word	0x200009bc
 8006c70:	20000e1c 	.word	0x20000e1c
 8006c74:	20000e30 	.word	0x20000e30
 8006c78:	20000e4c 	.word	0x20000e4c
 8006c7c:	20000e60 	.word	0x20000e60
 8006c80:	20000e78 	.word	0x20000e78
 8006c84:	20000e44 	.word	0x20000e44
 8006c88:	20000e48 	.word	0x20000e48

08006c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c92:	e019      	b.n	8006cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c94:	f000 fdd6 	bl	8007844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c98:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <prvCheckTasksWaitingTermination+0x50>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fd3b 	bl	8005720 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <prvCheckTasksWaitingTermination+0x54>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ce0 <prvCheckTasksWaitingTermination+0x54>)
 8006cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <prvCheckTasksWaitingTermination+0x58>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <prvCheckTasksWaitingTermination+0x58>)
 8006cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cbe:	f000 fdf1 	bl	80078a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f810 	bl	8006ce8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <prvCheckTasksWaitingTermination+0x58>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e1      	bne.n	8006c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000e60 	.word	0x20000e60
 8006ce0:	20000e8c 	.word	0x20000e8c
 8006ce4:	20000e74 	.word	0x20000e74

08006ce8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d108      	bne.n	8006d0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ff8e 	bl	8007c20 <vPortFree>
				vPortFree( pxTCB );
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 ff8b 	bl	8007c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d0a:	e018      	b.n	8006d3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d103      	bne.n	8006d1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 ff82 	bl	8007c20 <vPortFree>
	}
 8006d1c:	e00f      	b.n	8006d3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d00a      	beq.n	8006d3e <prvDeleteTCB+0x56>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	60fb      	str	r3, [r7, #12]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <prvDeleteTCB+0x54>
	}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <prvResetNextTaskUnblockTime+0x38>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <prvResetNextTaskUnblockTime+0x3c>)
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d60:	e008      	b.n	8006d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <prvResetNextTaskUnblockTime+0x38>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <prvResetNextTaskUnblockTime+0x3c>)
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20000e44 	.word	0x20000e44
 8006d84:	20000eac 	.word	0x20000eac

08006d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <xTaskGetSchedulerState+0x34>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d96:	2301      	movs	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e008      	b.n	8006dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <xTaskGetSchedulerState+0x38>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006da4:	2302      	movs	r3, #2
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	e001      	b.n	8006dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dae:	687b      	ldr	r3, [r7, #4]
	}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	20000e98 	.word	0x20000e98
 8006dc0:	20000eb4 	.word	0x20000eb4

08006dc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d056      	beq.n	8006e88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dda:	4b2e      	ldr	r3, [pc, #184]	; (8006e94 <xTaskPriorityDisinherit+0xd0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d00a      	beq.n	8006dfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60bb      	str	r3, [r7, #8]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	1e5a      	subs	r2, r3, #1
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d02c      	beq.n	8006e88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d128      	bne.n	8006e88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fc70 	bl	8005720 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <xTaskPriorityDisinherit+0xd4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d903      	bls.n	8006e68 <xTaskPriorityDisinherit+0xa4>
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a0c      	ldr	r2, [pc, #48]	; (8006e98 <xTaskPriorityDisinherit+0xd4>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4a09      	ldr	r2, [pc, #36]	; (8006e9c <xTaskPriorityDisinherit+0xd8>)
 8006e76:	441a      	add	r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7fe fbf1 	bl	8005666 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e84:	2301      	movs	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e88:	697b      	ldr	r3, [r7, #20]
	}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200009b8 	.word	0x200009b8
 8006e98:	20000e94 	.word	0x20000e94
 8006e9c:	200009bc 	.word	0x200009bc

08006ea0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eaa:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x90>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb0:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fc32 	bl	8005720 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec2:	d10a      	bne.n	8006eda <prvAddCurrentTaskToDelayedList+0x3a>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eca:	4b1a      	ldr	r3, [pc, #104]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4819      	ldr	r0, [pc, #100]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ed4:	f7fe fbc7 	bl	8005666 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ed8:	e026      	b.n	8006f28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4413      	add	r3, r2
 8006ee0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d209      	bcs.n	8006f06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef2:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f7fe fbd5 	bl	80056ae <vListInsert>
}
 8006f04:	e010      	b.n	8006f28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f06:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fe fbcb 	bl	80056ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f18:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d202      	bcs.n	8006f28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f22:	4a08      	ldr	r2, [pc, #32]	; (8006f44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6013      	str	r3, [r2, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000e90 	.word	0x20000e90
 8006f34:	200009b8 	.word	0x200009b8
 8006f38:	20000e78 	.word	0x20000e78
 8006f3c:	20000e48 	.word	0x20000e48
 8006f40:	20000e44 	.word	0x20000e44
 8006f44:	20000eac 	.word	0x20000eac

08006f48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f52:	f000 fb07 	bl	8007564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f56:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <xTimerCreateTimerTask+0x80>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d021      	beq.n	8006fa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f66:	1d3a      	adds	r2, r7, #4
 8006f68:	f107 0108 	add.w	r1, r7, #8
 8006f6c:	f107 030c 	add.w	r3, r7, #12
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fb31 	bl	80055d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	9202      	str	r2, [sp, #8]
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	2302      	movs	r3, #2
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	2300      	movs	r3, #0
 8006f86:	460a      	mov	r2, r1
 8006f88:	4910      	ldr	r1, [pc, #64]	; (8006fcc <xTimerCreateTimerTask+0x84>)
 8006f8a:	4811      	ldr	r0, [pc, #68]	; (8006fd0 <xTimerCreateTimerTask+0x88>)
 8006f8c:	f7ff f8de 	bl	800614c <xTaskCreateStatic>
 8006f90:	4603      	mov	r3, r0
 8006f92:	4a10      	ldr	r2, [pc, #64]	; (8006fd4 <xTimerCreateTimerTask+0x8c>)
 8006f94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <xTimerCreateTimerTask+0x8c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	613b      	str	r3, [r7, #16]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000ee8 	.word	0x20000ee8
 8006fcc:	080087fc 	.word	0x080087fc
 8006fd0:	0800710d 	.word	0x0800710d
 8006fd4:	20000eec 	.word	0x20000eec

08006fd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	623b      	str	r3, [r7, #32]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <xTimerGenericCommand+0x98>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d02a      	beq.n	8007064 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b05      	cmp	r3, #5
 800701e:	dc18      	bgt.n	8007052 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007020:	f7ff feb2 	bl	8006d88 <xTaskGetSchedulerState>
 8007024:	4603      	mov	r3, r0
 8007026:	2b02      	cmp	r3, #2
 8007028:	d109      	bne.n	800703e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800702a:	4b11      	ldr	r3, [pc, #68]	; (8007070 <xTimerGenericCommand+0x98>)
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	f107 0110 	add.w	r1, r7, #16
 8007032:	2300      	movs	r3, #0
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	f7fe fca1 	bl	800597c <xQueueGenericSend>
 800703a:	6278      	str	r0, [r7, #36]	; 0x24
 800703c:	e012      	b.n	8007064 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <xTimerGenericCommand+0x98>)
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f107 0110 	add.w	r1, r7, #16
 8007046:	2300      	movs	r3, #0
 8007048:	2200      	movs	r2, #0
 800704a:	f7fe fc97 	bl	800597c <xQueueGenericSend>
 800704e:	6278      	str	r0, [r7, #36]	; 0x24
 8007050:	e008      	b.n	8007064 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <xTimerGenericCommand+0x98>)
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	f107 0110 	add.w	r1, r7, #16
 800705a:	2300      	movs	r3, #0
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	f7fe fd8b 	bl	8005b78 <xQueueGenericSendFromISR>
 8007062:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007066:	4618      	mov	r0, r3
 8007068:	3728      	adds	r7, #40	; 0x28
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000ee8 	.word	0x20000ee8

08007074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b22      	ldr	r3, [pc, #136]	; (8007108 <prvProcessExpiredTimer+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fb47 	bl	8005720 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d022      	beq.n	80070e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	18d1      	adds	r1, r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	6978      	ldr	r0, [r7, #20]
 80070ae:	f000 f8d1 	bl	8007254 <prvInsertTimerInActiveList>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01f      	beq.n	80070f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070b8:	2300      	movs	r3, #0
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f7ff ff88 	bl	8006fd8 <xTimerGenericCommand>
 80070c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d113      	bne.n	80070f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	6978      	ldr	r0, [r7, #20]
 80070fe:	4798      	blx	r3
}
 8007100:	bf00      	nop
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	20000ee0 	.word	0x20000ee0

0800710c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f857 	bl	80071cc <prvGetNextExpireTime>
 800711e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4619      	mov	r1, r3
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f803 	bl	8007130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800712a:	f000 f8d5 	bl	80072d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800712e:	e7f1      	b.n	8007114 <prvTimerTask+0x8>

08007130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800713a:	f7ff fa43 	bl	80065c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f866 	bl	8007214 <prvSampleTimeNow>
 8007148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d130      	bne.n	80071b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <prvProcessTimerOrBlockTask+0x3c>
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	429a      	cmp	r2, r3
 800715c:	d806      	bhi.n	800716c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800715e:	f7ff fa3f 	bl	80065e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ff85 	bl	8007074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800716a:	e024      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <prvProcessTimerOrBlockTask+0x90>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <prvProcessTimerOrBlockTask+0x50>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <prvProcessTimerOrBlockTask+0x52>
 8007180:	2300      	movs	r3, #0
 8007182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <prvProcessTimerOrBlockTask+0x94>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	f7fe ffa7 	bl	80060e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007196:	f7ff fa23 	bl	80065e0 <xTaskResumeAll>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071a0:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <prvProcessTimerOrBlockTask+0x98>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
}
 80071b0:	e001      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071b2:	f7ff fa15 	bl	80065e0 <xTaskResumeAll>
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000ee4 	.word	0x20000ee4
 80071c4:	20000ee8 	.word	0x20000ee8
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <prvGetNextExpireTime+0x16>
 80071de:	2201      	movs	r2, #1
 80071e0:	e000      	b.n	80071e4 <prvGetNextExpireTime+0x18>
 80071e2:	2200      	movs	r2, #0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d105      	bne.n	80071fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e001      	b.n	8007200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000ee0 	.word	0x20000ee0

08007214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800721c:	f7ff fa7e 	bl	800671c <xTaskGetTickCount>
 8007220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d205      	bcs.n	8007238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800722c:	f000 f936 	bl	800749c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e002      	b.n	800723e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007244:	68fb      	ldr	r3, [r7, #12]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000ef0 	.word	0x20000ef0

08007254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d812      	bhi.n	80072a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	d302      	bcc.n	800728e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e01b      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <prvInsertTimerInActiveList+0x7c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fe fa08 	bl	80056ae <vListInsert>
 800729e:	e012      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d206      	bcs.n	80072b6 <prvInsertTimerInActiveList+0x62>
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e007      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <prvInsertTimerInActiveList+0x80>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fe f9f4 	bl	80056ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072c6:	697b      	ldr	r3, [r7, #20]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000ee4 	.word	0x20000ee4
 80072d4:	20000ee0 	.word	0x20000ee0

080072d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072de:	e0ca      	b.n	8007476 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da18      	bge.n	8007318 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	3304      	adds	r3, #4
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61fb      	str	r3, [r7, #28]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730e:	6850      	ldr	r0, [r2, #4]
 8007310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007312:	6892      	ldr	r2, [r2, #8]
 8007314:	4611      	mov	r1, r2
 8007316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f2c0 80aa 	blt.w	8007474 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	3304      	adds	r3, #4
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe f9f5 	bl	8005720 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007336:	463b      	mov	r3, r7
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff ff6b 	bl	8007214 <prvSampleTimeNow>
 800733e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b09      	cmp	r3, #9
 8007344:	f200 8097 	bhi.w	8007476 <prvProcessReceivedCommands+0x19e>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <prvProcessReceivedCommands+0x78>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007379 	.word	0x08007379
 8007354:	08007379 	.word	0x08007379
 8007358:	08007379 	.word	0x08007379
 800735c:	080073ed 	.word	0x080073ed
 8007360:	08007401 	.word	0x08007401
 8007364:	0800744b 	.word	0x0800744b
 8007368:	08007379 	.word	0x08007379
 800736c:	08007379 	.word	0x08007379
 8007370:	080073ed 	.word	0x080073ed
 8007374:	08007401 	.word	0x08007401
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	18d1      	adds	r1, r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007398:	f7ff ff5c 	bl	8007254 <prvInsertTimerInActiveList>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d069      	beq.n	8007476 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d05e      	beq.n	8007476 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	441a      	add	r2, r3
 80073c0:	2300      	movs	r3, #0
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ca:	f7ff fe05 	bl	8006fd8 <xTimerGenericCommand>
 80073ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d14f      	bne.n	8007476 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	61bb      	str	r3, [r7, #24]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073fe:	e03a      	b.n	8007476 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	617b      	str	r3, [r7, #20]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	18d1      	adds	r1, r2, r3
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007444:	f7ff ff06 	bl	8007254 <prvInsertTimerInActiveList>
					break;
 8007448:	e015      	b.n	8007476 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d103      	bne.n	8007460 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745a:	f000 fbe1 	bl	8007c20 <vPortFree>
 800745e:	e00a      	b.n	8007476 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	b2da      	uxtb	r2, r3
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007472:	e000      	b.n	8007476 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <prvProcessReceivedCommands+0x1c0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	1d39      	adds	r1, r7, #4
 800747c:	2200      	movs	r2, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fc16 	bl	8005cb0 <xQueueReceive>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	f47f af2a 	bne.w	80072e0 <prvProcessReceivedCommands+0x8>
	}
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3730      	adds	r7, #48	; 0x30
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000ee8 	.word	0x20000ee8

0800749c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074a2:	e048      	b.n	8007536 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074a4:	4b2d      	ldr	r3, [pc, #180]	; (800755c <prvSwitchTimerLists+0xc0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ae:	4b2b      	ldr	r3, [pc, #172]	; (800755c <prvSwitchTimerLists+0xc0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe f92f 	bl	8005720 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02e      	beq.n	8007536 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d90e      	bls.n	8007508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074f6:	4b19      	ldr	r3, [pc, #100]	; (800755c <prvSwitchTimerLists+0xc0>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe f8d4 	bl	80056ae <vListInsert>
 8007506:	e016      	b.n	8007536 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007508:	2300      	movs	r3, #0
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	2300      	movs	r3, #0
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	2100      	movs	r1, #0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fd60 	bl	8006fd8 <xTimerGenericCommand>
 8007518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	603b      	str	r3, [r7, #0]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <prvSwitchTimerLists+0xc0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1b1      	bne.n	80074a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <prvSwitchTimerLists+0xc0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <prvSwitchTimerLists+0xc4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a04      	ldr	r2, [pc, #16]	; (800755c <prvSwitchTimerLists+0xc0>)
 800754c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800754e:	4a04      	ldr	r2, [pc, #16]	; (8007560 <prvSwitchTimerLists+0xc4>)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6013      	str	r3, [r2, #0]
}
 8007554:	bf00      	nop
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000ee0 	.word	0x20000ee0
 8007560:	20000ee4 	.word	0x20000ee4

08007564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800756a:	f000 f96b 	bl	8007844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800756e:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d120      	bne.n	80075b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007576:	4814      	ldr	r0, [pc, #80]	; (80075c8 <prvCheckForValidListAndQueue+0x64>)
 8007578:	f7fe f848 	bl	800560c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800757c:	4813      	ldr	r0, [pc, #76]	; (80075cc <prvCheckForValidListAndQueue+0x68>)
 800757e:	f7fe f845 	bl	800560c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007582:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <prvCheckForValidListAndQueue+0x6c>)
 8007584:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <prvCheckForValidListAndQueue+0x64>)
 8007586:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <prvCheckForValidListAndQueue+0x70>)
 800758a:	4a10      	ldr	r2, [pc, #64]	; (80075cc <prvCheckForValidListAndQueue+0x68>)
 800758c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800758e:	2300      	movs	r3, #0
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <prvCheckForValidListAndQueue+0x74>)
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <prvCheckForValidListAndQueue+0x78>)
 8007596:	2110      	movs	r1, #16
 8007598:	200a      	movs	r0, #10
 800759a:	f7fe f953 	bl	8005844 <xQueueGenericCreateStatic>
 800759e:	4603      	mov	r3, r0
 80075a0:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 80075a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	490b      	ldr	r1, [pc, #44]	; (80075e0 <prvCheckForValidListAndQueue+0x7c>)
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fd6c 	bl	8006090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075b8:	f000 f974 	bl	80078a4 <vPortExitCritical>
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000ee8 	.word	0x20000ee8
 80075c8:	20000eb8 	.word	0x20000eb8
 80075cc:	20000ecc 	.word	0x20000ecc
 80075d0:	20000ee0 	.word	0x20000ee0
 80075d4:	20000ee4 	.word	0x20000ee4
 80075d8:	20000f94 	.word	0x20000f94
 80075dc:	20000ef4 	.word	0x20000ef4
 80075e0:	08008804 	.word	0x08008804

080075e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3b04      	subs	r3, #4
 80075f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3b04      	subs	r3, #4
 8007602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f023 0201 	bic.w	r2, r3, #1
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b04      	subs	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007614:	4a0c      	ldr	r2, [pc, #48]	; (8007648 <pxPortInitialiseStack+0x64>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3b14      	subs	r3, #20
 800761e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3b04      	subs	r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f06f 0202 	mvn.w	r2, #2
 8007632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3b20      	subs	r3, #32
 8007638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800763a:	68fb      	ldr	r3, [r7, #12]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	0800764d 	.word	0x0800764d

0800764c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <prvTaskExitError+0x54>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d00a      	beq.n	8007676 <prvTaskExitError+0x2a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <prvTaskExitError+0x28>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800768a:	bf00      	nop
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0fc      	beq.n	800768c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20000010 	.word	0x20000010
	...

080076b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <pxCurrentTCBConst2>)
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	6808      	ldr	r0, [r1, #0]
 80076b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	f380 8809 	msr	PSP, r0
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8811 	msr	BASEPRI, r0
 80076ca:	4770      	bx	lr
 80076cc:	f3af 8000 	nop.w

080076d0 <pxCurrentTCBConst2>:
 80076d0:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076d8:	4808      	ldr	r0, [pc, #32]	; (80076fc <prvPortStartFirstTask+0x24>)
 80076da:	6800      	ldr	r0, [r0, #0]
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f380 8808 	msr	MSP, r0
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f380 8814 	msr	CONTROL, r0
 80076ea:	b662      	cpsie	i
 80076ec:	b661      	cpsie	f
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	df00      	svc	0
 80076f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076fa:	bf00      	nop
 80076fc:	e000ed08 	.word	0xe000ed08

08007700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007706:	4b46      	ldr	r3, [pc, #280]	; (8007820 <xPortStartScheduler+0x120>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a46      	ldr	r2, [pc, #280]	; (8007824 <xPortStartScheduler+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10a      	bne.n	8007726 <xPortStartScheduler+0x26>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	613b      	str	r3, [r7, #16]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007726:	4b3e      	ldr	r3, [pc, #248]	; (8007820 <xPortStartScheduler+0x120>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a3f      	ldr	r2, [pc, #252]	; (8007828 <xPortStartScheduler+0x128>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10a      	bne.n	8007746 <xPortStartScheduler+0x46>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <xPortStartScheduler+0x12c>)
 8007748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	22ff      	movs	r2, #255	; 0xff
 8007756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007768:	b2da      	uxtb	r2, r3
 800776a:	4b31      	ldr	r3, [pc, #196]	; (8007830 <xPortStartScheduler+0x130>)
 800776c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800776e:	4b31      	ldr	r3, [pc, #196]	; (8007834 <xPortStartScheduler+0x134>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007774:	e009      	b.n	800778a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007776:	4b2f      	ldr	r3, [pc, #188]	; (8007834 <xPortStartScheduler+0x134>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3b01      	subs	r3, #1
 800777c:	4a2d      	ldr	r2, [pc, #180]	; (8007834 <xPortStartScheduler+0x134>)
 800777e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	b2db      	uxtb	r3, r3
 8007788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007792:	2b80      	cmp	r3, #128	; 0x80
 8007794:	d0ef      	beq.n	8007776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <xPortStartScheduler+0x134>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1c3 0307 	rsb	r3, r3, #7
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d00a      	beq.n	80077b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60bb      	str	r3, [r7, #8]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077b8:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <xPortStartScheduler+0x134>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <xPortStartScheduler+0x134>)
 80077c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077c2:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <xPortStartScheduler+0x134>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ca:	4a1a      	ldr	r2, [pc, #104]	; (8007834 <xPortStartScheduler+0x134>)
 80077cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <xPortStartScheduler+0x138>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <xPortStartScheduler+0x138>)
 80077dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <xPortStartScheduler+0x138>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a14      	ldr	r2, [pc, #80]	; (8007838 <xPortStartScheduler+0x138>)
 80077e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ee:	f000 f8dd 	bl	80079ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <xPortStartScheduler+0x13c>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077f8:	f000 f8fc 	bl	80079f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077fc:	4b10      	ldr	r3, [pc, #64]	; (8007840 <xPortStartScheduler+0x140>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <xPortStartScheduler+0x140>)
 8007802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007808:	f7ff ff66 	bl	80076d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800780c:	f7ff f850 	bl	80068b0 <vTaskSwitchContext>
	prvTaskExitError();
 8007810:	f7ff ff1c 	bl	800764c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	e000ed00 	.word	0xe000ed00
 8007824:	410fc271 	.word	0x410fc271
 8007828:	410fc270 	.word	0x410fc270
 800782c:	e000e400 	.word	0xe000e400
 8007830:	20000fe4 	.word	0x20000fe4
 8007834:	20000fe8 	.word	0x20000fe8
 8007838:	e000ed20 	.word	0xe000ed20
 800783c:	20000010 	.word	0x20000010
 8007840:	e000ef34 	.word	0xe000ef34

08007844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <vPortEnterCritical+0x58>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <vPortEnterCritical+0x58>)
 8007866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <vPortEnterCritical+0x58>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d10f      	bne.n	8007890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <vPortEnterCritical+0x5c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <vPortEnterCritical+0x4c>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <vPortEnterCritical+0x4a>
	}
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000010 	.word	0x20000010
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <vPortExitCritical+0x50>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <vPortExitCritical+0x24>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	607b      	str	r3, [r7, #4]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <vPortExitCritical+0x50>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <vPortExitCritical+0x50>)
 80078d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078d2:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <vPortExitCritical+0x50>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <vPortExitCritical+0x42>
 80078da:	2300      	movs	r3, #0
 80078dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f383 8811 	msr	BASEPRI, r3
}
 80078e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000010 	.word	0x20000010
	...

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f01e 0f10 	tst.w	lr, #16
 8007910:	bf08      	it	eq
 8007912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007924:	f380 8811 	msr	BASEPRI, r0
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f7fe ffbe 	bl	80068b0 <vTaskSwitchContext>
 8007934:	f04f 0000 	mov.w	r0, #0
 8007938:	f380 8811 	msr	BASEPRI, r0
 800793c:	bc09      	pop	{r0, r3}
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007946:	f01e 0f10 	tst.w	lr, #16
 800794a:	bf08      	it	eq
 800794c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007950:	f380 8809 	msr	PSP, r0
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst>:
 8007960:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007982:	f7fe fedb 	bl	800673c <xTaskIncrementTick>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <xPortSysTickHandler+0x40>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f383 8811 	msr	BASEPRI, r3
}
 800799e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <vPortSetupTimerInterrupt+0x38>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <vPortSetupTimerInterrupt+0x3c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <vPortSetupTimerInterrupt+0x40>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	099b      	lsrs	r3, r3, #6
 80079c8:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <vPortSetupTimerInterrupt+0x44>)
 80079ca:	3b01      	subs	r3, #1
 80079cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e010 	.word	0xe000e010
 80079e4:	e000e018 	.word	0xe000e018
 80079e8:	20000004 	.word	0x20000004
 80079ec:	10624dd3 	.word	0x10624dd3
 80079f0:	e000e014 	.word	0xe000e014

080079f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a04 <vPortEnableVFP+0x10>
 80079f8:	6801      	ldr	r1, [r0, #0]
 80079fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079fe:	6001      	str	r1, [r0, #0]
 8007a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a02:	bf00      	nop
 8007a04:	e000ed88 	.word	0xe000ed88

08007a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a0e:	f3ef 8305 	mrs	r3, IPSR
 8007a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d914      	bls.n	8007a44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <vPortValidateInterruptPriority+0x70>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <vPortValidateInterruptPriority+0x74>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	7afa      	ldrb	r2, [r7, #11]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d20a      	bcs.n	8007a44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <vPortValidateInterruptPriority+0x78>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a4c:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <vPortValidateInterruptPriority+0x7c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d90a      	bls.n	8007a6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	603b      	str	r3, [r7, #0]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <vPortValidateInterruptPriority+0x60>
	}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	e000e3f0 	.word	0xe000e3f0
 8007a7c:	20000fe4 	.word	0x20000fe4
 8007a80:	e000ed0c 	.word	0xe000ed0c
 8007a84:	20000fe8 	.word	0x20000fe8

08007a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a94:	f7fe fd96 	bl	80065c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a98:	4b5b      	ldr	r3, [pc, #364]	; (8007c08 <pvPortMalloc+0x180>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007aa0:	f000 f920 	bl	8007ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007aa4:	4b59      	ldr	r3, [pc, #356]	; (8007c0c <pvPortMalloc+0x184>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 8093 	bne.w	8007bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01d      	beq.n	8007af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ab8:	2208      	movs	r2, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d014      	beq.n	8007af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f023 0307 	bic.w	r3, r3, #7
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	617b      	str	r3, [r7, #20]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d06e      	beq.n	8007bd8 <pvPortMalloc+0x150>
 8007afa:	4b45      	ldr	r3, [pc, #276]	; (8007c10 <pvPortMalloc+0x188>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d869      	bhi.n	8007bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b04:	4b43      	ldr	r3, [pc, #268]	; (8007c14 <pvPortMalloc+0x18c>)
 8007b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b08:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <pvPortMalloc+0x18c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0e:	e004      	b.n	8007b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <pvPortMalloc+0xa4>
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f1      	bne.n	8007b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b2c:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <pvPortMalloc+0x180>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d050      	beq.n	8007bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	4413      	add	r3, r2
 8007b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	2308      	movs	r3, #8
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d91f      	bls.n	8007b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <pvPortMalloc+0xf8>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	613b      	str	r3, [r7, #16]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b92:	69b8      	ldr	r0, [r7, #24]
 8007b94:	f000 f908 	bl	8007da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b98:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <pvPortMalloc+0x188>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <pvPortMalloc+0x188>)
 8007ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ba6:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <pvPortMalloc+0x188>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <pvPortMalloc+0x190>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d203      	bcs.n	8007bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <pvPortMalloc+0x188>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <pvPortMalloc+0x190>)
 8007bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <pvPortMalloc+0x184>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <pvPortMalloc+0x194>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a11      	ldr	r2, [pc, #68]	; (8007c1c <pvPortMalloc+0x194>)
 8007bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bd8:	f7fe fd02 	bl	80065e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <pvPortMalloc+0x174>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <pvPortMalloc+0x172>
	return pvReturn;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	; 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20004bf4 	.word	0x20004bf4
 8007c0c:	20004c08 	.word	0x20004c08
 8007c10:	20004bf8 	.word	0x20004bf8
 8007c14:	20004bec 	.word	0x20004bec
 8007c18:	20004bfc 	.word	0x20004bfc
 8007c1c:	20004c00 	.word	0x20004c00

08007c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04d      	beq.n	8007cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c32:	2308      	movs	r3, #8
 8007c34:	425b      	negs	r3, r3
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <vPortFree+0xb8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <vPortFree+0x44>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60fb      	str	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <vPortFree+0x62>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60bb      	str	r3, [r7, #8]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <vPortFree+0xb8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01e      	beq.n	8007cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11a      	bne.n	8007cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <vPortFree+0xb8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ca8:	f7fe fc8c 	bl	80065c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vPortFree+0xbc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <vPortFree+0xbc>)
 8007cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cba:	6938      	ldr	r0, [r7, #16]
 8007cbc:	f000 f874 	bl	8007da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <vPortFree+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	4a06      	ldr	r2, [pc, #24]	; (8007ce0 <vPortFree+0xc0>)
 8007cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cca:	f7fe fc89 	bl	80065e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20004c08 	.word	0x20004c08
 8007cdc:	20004bf8 	.word	0x20004bf8
 8007ce0:	20004c04 	.word	0x20004c04

08007ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cf0:	4b27      	ldr	r3, [pc, #156]	; (8007d90 <prvHeapInit+0xac>)
 8007cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00c      	beq.n	8007d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3307      	adds	r3, #7
 8007d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a1f      	ldr	r2, [pc, #124]	; (8007d90 <prvHeapInit+0xac>)
 8007d14:	4413      	add	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <prvHeapInit+0xb0>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <prvHeapInit+0xb0>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d30:	2208      	movs	r2, #8
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <prvHeapInit+0xb4>)
 8007d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <prvHeapInit+0xb4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <prvHeapInit+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <prvHeapInit+0xb4>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <prvHeapInit+0xb8>)
 8007d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <prvHeapInit+0xbc>)
 8007d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d7c:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <prvHeapInit+0xc0>)
 8007d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20000fec 	.word	0x20000fec
 8007d94:	20004bec 	.word	0x20004bec
 8007d98:	20004bf4 	.word	0x20004bf4
 8007d9c:	20004bfc 	.word	0x20004bfc
 8007da0:	20004bf8 	.word	0x20004bf8
 8007da4:	20004c08 	.word	0x20004c08

08007da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007db0:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <prvInsertBlockIntoFreeList+0xac>)
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e002      	b.n	8007dbc <prvInsertBlockIntoFreeList+0x14>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d8f7      	bhi.n	8007db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d108      	bne.n	8007dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	441a      	add	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d118      	bne.n	8007e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <prvInsertBlockIntoFreeList+0xb0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d00d      	beq.n	8007e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	441a      	add	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e008      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <prvInsertBlockIntoFreeList+0xb0>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	e003      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d002      	beq.n	8007e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20004bec 	.word	0x20004bec
 8007e58:	20004bf4 	.word	0x20004bf4

08007e5c <__errno>:
 8007e5c:	4b01      	ldr	r3, [pc, #4]	; (8007e64 <__errno+0x8>)
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000014 	.word	0x20000014

08007e68 <__libc_init_array>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	4d0d      	ldr	r5, [pc, #52]	; (8007ea0 <__libc_init_array+0x38>)
 8007e6c:	4c0d      	ldr	r4, [pc, #52]	; (8007ea4 <__libc_init_array+0x3c>)
 8007e6e:	1b64      	subs	r4, r4, r5
 8007e70:	10a4      	asrs	r4, r4, #2
 8007e72:	2600      	movs	r6, #0
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	d109      	bne.n	8007e8c <__libc_init_array+0x24>
 8007e78:	4d0b      	ldr	r5, [pc, #44]	; (8007ea8 <__libc_init_array+0x40>)
 8007e7a:	4c0c      	ldr	r4, [pc, #48]	; (8007eac <__libc_init_array+0x44>)
 8007e7c:	f000 fc8e 	bl	800879c <_init>
 8007e80:	1b64      	subs	r4, r4, r5
 8007e82:	10a4      	asrs	r4, r4, #2
 8007e84:	2600      	movs	r6, #0
 8007e86:	42a6      	cmp	r6, r4
 8007e88:	d105      	bne.n	8007e96 <__libc_init_array+0x2e>
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e90:	4798      	blx	r3
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7ee      	b.n	8007e74 <__libc_init_array+0xc>
 8007e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9a:	4798      	blx	r3
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	e7f2      	b.n	8007e86 <__libc_init_array+0x1e>
 8007ea0:	080088cc 	.word	0x080088cc
 8007ea4:	080088cc 	.word	0x080088cc
 8007ea8:	080088cc 	.word	0x080088cc
 8007eac:	080088d0 	.word	0x080088d0

08007eb0 <memcpy>:
 8007eb0:	440a      	add	r2, r1
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb8:	d100      	bne.n	8007ebc <memcpy+0xc>
 8007eba:	4770      	bx	lr
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec6:	4291      	cmp	r1, r2
 8007ec8:	d1f9      	bne.n	8007ebe <memcpy+0xe>
 8007eca:	bd10      	pop	{r4, pc}

08007ecc <memset>:
 8007ecc:	4402      	add	r2, r0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d100      	bne.n	8007ed6 <memset+0xa>
 8007ed4:	4770      	bx	lr
 8007ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eda:	e7f9      	b.n	8007ed0 <memset+0x4>

08007edc <siprintf>:
 8007edc:	b40e      	push	{r1, r2, r3}
 8007ede:	b500      	push	{lr}
 8007ee0:	b09c      	sub	sp, #112	; 0x70
 8007ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ee4:	9002      	str	r0, [sp, #8]
 8007ee6:	9006      	str	r0, [sp, #24]
 8007ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eec:	4809      	ldr	r0, [pc, #36]	; (8007f14 <siprintf+0x38>)
 8007eee:	9107      	str	r1, [sp, #28]
 8007ef0:	9104      	str	r1, [sp, #16]
 8007ef2:	4909      	ldr	r1, [pc, #36]	; (8007f18 <siprintf+0x3c>)
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	9105      	str	r1, [sp, #20]
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	a902      	add	r1, sp, #8
 8007f00:	f000 f868 	bl	8007fd4 <_svfiprintf_r>
 8007f04:	9b02      	ldr	r3, [sp, #8]
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	b01c      	add	sp, #112	; 0x70
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	20000014 	.word	0x20000014
 8007f18:	ffff0208 	.word	0xffff0208

08007f1c <__ssputs_r>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	688e      	ldr	r6, [r1, #8]
 8007f22:	429e      	cmp	r6, r3
 8007f24:	4682      	mov	sl, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4690      	mov	r8, r2
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	d838      	bhi.n	8007fa0 <__ssputs_r+0x84>
 8007f2e:	898a      	ldrh	r2, [r1, #12]
 8007f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f34:	d032      	beq.n	8007f9c <__ssputs_r+0x80>
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	6909      	ldr	r1, [r1, #16]
 8007f3a:	eba5 0901 	sub.w	r9, r5, r1
 8007f3e:	6965      	ldr	r5, [r4, #20]
 8007f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f48:	3301      	adds	r3, #1
 8007f4a:	444b      	add	r3, r9
 8007f4c:	106d      	asrs	r5, r5, #1
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	bf38      	it	cc
 8007f52:	461d      	movcc	r5, r3
 8007f54:	0553      	lsls	r3, r2, #21
 8007f56:	d531      	bpl.n	8007fbc <__ssputs_r+0xa0>
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f000 fb55 	bl	8008608 <_malloc_r>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	b950      	cbnz	r0, 8007f78 <__ssputs_r+0x5c>
 8007f62:	230c      	movs	r3, #12
 8007f64:	f8ca 3000 	str.w	r3, [sl]
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f78:	6921      	ldr	r1, [r4, #16]
 8007f7a:	464a      	mov	r2, r9
 8007f7c:	f7ff ff98 	bl	8007eb0 <memcpy>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	6126      	str	r6, [r4, #16]
 8007f8e:	6165      	str	r5, [r4, #20]
 8007f90:	444e      	add	r6, r9
 8007f92:	eba5 0509 	sub.w	r5, r5, r9
 8007f96:	6026      	str	r6, [r4, #0]
 8007f98:	60a5      	str	r5, [r4, #8]
 8007f9a:	463e      	mov	r6, r7
 8007f9c:	42be      	cmp	r6, r7
 8007f9e:	d900      	bls.n	8007fa2 <__ssputs_r+0x86>
 8007fa0:	463e      	mov	r6, r7
 8007fa2:	6820      	ldr	r0, [r4, #0]
 8007fa4:	4632      	mov	r2, r6
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	f000 faa8 	bl	80084fc <memmove>
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	1b9b      	subs	r3, r3, r6
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	4433      	add	r3, r6
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e7db      	b.n	8007f74 <__ssputs_r+0x58>
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	f000 fb97 	bl	80086f0 <_realloc_r>
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1e1      	bne.n	8007f8c <__ssputs_r+0x70>
 8007fc8:	6921      	ldr	r1, [r4, #16]
 8007fca:	4650      	mov	r0, sl
 8007fcc:	f000 fab0 	bl	8008530 <_free_r>
 8007fd0:	e7c7      	b.n	8007f62 <__ssputs_r+0x46>
	...

08007fd4 <_svfiprintf_r>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4698      	mov	r8, r3
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	b09d      	sub	sp, #116	; 0x74
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	d50e      	bpl.n	8008006 <_svfiprintf_r+0x32>
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b963      	cbnz	r3, 8008006 <_svfiprintf_r+0x32>
 8007fec:	2140      	movs	r1, #64	; 0x40
 8007fee:	f000 fb0b 	bl	8008608 <_malloc_r>
 8007ff2:	6028      	str	r0, [r5, #0]
 8007ff4:	6128      	str	r0, [r5, #16]
 8007ff6:	b920      	cbnz	r0, 8008002 <_svfiprintf_r+0x2e>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	e0d1      	b.n	80081a6 <_svfiprintf_r+0x1d2>
 8008002:	2340      	movs	r3, #64	; 0x40
 8008004:	616b      	str	r3, [r5, #20]
 8008006:	2300      	movs	r3, #0
 8008008:	9309      	str	r3, [sp, #36]	; 0x24
 800800a:	2320      	movs	r3, #32
 800800c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008010:	f8cd 800c 	str.w	r8, [sp, #12]
 8008014:	2330      	movs	r3, #48	; 0x30
 8008016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081c0 <_svfiprintf_r+0x1ec>
 800801a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800801e:	f04f 0901 	mov.w	r9, #1
 8008022:	4623      	mov	r3, r4
 8008024:	469a      	mov	sl, r3
 8008026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802a:	b10a      	cbz	r2, 8008030 <_svfiprintf_r+0x5c>
 800802c:	2a25      	cmp	r2, #37	; 0x25
 800802e:	d1f9      	bne.n	8008024 <_svfiprintf_r+0x50>
 8008030:	ebba 0b04 	subs.w	fp, sl, r4
 8008034:	d00b      	beq.n	800804e <_svfiprintf_r+0x7a>
 8008036:	465b      	mov	r3, fp
 8008038:	4622      	mov	r2, r4
 800803a:	4629      	mov	r1, r5
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff ff6d 	bl	8007f1c <__ssputs_r>
 8008042:	3001      	adds	r0, #1
 8008044:	f000 80aa 	beq.w	800819c <_svfiprintf_r+0x1c8>
 8008048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800804a:	445a      	add	r2, fp
 800804c:	9209      	str	r2, [sp, #36]	; 0x24
 800804e:	f89a 3000 	ldrb.w	r3, [sl]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80a2 	beq.w	800819c <_svfiprintf_r+0x1c8>
 8008058:	2300      	movs	r3, #0
 800805a:	f04f 32ff 	mov.w	r2, #4294967295
 800805e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008062:	f10a 0a01 	add.w	sl, sl, #1
 8008066:	9304      	str	r3, [sp, #16]
 8008068:	9307      	str	r3, [sp, #28]
 800806a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800806e:	931a      	str	r3, [sp, #104]	; 0x68
 8008070:	4654      	mov	r4, sl
 8008072:	2205      	movs	r2, #5
 8008074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008078:	4851      	ldr	r0, [pc, #324]	; (80081c0 <_svfiprintf_r+0x1ec>)
 800807a:	f7f8 f8c9 	bl	8000210 <memchr>
 800807e:	9a04      	ldr	r2, [sp, #16]
 8008080:	b9d8      	cbnz	r0, 80080ba <_svfiprintf_r+0xe6>
 8008082:	06d0      	lsls	r0, r2, #27
 8008084:	bf44      	itt	mi
 8008086:	2320      	movmi	r3, #32
 8008088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808c:	0711      	lsls	r1, r2, #28
 800808e:	bf44      	itt	mi
 8008090:	232b      	movmi	r3, #43	; 0x2b
 8008092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008096:	f89a 3000 	ldrb.w	r3, [sl]
 800809a:	2b2a      	cmp	r3, #42	; 0x2a
 800809c:	d015      	beq.n	80080ca <_svfiprintf_r+0xf6>
 800809e:	9a07      	ldr	r2, [sp, #28]
 80080a0:	4654      	mov	r4, sl
 80080a2:	2000      	movs	r0, #0
 80080a4:	f04f 0c0a 	mov.w	ip, #10
 80080a8:	4621      	mov	r1, r4
 80080aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ae:	3b30      	subs	r3, #48	; 0x30
 80080b0:	2b09      	cmp	r3, #9
 80080b2:	d94e      	bls.n	8008152 <_svfiprintf_r+0x17e>
 80080b4:	b1b0      	cbz	r0, 80080e4 <_svfiprintf_r+0x110>
 80080b6:	9207      	str	r2, [sp, #28]
 80080b8:	e014      	b.n	80080e4 <_svfiprintf_r+0x110>
 80080ba:	eba0 0308 	sub.w	r3, r0, r8
 80080be:	fa09 f303 	lsl.w	r3, r9, r3
 80080c2:	4313      	orrs	r3, r2
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	46a2      	mov	sl, r4
 80080c8:	e7d2      	b.n	8008070 <_svfiprintf_r+0x9c>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	1d19      	adds	r1, r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	9103      	str	r1, [sp, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfbb      	ittet	lt
 80080d6:	425b      	neglt	r3, r3
 80080d8:	f042 0202 	orrlt.w	r2, r2, #2
 80080dc:	9307      	strge	r3, [sp, #28]
 80080de:	9307      	strlt	r3, [sp, #28]
 80080e0:	bfb8      	it	lt
 80080e2:	9204      	strlt	r2, [sp, #16]
 80080e4:	7823      	ldrb	r3, [r4, #0]
 80080e6:	2b2e      	cmp	r3, #46	; 0x2e
 80080e8:	d10c      	bne.n	8008104 <_svfiprintf_r+0x130>
 80080ea:	7863      	ldrb	r3, [r4, #1]
 80080ec:	2b2a      	cmp	r3, #42	; 0x2a
 80080ee:	d135      	bne.n	800815c <_svfiprintf_r+0x188>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	9203      	str	r2, [sp, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfb8      	it	lt
 80080fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008100:	3402      	adds	r4, #2
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081d0 <_svfiprintf_r+0x1fc>
 8008108:	7821      	ldrb	r1, [r4, #0]
 800810a:	2203      	movs	r2, #3
 800810c:	4650      	mov	r0, sl
 800810e:	f7f8 f87f 	bl	8000210 <memchr>
 8008112:	b140      	cbz	r0, 8008126 <_svfiprintf_r+0x152>
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	eba0 000a 	sub.w	r0, r0, sl
 800811a:	fa03 f000 	lsl.w	r0, r3, r0
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	4303      	orrs	r3, r0
 8008122:	3401      	adds	r4, #1
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	4826      	ldr	r0, [pc, #152]	; (80081c4 <_svfiprintf_r+0x1f0>)
 800812c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008130:	2206      	movs	r2, #6
 8008132:	f7f8 f86d 	bl	8000210 <memchr>
 8008136:	2800      	cmp	r0, #0
 8008138:	d038      	beq.n	80081ac <_svfiprintf_r+0x1d8>
 800813a:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <_svfiprintf_r+0x1f4>)
 800813c:	bb1b      	cbnz	r3, 8008186 <_svfiprintf_r+0x1b2>
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	3307      	adds	r3, #7
 8008142:	f023 0307 	bic.w	r3, r3, #7
 8008146:	3308      	adds	r3, #8
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	4433      	add	r3, r6
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	e767      	b.n	8008022 <_svfiprintf_r+0x4e>
 8008152:	fb0c 3202 	mla	r2, ip, r2, r3
 8008156:	460c      	mov	r4, r1
 8008158:	2001      	movs	r0, #1
 800815a:	e7a5      	b.n	80080a8 <_svfiprintf_r+0xd4>
 800815c:	2300      	movs	r3, #0
 800815e:	3401      	adds	r4, #1
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	4619      	mov	r1, r3
 8008164:	f04f 0c0a 	mov.w	ip, #10
 8008168:	4620      	mov	r0, r4
 800816a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816e:	3a30      	subs	r2, #48	; 0x30
 8008170:	2a09      	cmp	r2, #9
 8008172:	d903      	bls.n	800817c <_svfiprintf_r+0x1a8>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0c5      	beq.n	8008104 <_svfiprintf_r+0x130>
 8008178:	9105      	str	r1, [sp, #20]
 800817a:	e7c3      	b.n	8008104 <_svfiprintf_r+0x130>
 800817c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008180:	4604      	mov	r4, r0
 8008182:	2301      	movs	r3, #1
 8008184:	e7f0      	b.n	8008168 <_svfiprintf_r+0x194>
 8008186:	ab03      	add	r3, sp, #12
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	462a      	mov	r2, r5
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <_svfiprintf_r+0x1f8>)
 800818e:	a904      	add	r1, sp, #16
 8008190:	4638      	mov	r0, r7
 8008192:	f3af 8000 	nop.w
 8008196:	1c42      	adds	r2, r0, #1
 8008198:	4606      	mov	r6, r0
 800819a:	d1d6      	bne.n	800814a <_svfiprintf_r+0x176>
 800819c:	89ab      	ldrh	r3, [r5, #12]
 800819e:	065b      	lsls	r3, r3, #25
 80081a0:	f53f af2c 	bmi.w	8007ffc <_svfiprintf_r+0x28>
 80081a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a6:	b01d      	add	sp, #116	; 0x74
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	ab03      	add	r3, sp, #12
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	462a      	mov	r2, r5
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <_svfiprintf_r+0x1f8>)
 80081b4:	a904      	add	r1, sp, #16
 80081b6:	4638      	mov	r0, r7
 80081b8:	f000 f87a 	bl	80082b0 <_printf_i>
 80081bc:	e7eb      	b.n	8008196 <_svfiprintf_r+0x1c2>
 80081be:	bf00      	nop
 80081c0:	08008890 	.word	0x08008890
 80081c4:	0800889a 	.word	0x0800889a
 80081c8:	00000000 	.word	0x00000000
 80081cc:	08007f1d 	.word	0x08007f1d
 80081d0:	08008896 	.word	0x08008896

080081d4 <_printf_common>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	4616      	mov	r6, r2
 80081da:	4699      	mov	r9, r3
 80081dc:	688a      	ldr	r2, [r1, #8]
 80081de:	690b      	ldr	r3, [r1, #16]
 80081e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081e4:	4293      	cmp	r3, r2
 80081e6:	bfb8      	it	lt
 80081e8:	4613      	movlt	r3, r2
 80081ea:	6033      	str	r3, [r6, #0]
 80081ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f0:	4607      	mov	r7, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	b10a      	cbz	r2, 80081fa <_printf_common+0x26>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0699      	lsls	r1, r3, #26
 80081fe:	bf42      	ittt	mi
 8008200:	6833      	ldrmi	r3, [r6, #0]
 8008202:	3302      	addmi	r3, #2
 8008204:	6033      	strmi	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	f015 0506 	ands.w	r5, r5, #6
 800820c:	d106      	bne.n	800821c <_printf_common+0x48>
 800820e:	f104 0a19 	add.w	sl, r4, #25
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc26      	bgt.n	800826a <_printf_common+0x96>
 800821c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008220:	1e13      	subs	r3, r2, #0
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	bf18      	it	ne
 8008226:	2301      	movne	r3, #1
 8008228:	0692      	lsls	r2, r2, #26
 800822a:	d42b      	bmi.n	8008284 <_printf_common+0xb0>
 800822c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008230:	4649      	mov	r1, r9
 8008232:	4638      	mov	r0, r7
 8008234:	47c0      	blx	r8
 8008236:	3001      	adds	r0, #1
 8008238:	d01e      	beq.n	8008278 <_printf_common+0xa4>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	68e5      	ldr	r5, [r4, #12]
 800823e:	6832      	ldr	r2, [r6, #0]
 8008240:	f003 0306 	and.w	r3, r3, #6
 8008244:	2b04      	cmp	r3, #4
 8008246:	bf08      	it	eq
 8008248:	1aad      	subeq	r5, r5, r2
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	6922      	ldr	r2, [r4, #16]
 800824e:	bf0c      	ite	eq
 8008250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008254:	2500      	movne	r5, #0
 8008256:	4293      	cmp	r3, r2
 8008258:	bfc4      	itt	gt
 800825a:	1a9b      	subgt	r3, r3, r2
 800825c:	18ed      	addgt	r5, r5, r3
 800825e:	2600      	movs	r6, #0
 8008260:	341a      	adds	r4, #26
 8008262:	42b5      	cmp	r5, r6
 8008264:	d11a      	bne.n	800829c <_printf_common+0xc8>
 8008266:	2000      	movs	r0, #0
 8008268:	e008      	b.n	800827c <_printf_common+0xa8>
 800826a:	2301      	movs	r3, #1
 800826c:	4652      	mov	r2, sl
 800826e:	4649      	mov	r1, r9
 8008270:	4638      	mov	r0, r7
 8008272:	47c0      	blx	r8
 8008274:	3001      	adds	r0, #1
 8008276:	d103      	bne.n	8008280 <_printf_common+0xac>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	3501      	adds	r5, #1
 8008282:	e7c6      	b.n	8008212 <_printf_common+0x3e>
 8008284:	18e1      	adds	r1, r4, r3
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	2030      	movs	r0, #48	; 0x30
 800828a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800828e:	4422      	add	r2, r4
 8008290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008298:	3302      	adds	r3, #2
 800829a:	e7c7      	b.n	800822c <_printf_common+0x58>
 800829c:	2301      	movs	r3, #1
 800829e:	4622      	mov	r2, r4
 80082a0:	4649      	mov	r1, r9
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c0      	blx	r8
 80082a6:	3001      	adds	r0, #1
 80082a8:	d0e6      	beq.n	8008278 <_printf_common+0xa4>
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7d9      	b.n	8008262 <_printf_common+0x8e>
	...

080082b0 <_printf_i>:
 80082b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	7e0f      	ldrb	r7, [r1, #24]
 80082b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082b8:	2f78      	cmp	r7, #120	; 0x78
 80082ba:	4691      	mov	r9, r2
 80082bc:	4680      	mov	r8, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	469a      	mov	sl, r3
 80082c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082c6:	d807      	bhi.n	80082d8 <_printf_i+0x28>
 80082c8:	2f62      	cmp	r7, #98	; 0x62
 80082ca:	d80a      	bhi.n	80082e2 <_printf_i+0x32>
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	f000 80d8 	beq.w	8008482 <_printf_i+0x1d2>
 80082d2:	2f58      	cmp	r7, #88	; 0x58
 80082d4:	f000 80a3 	beq.w	800841e <_printf_i+0x16e>
 80082d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e0:	e03a      	b.n	8008358 <_printf_i+0xa8>
 80082e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082e6:	2b15      	cmp	r3, #21
 80082e8:	d8f6      	bhi.n	80082d8 <_printf_i+0x28>
 80082ea:	a101      	add	r1, pc, #4	; (adr r1, 80082f0 <_printf_i+0x40>)
 80082ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082f0:	08008349 	.word	0x08008349
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	080082d9 	.word	0x080082d9
 80082fc:	080082d9 	.word	0x080082d9
 8008300:	080082d9 	.word	0x080082d9
 8008304:	080082d9 	.word	0x080082d9
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080082d9 	.word	0x080082d9
 8008310:	080082d9 	.word	0x080082d9
 8008314:	080082d9 	.word	0x080082d9
 8008318:	080082d9 	.word	0x080082d9
 800831c:	08008469 	.word	0x08008469
 8008320:	0800838d 	.word	0x0800838d
 8008324:	0800844b 	.word	0x0800844b
 8008328:	080082d9 	.word	0x080082d9
 800832c:	080082d9 	.word	0x080082d9
 8008330:	0800848b 	.word	0x0800848b
 8008334:	080082d9 	.word	0x080082d9
 8008338:	0800838d 	.word	0x0800838d
 800833c:	080082d9 	.word	0x080082d9
 8008340:	080082d9 	.word	0x080082d9
 8008344:	08008453 	.word	0x08008453
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	602a      	str	r2, [r5, #0]
 8008350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008358:	2301      	movs	r3, #1
 800835a:	e0a3      	b.n	80084a4 <_printf_i+0x1f4>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	6829      	ldr	r1, [r5, #0]
 8008360:	0606      	lsls	r6, r0, #24
 8008362:	f101 0304 	add.w	r3, r1, #4
 8008366:	d50a      	bpl.n	800837e <_printf_i+0xce>
 8008368:	680e      	ldr	r6, [r1, #0]
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	2e00      	cmp	r6, #0
 800836e:	da03      	bge.n	8008378 <_printf_i+0xc8>
 8008370:	232d      	movs	r3, #45	; 0x2d
 8008372:	4276      	negs	r6, r6
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008378:	485e      	ldr	r0, [pc, #376]	; (80084f4 <_printf_i+0x244>)
 800837a:	230a      	movs	r3, #10
 800837c:	e019      	b.n	80083b2 <_printf_i+0x102>
 800837e:	680e      	ldr	r6, [r1, #0]
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008386:	bf18      	it	ne
 8008388:	b236      	sxthne	r6, r6
 800838a:	e7ef      	b.n	800836c <_printf_i+0xbc>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	6820      	ldr	r0, [r4, #0]
 8008390:	1d19      	adds	r1, r3, #4
 8008392:	6029      	str	r1, [r5, #0]
 8008394:	0601      	lsls	r1, r0, #24
 8008396:	d501      	bpl.n	800839c <_printf_i+0xec>
 8008398:	681e      	ldr	r6, [r3, #0]
 800839a:	e002      	b.n	80083a2 <_printf_i+0xf2>
 800839c:	0646      	lsls	r6, r0, #25
 800839e:	d5fb      	bpl.n	8008398 <_printf_i+0xe8>
 80083a0:	881e      	ldrh	r6, [r3, #0]
 80083a2:	4854      	ldr	r0, [pc, #336]	; (80084f4 <_printf_i+0x244>)
 80083a4:	2f6f      	cmp	r7, #111	; 0x6f
 80083a6:	bf0c      	ite	eq
 80083a8:	2308      	moveq	r3, #8
 80083aa:	230a      	movne	r3, #10
 80083ac:	2100      	movs	r1, #0
 80083ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b2:	6865      	ldr	r5, [r4, #4]
 80083b4:	60a5      	str	r5, [r4, #8]
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	bfa2      	ittt	ge
 80083ba:	6821      	ldrge	r1, [r4, #0]
 80083bc:	f021 0104 	bicge.w	r1, r1, #4
 80083c0:	6021      	strge	r1, [r4, #0]
 80083c2:	b90e      	cbnz	r6, 80083c8 <_printf_i+0x118>
 80083c4:	2d00      	cmp	r5, #0
 80083c6:	d04d      	beq.n	8008464 <_printf_i+0x1b4>
 80083c8:	4615      	mov	r5, r2
 80083ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80083ce:	fb03 6711 	mls	r7, r3, r1, r6
 80083d2:	5dc7      	ldrb	r7, [r0, r7]
 80083d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083d8:	4637      	mov	r7, r6
 80083da:	42bb      	cmp	r3, r7
 80083dc:	460e      	mov	r6, r1
 80083de:	d9f4      	bls.n	80083ca <_printf_i+0x11a>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d10b      	bne.n	80083fc <_printf_i+0x14c>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	07de      	lsls	r6, r3, #31
 80083e8:	d508      	bpl.n	80083fc <_printf_i+0x14c>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	4299      	cmp	r1, r3
 80083f0:	bfde      	ittt	le
 80083f2:	2330      	movle	r3, #48	; 0x30
 80083f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083fc:	1b52      	subs	r2, r2, r5
 80083fe:	6122      	str	r2, [r4, #16]
 8008400:	f8cd a000 	str.w	sl, [sp]
 8008404:	464b      	mov	r3, r9
 8008406:	aa03      	add	r2, sp, #12
 8008408:	4621      	mov	r1, r4
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff fee2 	bl	80081d4 <_printf_common>
 8008410:	3001      	adds	r0, #1
 8008412:	d14c      	bne.n	80084ae <_printf_i+0x1fe>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b004      	add	sp, #16
 800841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841e:	4835      	ldr	r0, [pc, #212]	; (80084f4 <_printf_i+0x244>)
 8008420:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008424:	6829      	ldr	r1, [r5, #0]
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f851 6b04 	ldr.w	r6, [r1], #4
 800842c:	6029      	str	r1, [r5, #0]
 800842e:	061d      	lsls	r5, r3, #24
 8008430:	d514      	bpl.n	800845c <_printf_i+0x1ac>
 8008432:	07df      	lsls	r7, r3, #31
 8008434:	bf44      	itt	mi
 8008436:	f043 0320 	orrmi.w	r3, r3, #32
 800843a:	6023      	strmi	r3, [r4, #0]
 800843c:	b91e      	cbnz	r6, 8008446 <_printf_i+0x196>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f023 0320 	bic.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	2310      	movs	r3, #16
 8008448:	e7b0      	b.n	80083ac <_printf_i+0xfc>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f043 0320 	orr.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	2378      	movs	r3, #120	; 0x78
 8008454:	4828      	ldr	r0, [pc, #160]	; (80084f8 <_printf_i+0x248>)
 8008456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800845a:	e7e3      	b.n	8008424 <_printf_i+0x174>
 800845c:	0659      	lsls	r1, r3, #25
 800845e:	bf48      	it	mi
 8008460:	b2b6      	uxthmi	r6, r6
 8008462:	e7e6      	b.n	8008432 <_printf_i+0x182>
 8008464:	4615      	mov	r5, r2
 8008466:	e7bb      	b.n	80083e0 <_printf_i+0x130>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	6826      	ldr	r6, [r4, #0]
 800846c:	6961      	ldr	r1, [r4, #20]
 800846e:	1d18      	adds	r0, r3, #4
 8008470:	6028      	str	r0, [r5, #0]
 8008472:	0635      	lsls	r5, r6, #24
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	d501      	bpl.n	800847c <_printf_i+0x1cc>
 8008478:	6019      	str	r1, [r3, #0]
 800847a:	e002      	b.n	8008482 <_printf_i+0x1d2>
 800847c:	0670      	lsls	r0, r6, #25
 800847e:	d5fb      	bpl.n	8008478 <_printf_i+0x1c8>
 8008480:	8019      	strh	r1, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	6123      	str	r3, [r4, #16]
 8008486:	4615      	mov	r5, r2
 8008488:	e7ba      	b.n	8008400 <_printf_i+0x150>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	602a      	str	r2, [r5, #0]
 8008490:	681d      	ldr	r5, [r3, #0]
 8008492:	6862      	ldr	r2, [r4, #4]
 8008494:	2100      	movs	r1, #0
 8008496:	4628      	mov	r0, r5
 8008498:	f7f7 feba 	bl	8000210 <memchr>
 800849c:	b108      	cbz	r0, 80084a2 <_printf_i+0x1f2>
 800849e:	1b40      	subs	r0, r0, r5
 80084a0:	6060      	str	r0, [r4, #4]
 80084a2:	6863      	ldr	r3, [r4, #4]
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	2300      	movs	r3, #0
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ac:	e7a8      	b.n	8008400 <_printf_i+0x150>
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	462a      	mov	r2, r5
 80084b2:	4649      	mov	r1, r9
 80084b4:	4640      	mov	r0, r8
 80084b6:	47d0      	blx	sl
 80084b8:	3001      	adds	r0, #1
 80084ba:	d0ab      	beq.n	8008414 <_printf_i+0x164>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	079b      	lsls	r3, r3, #30
 80084c0:	d413      	bmi.n	80084ea <_printf_i+0x23a>
 80084c2:	68e0      	ldr	r0, [r4, #12]
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	4298      	cmp	r0, r3
 80084c8:	bfb8      	it	lt
 80084ca:	4618      	movlt	r0, r3
 80084cc:	e7a4      	b.n	8008418 <_printf_i+0x168>
 80084ce:	2301      	movs	r3, #1
 80084d0:	4632      	mov	r2, r6
 80084d2:	4649      	mov	r1, r9
 80084d4:	4640      	mov	r0, r8
 80084d6:	47d0      	blx	sl
 80084d8:	3001      	adds	r0, #1
 80084da:	d09b      	beq.n	8008414 <_printf_i+0x164>
 80084dc:	3501      	adds	r5, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	9903      	ldr	r1, [sp, #12]
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	42ab      	cmp	r3, r5
 80084e6:	dcf2      	bgt.n	80084ce <_printf_i+0x21e>
 80084e8:	e7eb      	b.n	80084c2 <_printf_i+0x212>
 80084ea:	2500      	movs	r5, #0
 80084ec:	f104 0619 	add.w	r6, r4, #25
 80084f0:	e7f5      	b.n	80084de <_printf_i+0x22e>
 80084f2:	bf00      	nop
 80084f4:	080088a1 	.word	0x080088a1
 80084f8:	080088b2 	.word	0x080088b2

080084fc <memmove>:
 80084fc:	4288      	cmp	r0, r1
 80084fe:	b510      	push	{r4, lr}
 8008500:	eb01 0402 	add.w	r4, r1, r2
 8008504:	d902      	bls.n	800850c <memmove+0x10>
 8008506:	4284      	cmp	r4, r0
 8008508:	4623      	mov	r3, r4
 800850a:	d807      	bhi.n	800851c <memmove+0x20>
 800850c:	1e43      	subs	r3, r0, #1
 800850e:	42a1      	cmp	r1, r4
 8008510:	d008      	beq.n	8008524 <memmove+0x28>
 8008512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800851a:	e7f8      	b.n	800850e <memmove+0x12>
 800851c:	4402      	add	r2, r0
 800851e:	4601      	mov	r1, r0
 8008520:	428a      	cmp	r2, r1
 8008522:	d100      	bne.n	8008526 <memmove+0x2a>
 8008524:	bd10      	pop	{r4, pc}
 8008526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800852a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800852e:	e7f7      	b.n	8008520 <memmove+0x24>

08008530 <_free_r>:
 8008530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008532:	2900      	cmp	r1, #0
 8008534:	d044      	beq.n	80085c0 <_free_r+0x90>
 8008536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853a:	9001      	str	r0, [sp, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f1a1 0404 	sub.w	r4, r1, #4
 8008542:	bfb8      	it	lt
 8008544:	18e4      	addlt	r4, r4, r3
 8008546:	f000 f913 	bl	8008770 <__malloc_lock>
 800854a:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <_free_r+0x94>)
 800854c:	9801      	ldr	r0, [sp, #4]
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	b933      	cbnz	r3, 8008560 <_free_r+0x30>
 8008552:	6063      	str	r3, [r4, #4]
 8008554:	6014      	str	r4, [r2, #0]
 8008556:	b003      	add	sp, #12
 8008558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800855c:	f000 b90e 	b.w	800877c <__malloc_unlock>
 8008560:	42a3      	cmp	r3, r4
 8008562:	d908      	bls.n	8008576 <_free_r+0x46>
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	1961      	adds	r1, r4, r5
 8008568:	428b      	cmp	r3, r1
 800856a:	bf01      	itttt	eq
 800856c:	6819      	ldreq	r1, [r3, #0]
 800856e:	685b      	ldreq	r3, [r3, #4]
 8008570:	1949      	addeq	r1, r1, r5
 8008572:	6021      	streq	r1, [r4, #0]
 8008574:	e7ed      	b.n	8008552 <_free_r+0x22>
 8008576:	461a      	mov	r2, r3
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	b10b      	cbz	r3, 8008580 <_free_r+0x50>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d9fa      	bls.n	8008576 <_free_r+0x46>
 8008580:	6811      	ldr	r1, [r2, #0]
 8008582:	1855      	adds	r5, r2, r1
 8008584:	42a5      	cmp	r5, r4
 8008586:	d10b      	bne.n	80085a0 <_free_r+0x70>
 8008588:	6824      	ldr	r4, [r4, #0]
 800858a:	4421      	add	r1, r4
 800858c:	1854      	adds	r4, r2, r1
 800858e:	42a3      	cmp	r3, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	d1e0      	bne.n	8008556 <_free_r+0x26>
 8008594:	681c      	ldr	r4, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	6053      	str	r3, [r2, #4]
 800859a:	4421      	add	r1, r4
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	e7da      	b.n	8008556 <_free_r+0x26>
 80085a0:	d902      	bls.n	80085a8 <_free_r+0x78>
 80085a2:	230c      	movs	r3, #12
 80085a4:	6003      	str	r3, [r0, #0]
 80085a6:	e7d6      	b.n	8008556 <_free_r+0x26>
 80085a8:	6825      	ldr	r5, [r4, #0]
 80085aa:	1961      	adds	r1, r4, r5
 80085ac:	428b      	cmp	r3, r1
 80085ae:	bf04      	itt	eq
 80085b0:	6819      	ldreq	r1, [r3, #0]
 80085b2:	685b      	ldreq	r3, [r3, #4]
 80085b4:	6063      	str	r3, [r4, #4]
 80085b6:	bf04      	itt	eq
 80085b8:	1949      	addeq	r1, r1, r5
 80085ba:	6021      	streq	r1, [r4, #0]
 80085bc:	6054      	str	r4, [r2, #4]
 80085be:	e7ca      	b.n	8008556 <_free_r+0x26>
 80085c0:	b003      	add	sp, #12
 80085c2:	bd30      	pop	{r4, r5, pc}
 80085c4:	20004c0c 	.word	0x20004c0c

080085c8 <sbrk_aligned>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4e0e      	ldr	r6, [pc, #56]	; (8008604 <sbrk_aligned+0x3c>)
 80085cc:	460c      	mov	r4, r1
 80085ce:	6831      	ldr	r1, [r6, #0]
 80085d0:	4605      	mov	r5, r0
 80085d2:	b911      	cbnz	r1, 80085da <sbrk_aligned+0x12>
 80085d4:	f000 f8bc 	bl	8008750 <_sbrk_r>
 80085d8:	6030      	str	r0, [r6, #0]
 80085da:	4621      	mov	r1, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 f8b7 	bl	8008750 <_sbrk_r>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d00a      	beq.n	80085fc <sbrk_aligned+0x34>
 80085e6:	1cc4      	adds	r4, r0, #3
 80085e8:	f024 0403 	bic.w	r4, r4, #3
 80085ec:	42a0      	cmp	r0, r4
 80085ee:	d007      	beq.n	8008600 <sbrk_aligned+0x38>
 80085f0:	1a21      	subs	r1, r4, r0
 80085f2:	4628      	mov	r0, r5
 80085f4:	f000 f8ac 	bl	8008750 <_sbrk_r>
 80085f8:	3001      	adds	r0, #1
 80085fa:	d101      	bne.n	8008600 <sbrk_aligned+0x38>
 80085fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008600:	4620      	mov	r0, r4
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	20004c10 	.word	0x20004c10

08008608 <_malloc_r>:
 8008608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	1ccd      	adds	r5, r1, #3
 800860e:	f025 0503 	bic.w	r5, r5, #3
 8008612:	3508      	adds	r5, #8
 8008614:	2d0c      	cmp	r5, #12
 8008616:	bf38      	it	cc
 8008618:	250c      	movcc	r5, #12
 800861a:	2d00      	cmp	r5, #0
 800861c:	4607      	mov	r7, r0
 800861e:	db01      	blt.n	8008624 <_malloc_r+0x1c>
 8008620:	42a9      	cmp	r1, r5
 8008622:	d905      	bls.n	8008630 <_malloc_r+0x28>
 8008624:	230c      	movs	r3, #12
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	2600      	movs	r6, #0
 800862a:	4630      	mov	r0, r6
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	4e2e      	ldr	r6, [pc, #184]	; (80086ec <_malloc_r+0xe4>)
 8008632:	f000 f89d 	bl	8008770 <__malloc_lock>
 8008636:	6833      	ldr	r3, [r6, #0]
 8008638:	461c      	mov	r4, r3
 800863a:	bb34      	cbnz	r4, 800868a <_malloc_r+0x82>
 800863c:	4629      	mov	r1, r5
 800863e:	4638      	mov	r0, r7
 8008640:	f7ff ffc2 	bl	80085c8 <sbrk_aligned>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	4604      	mov	r4, r0
 8008648:	d14d      	bne.n	80086e6 <_malloc_r+0xde>
 800864a:	6834      	ldr	r4, [r6, #0]
 800864c:	4626      	mov	r6, r4
 800864e:	2e00      	cmp	r6, #0
 8008650:	d140      	bne.n	80086d4 <_malloc_r+0xcc>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	4631      	mov	r1, r6
 8008656:	4638      	mov	r0, r7
 8008658:	eb04 0803 	add.w	r8, r4, r3
 800865c:	f000 f878 	bl	8008750 <_sbrk_r>
 8008660:	4580      	cmp	r8, r0
 8008662:	d13a      	bne.n	80086da <_malloc_r+0xd2>
 8008664:	6821      	ldr	r1, [r4, #0]
 8008666:	3503      	adds	r5, #3
 8008668:	1a6d      	subs	r5, r5, r1
 800866a:	f025 0503 	bic.w	r5, r5, #3
 800866e:	3508      	adds	r5, #8
 8008670:	2d0c      	cmp	r5, #12
 8008672:	bf38      	it	cc
 8008674:	250c      	movcc	r5, #12
 8008676:	4629      	mov	r1, r5
 8008678:	4638      	mov	r0, r7
 800867a:	f7ff ffa5 	bl	80085c8 <sbrk_aligned>
 800867e:	3001      	adds	r0, #1
 8008680:	d02b      	beq.n	80086da <_malloc_r+0xd2>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	442b      	add	r3, r5
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	e00e      	b.n	80086a8 <_malloc_r+0xa0>
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	1b52      	subs	r2, r2, r5
 800868e:	d41e      	bmi.n	80086ce <_malloc_r+0xc6>
 8008690:	2a0b      	cmp	r2, #11
 8008692:	d916      	bls.n	80086c2 <_malloc_r+0xba>
 8008694:	1961      	adds	r1, r4, r5
 8008696:	42a3      	cmp	r3, r4
 8008698:	6025      	str	r5, [r4, #0]
 800869a:	bf18      	it	ne
 800869c:	6059      	strne	r1, [r3, #4]
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	bf08      	it	eq
 80086a2:	6031      	streq	r1, [r6, #0]
 80086a4:	5162      	str	r2, [r4, r5]
 80086a6:	604b      	str	r3, [r1, #4]
 80086a8:	4638      	mov	r0, r7
 80086aa:	f104 060b 	add.w	r6, r4, #11
 80086ae:	f000 f865 	bl	800877c <__malloc_unlock>
 80086b2:	f026 0607 	bic.w	r6, r6, #7
 80086b6:	1d23      	adds	r3, r4, #4
 80086b8:	1af2      	subs	r2, r6, r3
 80086ba:	d0b6      	beq.n	800862a <_malloc_r+0x22>
 80086bc:	1b9b      	subs	r3, r3, r6
 80086be:	50a3      	str	r3, [r4, r2]
 80086c0:	e7b3      	b.n	800862a <_malloc_r+0x22>
 80086c2:	6862      	ldr	r2, [r4, #4]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	bf0c      	ite	eq
 80086c8:	6032      	streq	r2, [r6, #0]
 80086ca:	605a      	strne	r2, [r3, #4]
 80086cc:	e7ec      	b.n	80086a8 <_malloc_r+0xa0>
 80086ce:	4623      	mov	r3, r4
 80086d0:	6864      	ldr	r4, [r4, #4]
 80086d2:	e7b2      	b.n	800863a <_malloc_r+0x32>
 80086d4:	4634      	mov	r4, r6
 80086d6:	6876      	ldr	r6, [r6, #4]
 80086d8:	e7b9      	b.n	800864e <_malloc_r+0x46>
 80086da:	230c      	movs	r3, #12
 80086dc:	603b      	str	r3, [r7, #0]
 80086de:	4638      	mov	r0, r7
 80086e0:	f000 f84c 	bl	800877c <__malloc_unlock>
 80086e4:	e7a1      	b.n	800862a <_malloc_r+0x22>
 80086e6:	6025      	str	r5, [r4, #0]
 80086e8:	e7de      	b.n	80086a8 <_malloc_r+0xa0>
 80086ea:	bf00      	nop
 80086ec:	20004c0c 	.word	0x20004c0c

080086f0 <_realloc_r>:
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	4680      	mov	r8, r0
 80086f6:	4614      	mov	r4, r2
 80086f8:	460e      	mov	r6, r1
 80086fa:	b921      	cbnz	r1, 8008706 <_realloc_r+0x16>
 80086fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	4611      	mov	r1, r2
 8008702:	f7ff bf81 	b.w	8008608 <_malloc_r>
 8008706:	b92a      	cbnz	r2, 8008714 <_realloc_r+0x24>
 8008708:	f7ff ff12 	bl	8008530 <_free_r>
 800870c:	4625      	mov	r5, r4
 800870e:	4628      	mov	r0, r5
 8008710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008714:	f000 f838 	bl	8008788 <_malloc_usable_size_r>
 8008718:	4284      	cmp	r4, r0
 800871a:	4607      	mov	r7, r0
 800871c:	d802      	bhi.n	8008724 <_realloc_r+0x34>
 800871e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008722:	d812      	bhi.n	800874a <_realloc_r+0x5a>
 8008724:	4621      	mov	r1, r4
 8008726:	4640      	mov	r0, r8
 8008728:	f7ff ff6e 	bl	8008608 <_malloc_r>
 800872c:	4605      	mov	r5, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	d0ed      	beq.n	800870e <_realloc_r+0x1e>
 8008732:	42bc      	cmp	r4, r7
 8008734:	4622      	mov	r2, r4
 8008736:	4631      	mov	r1, r6
 8008738:	bf28      	it	cs
 800873a:	463a      	movcs	r2, r7
 800873c:	f7ff fbb8 	bl	8007eb0 <memcpy>
 8008740:	4631      	mov	r1, r6
 8008742:	4640      	mov	r0, r8
 8008744:	f7ff fef4 	bl	8008530 <_free_r>
 8008748:	e7e1      	b.n	800870e <_realloc_r+0x1e>
 800874a:	4635      	mov	r5, r6
 800874c:	e7df      	b.n	800870e <_realloc_r+0x1e>
	...

08008750 <_sbrk_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d06      	ldr	r5, [pc, #24]	; (800876c <_sbrk_r+0x1c>)
 8008754:	2300      	movs	r3, #0
 8008756:	4604      	mov	r4, r0
 8008758:	4608      	mov	r0, r1
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	f7f8 fd1a 	bl	8001194 <_sbrk>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_sbrk_r+0x1a>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_sbrk_r+0x1a>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	20004c14 	.word	0x20004c14

08008770 <__malloc_lock>:
 8008770:	4801      	ldr	r0, [pc, #4]	; (8008778 <__malloc_lock+0x8>)
 8008772:	f000 b811 	b.w	8008798 <__retarget_lock_acquire_recursive>
 8008776:	bf00      	nop
 8008778:	20004c18 	.word	0x20004c18

0800877c <__malloc_unlock>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__malloc_unlock+0x8>)
 800877e:	f000 b80c 	b.w	800879a <__retarget_lock_release_recursive>
 8008782:	bf00      	nop
 8008784:	20004c18 	.word	0x20004c18

08008788 <_malloc_usable_size_r>:
 8008788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878c:	1f18      	subs	r0, r3, #4
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfbc      	itt	lt
 8008792:	580b      	ldrlt	r3, [r1, r0]
 8008794:	18c0      	addlt	r0, r0, r3
 8008796:	4770      	bx	lr

08008798 <__retarget_lock_acquire_recursive>:
 8008798:	4770      	bx	lr

0800879a <__retarget_lock_release_recursive>:
 800879a:	4770      	bx	lr

0800879c <_init>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr

080087a8 <_fini>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr
